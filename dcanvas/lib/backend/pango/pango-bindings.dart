// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Pango Dart Bindings
class Pango {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Pango(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Pango.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int pango_units_from_double(
    double d,
  ) {
    return _pango_units_from_double(
      d,
    );
  }

  late final _pango_units_from_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'pango_units_from_double');
  late final _pango_units_from_double =
      _pango_units_from_doublePtr.asFunction<int Function(double)>();

  double pango_units_to_double(
    int i,
  ) {
    return _pango_units_to_double(
      i,
    );
  }

  late final _pango_units_to_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int)>>(
          'pango_units_to_double');
  late final _pango_units_to_double =
      _pango_units_to_doublePtr.asFunction<double Function(int)>();

  void pango_extents_to_pixels(
    ffi.Pointer<PangoRectangle> inclusive,
    ffi.Pointer<PangoRectangle> nearest,
  ) {
    return _pango_extents_to_pixels(
      inclusive,
      nearest,
    );
  }

  late final _pango_extents_to_pixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>>('pango_extents_to_pixels');
  late final _pango_extents_to_pixels = _pango_extents_to_pixelsPtr.asFunction<
      void Function(
          ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  int pango_font_description_get_type() {
    return _pango_font_description_get_type();
  }

  late final _pango_font_description_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'pango_font_description_get_type');
  late final _pango_font_description_get_type =
      _pango_font_description_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoFontDescription> pango_font_description_new() {
    return _pango_font_description_new();
  }

  late final _pango_font_description_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PangoFontDescription> Function()>>(
          'pango_font_description_new');
  late final _pango_font_description_new = _pango_font_description_newPtr
      .asFunction<ffi.Pointer<PangoFontDescription> Function()>();

  ffi.Pointer<PangoFontDescription> pango_font_description_copy(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_copy(
      desc,
    );
  }

  late final _pango_font_description_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PangoFontDescription> Function(
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_copy');
  late final _pango_font_description_copy =
      _pango_font_description_copyPtr.asFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFontDescription>)>();

  ffi.Pointer<PangoFontDescription> pango_font_description_copy_static(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_copy_static(
      desc,
    );
  }

  late final _pango_font_description_copy_staticPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PangoFontDescription> Function(
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_copy_static');
  late final _pango_font_description_copy_static =
      _pango_font_description_copy_staticPtr.asFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFontDescription>)>();

  int pango_font_description_hash(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_hash(
      desc,
    );
  }

  late final _pango_font_description_hashPtr = _lookup<
          ffi
          .NativeFunction<guint Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_hash');
  late final _pango_font_description_hash = _pango_font_description_hashPtr
      .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  int pango_font_description_equal(
    ffi.Pointer<PangoFontDescription> desc1,
    ffi.Pointer<PangoFontDescription> desc2,
  ) {
    return _pango_font_description_equal(
      desc1,
      desc2,
    );
  }

  late final _pango_font_description_equalPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<PangoFontDescription>,
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_equal');
  late final _pango_font_description_equal =
      _pango_font_description_equalPtr.asFunction<
          int Function(ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_free(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_free(
      desc,
    );
  }

  late final _pango_font_description_freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_free');
  late final _pango_font_description_free = _pango_font_description_freePtr
      .asFunction<void Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_descriptions_free(
    ffi.Pointer<ffi.Pointer<PangoFontDescription>> descs,
    int n_descs,
  ) {
    return _pango_font_descriptions_free(
      descs,
      n_descs,
    );
  }

  late final _pango_font_descriptions_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<PangoFontDescription>>,
              ffi.Int)>>('pango_font_descriptions_free');
  late final _pango_font_descriptions_free =
      _pango_font_descriptions_freePtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<PangoFontDescription>>, int)>();

  void pango_font_description_set_family(
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<ffi.Char> family,
  ) {
    return _pango_font_description_set_family(
      desc,
      family,
    );
  }

  late final _pango_font_description_set_familyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<ffi.Char>)>>('pango_font_description_set_family');
  late final _pango_font_description_set_family =
      _pango_font_description_set_familyPtr.asFunction<
          void Function(
              ffi.Pointer<PangoFontDescription>, ffi.Pointer<ffi.Char>)>();

  void pango_font_description_set_family_static(
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<ffi.Char> family,
  ) {
    return _pango_font_description_set_family_static(
      desc,
      family,
    );
  }

  late final _pango_font_description_set_family_staticPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<PangoFontDescription>, ffi.Pointer<ffi.Char>)>>(
      'pango_font_description_set_family_static');
  late final _pango_font_description_set_family_static =
      _pango_font_description_set_family_staticPtr.asFunction<
          void Function(
              ffi.Pointer<PangoFontDescription>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pango_font_description_get_family(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_get_family(
      desc,
    );
  }

  late final _pango_font_description_get_familyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_family');
  late final _pango_font_description_get_family =
      _pango_font_description_get_familyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_style(
    ffi.Pointer<PangoFontDescription> desc,
    PangoStyle style,
  ) {
    return _pango_font_description_set_style(
      desc,
      style.value,
    );
  }

  late final _pango_font_description_set_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.UnsignedInt)>>('pango_font_description_set_style');
  late final _pango_font_description_set_style =
      _pango_font_description_set_stylePtr
          .asFunction<void Function(ffi.Pointer<PangoFontDescription>, int)>();

  PangoStyle pango_font_description_get_style(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return PangoStyle.fromValue(_pango_font_description_get_style(
      desc,
    ));
  }

  late final _pango_font_description_get_stylePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_style');
  late final _pango_font_description_get_style =
      _pango_font_description_get_stylePtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_variant(
    ffi.Pointer<PangoFontDescription> desc,
    PangoVariant variant,
  ) {
    return _pango_font_description_set_variant(
      desc,
      variant.value,
    );
  }

  late final _pango_font_description_set_variantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.UnsignedInt)>>('pango_font_description_set_variant');
  late final _pango_font_description_set_variant =
      _pango_font_description_set_variantPtr
          .asFunction<void Function(ffi.Pointer<PangoFontDescription>, int)>();

  PangoVariant pango_font_description_get_variant(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return PangoVariant.fromValue(_pango_font_description_get_variant(
      desc,
    ));
  }

  late final _pango_font_description_get_variantPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_variant');
  late final _pango_font_description_get_variant =
      _pango_font_description_get_variantPtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_weight(
    ffi.Pointer<PangoFontDescription> desc,
    PangoWeight weight,
  ) {
    return _pango_font_description_set_weight(
      desc,
      weight.value,
    );
  }

  late final _pango_font_description_set_weightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.UnsignedInt)>>('pango_font_description_set_weight');
  late final _pango_font_description_set_weight =
      _pango_font_description_set_weightPtr
          .asFunction<void Function(ffi.Pointer<PangoFontDescription>, int)>();

  PangoWeight pango_font_description_get_weight(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return PangoWeight.fromValue(_pango_font_description_get_weight(
      desc,
    ));
  }

  late final _pango_font_description_get_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_weight');
  late final _pango_font_description_get_weight =
      _pango_font_description_get_weightPtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_stretch(
    ffi.Pointer<PangoFontDescription> desc,
    PangoStretch stretch,
  ) {
    return _pango_font_description_set_stretch(
      desc,
      stretch.value,
    );
  }

  late final _pango_font_description_set_stretchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.UnsignedInt)>>('pango_font_description_set_stretch');
  late final _pango_font_description_set_stretch =
      _pango_font_description_set_stretchPtr
          .asFunction<void Function(ffi.Pointer<PangoFontDescription>, int)>();

  PangoStretch pango_font_description_get_stretch(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return PangoStretch.fromValue(_pango_font_description_get_stretch(
      desc,
    ));
  }

  late final _pango_font_description_get_stretchPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_stretch');
  late final _pango_font_description_get_stretch =
      _pango_font_description_get_stretchPtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_size(
    ffi.Pointer<PangoFontDescription> desc,
    int size,
  ) {
    return _pango_font_description_set_size(
      desc,
      size,
    );
  }

  late final _pango_font_description_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              gint)>>('pango_font_description_set_size');
  late final _pango_font_description_set_size =
      _pango_font_description_set_sizePtr
          .asFunction<void Function(ffi.Pointer<PangoFontDescription>, int)>();

  int pango_font_description_get_size(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_get_size(
      desc,
    );
  }

  late final _pango_font_description_get_sizePtr = _lookup<
          ffi.NativeFunction<gint Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_size');
  late final _pango_font_description_get_size =
      _pango_font_description_get_sizePtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_absolute_size(
    ffi.Pointer<PangoFontDescription> desc,
    double size,
  ) {
    return _pango_font_description_set_absolute_size(
      desc,
      size,
    );
  }

  late final _pango_font_description_set_absolute_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.Double)>>('pango_font_description_set_absolute_size');
  late final _pango_font_description_set_absolute_size =
      _pango_font_description_set_absolute_sizePtr.asFunction<
          void Function(ffi.Pointer<PangoFontDescription>, double)>();

  int pango_font_description_get_size_is_absolute(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_get_size_is_absolute(
      desc,
    );
  }

  late final _pango_font_description_get_size_is_absolutePtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_size_is_absolute');
  late final _pango_font_description_get_size_is_absolute =
      _pango_font_description_get_size_is_absolutePtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_gravity(
    ffi.Pointer<PangoFontDescription> desc,
    PangoGravity gravity,
  ) {
    return _pango_font_description_set_gravity(
      desc,
      gravity.value,
    );
  }

  late final _pango_font_description_set_gravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.UnsignedInt)>>('pango_font_description_set_gravity');
  late final _pango_font_description_set_gravity =
      _pango_font_description_set_gravityPtr
          .asFunction<void Function(ffi.Pointer<PangoFontDescription>, int)>();

  PangoGravity pango_font_description_get_gravity(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return PangoGravity.fromValue(_pango_font_description_get_gravity(
      desc,
    ));
  }

  late final _pango_font_description_get_gravityPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_gravity');
  late final _pango_font_description_get_gravity =
      _pango_font_description_get_gravityPtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_set_variations_static(
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<ffi.Char> variations,
  ) {
    return _pango_font_description_set_variations_static(
      desc,
      variations,
    );
  }

  late final _pango_font_description_set_variations_staticPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<PangoFontDescription>, ffi.Pointer<ffi.Char>)>>(
      'pango_font_description_set_variations_static');
  late final _pango_font_description_set_variations_static =
      _pango_font_description_set_variations_staticPtr.asFunction<
          void Function(
              ffi.Pointer<PangoFontDescription>, ffi.Pointer<ffi.Char>)>();

  void pango_font_description_set_variations(
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<ffi.Char> variations,
  ) {
    return _pango_font_description_set_variations(
      desc,
      variations,
    );
  }

  late final _pango_font_description_set_variationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<ffi.Char>)>>('pango_font_description_set_variations');
  late final _pango_font_description_set_variations =
      _pango_font_description_set_variationsPtr.asFunction<
          void Function(
              ffi.Pointer<PangoFontDescription>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pango_font_description_get_variations(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_get_variations(
      desc,
    );
  }

  late final _pango_font_description_get_variationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_variations');
  late final _pango_font_description_get_variations =
      _pango_font_description_get_variationsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoFontDescription>)>();

  PangoFontMask pango_font_description_get_set_fields(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return PangoFontMask.fromValue(_pango_font_description_get_set_fields(
      desc,
    ));
  }

  late final _pango_font_description_get_set_fieldsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_get_set_fields');
  late final _pango_font_description_get_set_fields =
      _pango_font_description_get_set_fieldsPtr
          .asFunction<int Function(ffi.Pointer<PangoFontDescription>)>();

  void pango_font_description_unset_fields(
    ffi.Pointer<PangoFontDescription> desc,
    PangoFontMask to_unset,
  ) {
    return _pango_font_description_unset_fields(
      desc,
      to_unset.value,
    );
  }

  late final _pango_font_description_unset_fieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFontDescription>,
              ffi.UnsignedInt)>>('pango_font_description_unset_fields');
  late final _pango_font_description_unset_fields =
      _pango_font_description_unset_fieldsPtr
          .asFunction<void Function(ffi.Pointer<PangoFontDescription>, int)>();

  void pango_font_description_merge(
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<PangoFontDescription> desc_to_merge,
    int replace_existing,
  ) {
    return _pango_font_description_merge(
      desc,
      desc_to_merge,
      replace_existing,
    );
  }

  late final _pango_font_description_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoFontDescription>,
              gboolean)>>('pango_font_description_merge');
  late final _pango_font_description_merge =
      _pango_font_description_mergePtr.asFunction<
          void Function(ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoFontDescription>, int)>();

  void pango_font_description_merge_static(
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<PangoFontDescription> desc_to_merge,
    int replace_existing,
  ) {
    return _pango_font_description_merge_static(
      desc,
      desc_to_merge,
      replace_existing,
    );
  }

  late final _pango_font_description_merge_staticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoFontDescription>,
              gboolean)>>('pango_font_description_merge_static');
  late final _pango_font_description_merge_static =
      _pango_font_description_merge_staticPtr.asFunction<
          void Function(ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoFontDescription>, int)>();

  int pango_font_description_better_match(
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<PangoFontDescription> old_match,
    ffi.Pointer<PangoFontDescription> new_match,
  ) {
    return _pango_font_description_better_match(
      desc,
      old_match,
      new_match,
    );
  }

  late final _pango_font_description_better_matchPtr = _lookup<
          ffi.NativeFunction<
              gboolean Function(
                  ffi.Pointer<PangoFontDescription>,
                  ffi.Pointer<PangoFontDescription>,
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_better_match');
  late final _pango_font_description_better_match =
      _pango_font_description_better_matchPtr.asFunction<
          int Function(
              ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoFontDescription>)>();

  ffi.Pointer<PangoFontDescription> pango_font_description_from_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pango_font_description_from_string(
      str,
    );
  }

  late final _pango_font_description_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<ffi.Char>)>>('pango_font_description_from_string');
  late final _pango_font_description_from_string =
      _pango_font_description_from_stringPtr.asFunction<
          ffi.Pointer<PangoFontDescription> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pango_font_description_to_string(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_to_string(
      desc,
    );
  }

  late final _pango_font_description_to_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_to_string');
  late final _pango_font_description_to_string =
      _pango_font_description_to_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoFontDescription>)>();

  ffi.Pointer<ffi.Char> pango_font_description_to_filename(
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_font_description_to_filename(
      desc,
    );
  }

  late final _pango_font_description_to_filenamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_font_description_to_filename');
  late final _pango_font_description_to_filename =
      _pango_font_description_to_filenamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoFontDescription>)>();

  int pango_font_metrics_get_type() {
    return _pango_font_metrics_get_type();
  }

  late final _pango_font_metrics_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'pango_font_metrics_get_type');
  late final _pango_font_metrics_get_type =
      _pango_font_metrics_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoFontMetrics> pango_font_metrics_ref(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_ref(
      metrics,
    );
  }

  late final _pango_font_metrics_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontMetrics> Function(
              ffi.Pointer<PangoFontMetrics>)>>('pango_font_metrics_ref');
  late final _pango_font_metrics_ref = _pango_font_metrics_refPtr.asFunction<
      ffi.Pointer<PangoFontMetrics> Function(ffi.Pointer<PangoFontMetrics>)>();

  void pango_font_metrics_unref(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_unref(
      metrics,
    );
  }

  late final _pango_font_metrics_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_unref');
  late final _pango_font_metrics_unref = _pango_font_metrics_unrefPtr
      .asFunction<void Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_ascent(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_ascent(
      metrics,
    );
  }

  late final _pango_font_metrics_get_ascentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_ascent');
  late final _pango_font_metrics_get_ascent = _pango_font_metrics_get_ascentPtr
      .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_descent(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_descent(
      metrics,
    );
  }

  late final _pango_font_metrics_get_descentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_descent');
  late final _pango_font_metrics_get_descent =
      _pango_font_metrics_get_descentPtr
          .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_height(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_height(
      metrics,
    );
  }

  late final _pango_font_metrics_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_height');
  late final _pango_font_metrics_get_height = _pango_font_metrics_get_heightPtr
      .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_approximate_char_width(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_approximate_char_width(
      metrics,
    );
  }

  late final _pango_font_metrics_get_approximate_char_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_approximate_char_width');
  late final _pango_font_metrics_get_approximate_char_width =
      _pango_font_metrics_get_approximate_char_widthPtr
          .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_approximate_digit_width(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_approximate_digit_width(
      metrics,
    );
  }

  late final _pango_font_metrics_get_approximate_digit_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_approximate_digit_width');
  late final _pango_font_metrics_get_approximate_digit_width =
      _pango_font_metrics_get_approximate_digit_widthPtr
          .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_underline_position(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_underline_position(
      metrics,
    );
  }

  late final _pango_font_metrics_get_underline_positionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_underline_position');
  late final _pango_font_metrics_get_underline_position =
      _pango_font_metrics_get_underline_positionPtr
          .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_underline_thickness(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_underline_thickness(
      metrics,
    );
  }

  late final _pango_font_metrics_get_underline_thicknessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_underline_thickness');
  late final _pango_font_metrics_get_underline_thickness =
      _pango_font_metrics_get_underline_thicknessPtr
          .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_strikethrough_position(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_strikethrough_position(
      metrics,
    );
  }

  late final _pango_font_metrics_get_strikethrough_positionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_strikethrough_position');
  late final _pango_font_metrics_get_strikethrough_position =
      _pango_font_metrics_get_strikethrough_positionPtr
          .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_metrics_get_strikethrough_thickness(
    ffi.Pointer<PangoFontMetrics> metrics,
  ) {
    return _pango_font_metrics_get_strikethrough_thickness(
      metrics,
    );
  }

  late final _pango_font_metrics_get_strikethrough_thicknessPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoFontMetrics>)>>(
      'pango_font_metrics_get_strikethrough_thickness');
  late final _pango_font_metrics_get_strikethrough_thickness =
      _pango_font_metrics_get_strikethrough_thicknessPtr
          .asFunction<int Function(ffi.Pointer<PangoFontMetrics>)>();

  int pango_font_family_get_type() {
    return _pango_font_family_get_type();
  }

  late final _pango_font_family_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'pango_font_family_get_type');
  late final _pango_font_family_get_type =
      _pango_font_family_get_typePtr.asFunction<int Function()>();

  void pango_font_family_list_faces(
    ffi.Pointer<PangoFontFamily> family,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<PangoFontFace>>> faces,
    ffi.Pointer<ffi.Int> n_faces,
  ) {
    return _pango_font_family_list_faces(
      family,
      faces,
      n_faces,
    );
  }

  late final _pango_font_family_list_facesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFontFamily>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<PangoFontFace>>>,
              ffi.Pointer<ffi.Int>)>>('pango_font_family_list_faces');
  late final _pango_font_family_list_faces =
      _pango_font_family_list_facesPtr.asFunction<
          void Function(
              ffi.Pointer<PangoFontFamily>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<PangoFontFace>>>,
              ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> pango_font_family_get_name(
    ffi.Pointer<PangoFontFamily> family,
  ) {
    return _pango_font_family_get_name(
      family,
    );
  }

  late final _pango_font_family_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PangoFontFamily>)>>('pango_font_family_get_name');
  late final _pango_font_family_get_name =
      _pango_font_family_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoFontFamily>)>();

  int pango_font_family_is_monospace(
    ffi.Pointer<PangoFontFamily> family,
  ) {
    return _pango_font_family_is_monospace(
      family,
    );
  }

  late final _pango_font_family_is_monospacePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoFontFamily>)>>(
      'pango_font_family_is_monospace');
  late final _pango_font_family_is_monospace =
      _pango_font_family_is_monospacePtr
          .asFunction<int Function(ffi.Pointer<PangoFontFamily>)>();

  int pango_font_family_is_variable(
    ffi.Pointer<PangoFontFamily> family,
  ) {
    return _pango_font_family_is_variable(
      family,
    );
  }

  late final _pango_font_family_is_variablePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoFontFamily>)>>(
      'pango_font_family_is_variable');
  late final _pango_font_family_is_variable = _pango_font_family_is_variablePtr
      .asFunction<int Function(ffi.Pointer<PangoFontFamily>)>();

  ffi.Pointer<PangoFontFace> pango_font_family_get_face(
    ffi.Pointer<PangoFontFamily> family,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _pango_font_family_get_face(
      family,
      name,
    );
  }

  late final _pango_font_family_get_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontFace> Function(ffi.Pointer<PangoFontFamily>,
              ffi.Pointer<ffi.Char>)>>('pango_font_family_get_face');
  late final _pango_font_family_get_face =
      _pango_font_family_get_facePtr.asFunction<
          ffi.Pointer<PangoFontFace> Function(
              ffi.Pointer<PangoFontFamily>, ffi.Pointer<ffi.Char>)>();

  int pango_font_face_get_type() {
    return _pango_font_face_get_type();
  }

  late final _pango_font_face_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('pango_font_face_get_type');
  late final _pango_font_face_get_type =
      _pango_font_face_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoFontDescription> pango_font_face_describe(
    ffi.Pointer<PangoFontFace> face,
  ) {
    return _pango_font_face_describe(
      face,
    );
  }

  late final _pango_font_face_describePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFontFace>)>>('pango_font_face_describe');
  late final _pango_font_face_describe =
      _pango_font_face_describePtr.asFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFontFace>)>();

  ffi.Pointer<ffi.Char> pango_font_face_get_face_name(
    ffi.Pointer<PangoFontFace> face,
  ) {
    return _pango_font_face_get_face_name(
      face,
    );
  }

  late final _pango_font_face_get_face_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PangoFontFace>)>>('pango_font_face_get_face_name');
  late final _pango_font_face_get_face_name = _pango_font_face_get_face_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoFontFace>)>();

  void pango_font_face_list_sizes(
    ffi.Pointer<PangoFontFace> face,
    ffi.Pointer<ffi.Pointer<ffi.Int>> sizes,
    ffi.Pointer<ffi.Int> n_sizes,
  ) {
    return _pango_font_face_list_sizes(
      face,
      sizes,
      n_sizes,
    );
  }

  late final _pango_font_face_list_sizesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFontFace>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>>('pango_font_face_list_sizes');
  late final _pango_font_face_list_sizes =
      _pango_font_face_list_sizesPtr.asFunction<
          void Function(ffi.Pointer<PangoFontFace>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Pointer<ffi.Int>)>();

  int pango_font_face_is_synthesized(
    ffi.Pointer<PangoFontFace> face,
  ) {
    return _pango_font_face_is_synthesized(
      face,
    );
  }

  late final _pango_font_face_is_synthesizedPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoFontFace>)>>(
      'pango_font_face_is_synthesized');
  late final _pango_font_face_is_synthesized =
      _pango_font_face_is_synthesizedPtr
          .asFunction<int Function(ffi.Pointer<PangoFontFace>)>();

  ffi.Pointer<PangoFontFamily> pango_font_face_get_family(
    ffi.Pointer<PangoFontFace> face,
  ) {
    return _pango_font_face_get_family(
      face,
    );
  }

  late final _pango_font_face_get_familyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontFamily> Function(
              ffi.Pointer<PangoFontFace>)>>('pango_font_face_get_family');
  late final _pango_font_face_get_family =
      _pango_font_face_get_familyPtr.asFunction<
          ffi.Pointer<PangoFontFamily> Function(ffi.Pointer<PangoFontFace>)>();

  int pango_font_get_type() {
    return _pango_font_get_type();
  }

  late final _pango_font_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('pango_font_get_type');
  late final _pango_font_get_type =
      _pango_font_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoFontDescription> pango_font_describe(
    ffi.Pointer<PangoFont> font,
  ) {
    return _pango_font_describe(
      font,
    );
  }

  late final _pango_font_describePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFont>)>>('pango_font_describe');
  late final _pango_font_describe = _pango_font_describePtr.asFunction<
      ffi.Pointer<PangoFontDescription> Function(ffi.Pointer<PangoFont>)>();

  ffi.Pointer<PangoFontDescription> pango_font_describe_with_absolute_size(
    ffi.Pointer<PangoFont> font,
  ) {
    return _pango_font_describe_with_absolute_size(
      font,
    );
  }

  late final _pango_font_describe_with_absolute_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PangoFontDescription> Function(
                  ffi.Pointer<PangoFont>)>>(
      'pango_font_describe_with_absolute_size');
  late final _pango_font_describe_with_absolute_size =
      _pango_font_describe_with_absolute_sizePtr.asFunction<
          ffi.Pointer<PangoFontDescription> Function(ffi.Pointer<PangoFont>)>();

  ffi.Pointer<PangoCoverage> pango_font_get_coverage(
    ffi.Pointer<PangoFont> font,
    ffi.Pointer<PangoLanguage> language,
  ) {
    return _pango_font_get_coverage(
      font,
      language,
    );
  }

  late final _pango_font_get_coveragePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoCoverage> Function(ffi.Pointer<PangoFont>,
              ffi.Pointer<PangoLanguage>)>>('pango_font_get_coverage');
  late final _pango_font_get_coverage = _pango_font_get_coveragePtr.asFunction<
      ffi.Pointer<PangoCoverage> Function(
          ffi.Pointer<PangoFont>, ffi.Pointer<PangoLanguage>)>();

  ffi.Pointer<PangoEngineShape> pango_font_find_shaper(
    ffi.Pointer<PangoFont> font,
    ffi.Pointer<PangoLanguage> language,
    int ch,
  ) {
    return _pango_font_find_shaper(
      font,
      language,
      ch,
    );
  }

  late final _pango_font_find_shaperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoEngineShape> Function(ffi.Pointer<PangoFont>,
              ffi.Pointer<PangoLanguage>, guint32)>>('pango_font_find_shaper');
  late final _pango_font_find_shaper = _pango_font_find_shaperPtr.asFunction<
      ffi.Pointer<PangoEngineShape> Function(
          ffi.Pointer<PangoFont>, ffi.Pointer<PangoLanguage>, int)>();

  ffi.Pointer<PangoFontMetrics> pango_font_get_metrics(
    ffi.Pointer<PangoFont> font,
    ffi.Pointer<PangoLanguage> language,
  ) {
    return _pango_font_get_metrics(
      font,
      language,
    );
  }

  late final _pango_font_get_metricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontMetrics> Function(ffi.Pointer<PangoFont>,
              ffi.Pointer<PangoLanguage>)>>('pango_font_get_metrics');
  late final _pango_font_get_metrics = _pango_font_get_metricsPtr.asFunction<
      ffi.Pointer<PangoFontMetrics> Function(
          ffi.Pointer<PangoFont>, ffi.Pointer<PangoLanguage>)>();

  void pango_font_get_glyph_extents(
    ffi.Pointer<PangoFont> font,
    int glyph,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_font_get_glyph_extents(
      font,
      glyph,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_font_get_glyph_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFont>,
              PangoGlyph,
              ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>>('pango_font_get_glyph_extents');
  late final _pango_font_get_glyph_extents =
      _pango_font_get_glyph_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoFont>, int,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  ffi.Pointer<PangoFontMap> pango_font_get_font_map(
    ffi.Pointer<PangoFont> font,
  ) {
    return _pango_font_get_font_map(
      font,
    );
  }

  late final _pango_font_get_font_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontMap> Function(
              ffi.Pointer<PangoFont>)>>('pango_font_get_font_map');
  late final _pango_font_get_font_map = _pango_font_get_font_mapPtr
      .asFunction<ffi.Pointer<PangoFontMap> Function(ffi.Pointer<PangoFont>)>();

  ffi.Pointer<PangoFontFace> pango_font_get_face(
    ffi.Pointer<PangoFont> font,
  ) {
    return _pango_font_get_face(
      font,
    );
  }

  late final _pango_font_get_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontFace> Function(
              ffi.Pointer<PangoFont>)>>('pango_font_get_face');
  late final _pango_font_get_face = _pango_font_get_facePtr.asFunction<
      ffi.Pointer<PangoFontFace> Function(ffi.Pointer<PangoFont>)>();

  int pango_font_has_char(
    ffi.Pointer<PangoFont> font,
    int wc,
  ) {
    return _pango_font_has_char(
      font,
      wc,
    );
  }

  late final _pango_font_has_charPtr = _lookup<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<PangoFont>, gunichar)>>(
      'pango_font_has_char');
  late final _pango_font_has_char = _pango_font_has_charPtr
      .asFunction<int Function(ffi.Pointer<PangoFont>, int)>();

  void pango_font_get_features(
    ffi.Pointer<PangoFont> font,
    ffi.Pointer<hb_feature_t> features,
    int len,
    ffi.Pointer<guint> num_features,
  ) {
    return _pango_font_get_features(
      font,
      features,
      len,
      num_features,
    );
  }

  late final _pango_font_get_featuresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoFont>, ffi.Pointer<hb_feature_t>,
              guint, ffi.Pointer<guint>)>>('pango_font_get_features');
  late final _pango_font_get_features = _pango_font_get_featuresPtr.asFunction<
      void Function(ffi.Pointer<PangoFont>, ffi.Pointer<hb_feature_t>, int,
          ffi.Pointer<guint>)>();

  ffi.Pointer<hb_font_t> pango_font_get_hb_font(
    ffi.Pointer<PangoFont> font,
  ) {
    return _pango_font_get_hb_font(
      font,
    );
  }

  late final _pango_font_get_hb_fontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<hb_font_t> Function(
              ffi.Pointer<PangoFont>)>>('pango_font_get_hb_font');
  late final _pango_font_get_hb_font = _pango_font_get_hb_fontPtr
      .asFunction<ffi.Pointer<hb_font_t> Function(ffi.Pointer<PangoFont>)>();

  ffi.Pointer<ffi.Pointer<PangoLanguage>> pango_font_get_languages(
    ffi.Pointer<PangoFont> font,
  ) {
    return _pango_font_get_languages(
      font,
    );
  }

  late final _pango_font_get_languagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PangoLanguage>> Function(
              ffi.Pointer<PangoFont>)>>('pango_font_get_languages');
  late final _pango_font_get_languages =
      _pango_font_get_languagesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<PangoLanguage>> Function(
              ffi.Pointer<PangoFont>)>();

  ffi.Pointer<GBytes> pango_font_serialize(
    ffi.Pointer<PangoFont> font,
  ) {
    return _pango_font_serialize(
      font,
    );
  }

  late final _pango_font_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(
              ffi.Pointer<PangoFont>)>>('pango_font_serialize');
  late final _pango_font_serialize = _pango_font_serializePtr
      .asFunction<ffi.Pointer<GBytes> Function(ffi.Pointer<PangoFont>)>();

  ffi.Pointer<PangoFont> pango_font_deserialize(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<GBytes> bytes,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _pango_font_deserialize(
      context,
      bytes,
      error,
    );
  }

  late final _pango_font_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFont> Function(
              ffi.Pointer<PangoContext>,
              ffi.Pointer<GBytes>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('pango_font_deserialize');
  late final _pango_font_deserialize = _pango_font_deserializePtr.asFunction<
      ffi.Pointer<PangoFont> Function(ffi.Pointer<PangoContext>,
          ffi.Pointer<GBytes>, ffi.Pointer<ffi.Pointer<GError>>)>();

  int pango_context_get_type() {
    return _pango_context_get_type();
  }

  late final _pango_context_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('pango_context_get_type');
  late final _pango_context_get_type =
      _pango_context_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoContext> pango_context_new() {
    return _pango_context_new();
  }

  late final _pango_context_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PangoContext> Function()>>(
          'pango_context_new');
  late final _pango_context_new =
      _pango_context_newPtr.asFunction<ffi.Pointer<PangoContext> Function()>();

  void pango_context_changed(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_context_changed(
      context,
    );
  }

  late final _pango_context_changedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PangoContext>)>>(
          'pango_context_changed');
  late final _pango_context_changed = _pango_context_changedPtr
      .asFunction<void Function(ffi.Pointer<PangoContext>)>();

  void pango_context_set_font_map(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<PangoFontMap> font_map,
  ) {
    return _pango_context_set_font_map(
      context,
      font_map,
    );
  }

  late final _pango_context_set_font_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoFontMap>)>>('pango_context_set_font_map');
  late final _pango_context_set_font_map =
      _pango_context_set_font_mapPtr.asFunction<
          void Function(
              ffi.Pointer<PangoContext>, ffi.Pointer<PangoFontMap>)>();

  ffi.Pointer<PangoFontMap> pango_context_get_font_map(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_context_get_font_map(
      context,
    );
  }

  late final _pango_context_get_font_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontMap> Function(
              ffi.Pointer<PangoContext>)>>('pango_context_get_font_map');
  late final _pango_context_get_font_map =
      _pango_context_get_font_mapPtr.asFunction<
          ffi.Pointer<PangoFontMap> Function(ffi.Pointer<PangoContext>)>();

  int pango_context_get_serial(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_context_get_serial(
      context,
    );
  }

  late final _pango_context_get_serialPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<PangoContext>)>>(
          'pango_context_get_serial');
  late final _pango_context_get_serial = _pango_context_get_serialPtr
      .asFunction<int Function(ffi.Pointer<PangoContext>)>();

  void pango_context_list_families(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<PangoFontFamily>>> families,
    ffi.Pointer<ffi.Int> n_families,
  ) {
    return _pango_context_list_families(
      context,
      families,
      n_families,
    );
  }

  late final _pango_context_list_familiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoContext>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<PangoFontFamily>>>,
              ffi.Pointer<ffi.Int>)>>('pango_context_list_families');
  late final _pango_context_list_families =
      _pango_context_list_familiesPtr.asFunction<
          void Function(
              ffi.Pointer<PangoContext>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<PangoFontFamily>>>,
              ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<PangoFont> pango_context_load_font(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_context_load_font(
      context,
      desc,
    );
  }

  late final _pango_context_load_fontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFont> Function(ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoFontDescription>)>>('pango_context_load_font');
  late final _pango_context_load_font = _pango_context_load_fontPtr.asFunction<
      ffi.Pointer<PangoFont> Function(
          ffi.Pointer<PangoContext>, ffi.Pointer<PangoFontDescription>)>();

  ffi.Pointer<PangoFontset> pango_context_load_fontset(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<PangoLanguage> language,
  ) {
    return _pango_context_load_fontset(
      context,
      desc,
      language,
    );
  }

  late final _pango_context_load_fontsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontset> Function(
              ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoLanguage>)>>('pango_context_load_fontset');
  late final _pango_context_load_fontset =
      _pango_context_load_fontsetPtr.asFunction<
          ffi.Pointer<PangoFontset> Function(ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoFontDescription>, ffi.Pointer<PangoLanguage>)>();

  ffi.Pointer<PangoFontMetrics> pango_context_get_metrics(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<PangoFontDescription> desc,
    ffi.Pointer<PangoLanguage> language,
  ) {
    return _pango_context_get_metrics(
      context,
      desc,
      language,
    );
  }

  late final _pango_context_get_metricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontMetrics> Function(
              ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoFontDescription>,
              ffi.Pointer<PangoLanguage>)>>('pango_context_get_metrics');
  late final _pango_context_get_metrics =
      _pango_context_get_metricsPtr.asFunction<
          ffi.Pointer<PangoFontMetrics> Function(ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoFontDescription>, ffi.Pointer<PangoLanguage>)>();

  void pango_context_set_font_description(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_context_set_font_description(
      context,
      desc,
    );
  }

  late final _pango_context_set_font_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoContext>,
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_context_set_font_description');
  late final _pango_context_set_font_description =
      _pango_context_set_font_descriptionPtr.asFunction<
          void Function(
              ffi.Pointer<PangoContext>, ffi.Pointer<PangoFontDescription>)>();

  ffi.Pointer<PangoFontDescription> pango_context_get_font_description(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_context_get_font_description(
      context,
    );
  }

  late final _pango_context_get_font_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PangoFontDescription> Function(
                  ffi.Pointer<PangoContext>)>>(
      'pango_context_get_font_description');
  late final _pango_context_get_font_description =
      _pango_context_get_font_descriptionPtr.asFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoContext>)>();

  ffi.Pointer<PangoLanguage> pango_context_get_language(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_context_get_language(
      context,
    );
  }

  late final _pango_context_get_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLanguage> Function(
              ffi.Pointer<PangoContext>)>>('pango_context_get_language');
  late final _pango_context_get_language =
      _pango_context_get_languagePtr.asFunction<
          ffi.Pointer<PangoLanguage> Function(ffi.Pointer<PangoContext>)>();

  void pango_context_set_language(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<PangoLanguage> language,
  ) {
    return _pango_context_set_language(
      context,
      language,
    );
  }

  late final _pango_context_set_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoLanguage>)>>('pango_context_set_language');
  late final _pango_context_set_language =
      _pango_context_set_languagePtr.asFunction<
          void Function(
              ffi.Pointer<PangoContext>, ffi.Pointer<PangoLanguage>)>();

  void pango_context_set_base_dir(
    ffi.Pointer<PangoContext> context,
    PangoDirection direction,
  ) {
    return _pango_context_set_base_dir(
      context,
      direction.value,
    );
  }

  late final _pango_context_set_base_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              ffi.UnsignedInt)>>('pango_context_set_base_dir');
  late final _pango_context_set_base_dir = _pango_context_set_base_dirPtr
      .asFunction<void Function(ffi.Pointer<PangoContext>, int)>();

  PangoDirection pango_context_get_base_dir(
    ffi.Pointer<PangoContext> context,
  ) {
    return PangoDirection.fromValue(_pango_context_get_base_dir(
      context,
    ));
  }

  late final _pango_context_get_base_dirPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<PangoContext>)>>(
      'pango_context_get_base_dir');
  late final _pango_context_get_base_dir = _pango_context_get_base_dirPtr
      .asFunction<int Function(ffi.Pointer<PangoContext>)>();

  void pango_context_set_base_gravity(
    ffi.Pointer<PangoContext> context,
    PangoGravity gravity,
  ) {
    return _pango_context_set_base_gravity(
      context,
      gravity.value,
    );
  }

  late final _pango_context_set_base_gravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              ffi.UnsignedInt)>>('pango_context_set_base_gravity');
  late final _pango_context_set_base_gravity =
      _pango_context_set_base_gravityPtr
          .asFunction<void Function(ffi.Pointer<PangoContext>, int)>();

  PangoGravity pango_context_get_base_gravity(
    ffi.Pointer<PangoContext> context,
  ) {
    return PangoGravity.fromValue(_pango_context_get_base_gravity(
      context,
    ));
  }

  late final _pango_context_get_base_gravityPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<PangoContext>)>>(
      'pango_context_get_base_gravity');
  late final _pango_context_get_base_gravity =
      _pango_context_get_base_gravityPtr
          .asFunction<int Function(ffi.Pointer<PangoContext>)>();

  PangoGravity pango_context_get_gravity(
    ffi.Pointer<PangoContext> context,
  ) {
    return PangoGravity.fromValue(_pango_context_get_gravity(
      context,
    ));
  }

  late final _pango_context_get_gravityPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<PangoContext>)>>(
      'pango_context_get_gravity');
  late final _pango_context_get_gravity = _pango_context_get_gravityPtr
      .asFunction<int Function(ffi.Pointer<PangoContext>)>();

  void pango_context_set_gravity_hint(
    ffi.Pointer<PangoContext> context,
    PangoGravityHint hint,
  ) {
    return _pango_context_set_gravity_hint(
      context,
      hint.value,
    );
  }

  late final _pango_context_set_gravity_hintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              ffi.UnsignedInt)>>('pango_context_set_gravity_hint');
  late final _pango_context_set_gravity_hint =
      _pango_context_set_gravity_hintPtr
          .asFunction<void Function(ffi.Pointer<PangoContext>, int)>();

  PangoGravityHint pango_context_get_gravity_hint(
    ffi.Pointer<PangoContext> context,
  ) {
    return PangoGravityHint.fromValue(_pango_context_get_gravity_hint(
      context,
    ));
  }

  late final _pango_context_get_gravity_hintPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<PangoContext>)>>(
      'pango_context_get_gravity_hint');
  late final _pango_context_get_gravity_hint =
      _pango_context_get_gravity_hintPtr
          .asFunction<int Function(ffi.Pointer<PangoContext>)>();

  void pango_context_set_matrix(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<PangoMatrix> matrix,
  ) {
    return _pango_context_set_matrix(
      context,
      matrix,
    );
  }

  late final _pango_context_set_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              ffi.Pointer<PangoMatrix>)>>('pango_context_set_matrix');
  late final _pango_context_set_matrix =
      _pango_context_set_matrixPtr.asFunction<
          void Function(ffi.Pointer<PangoContext>, ffi.Pointer<PangoMatrix>)>();

  ffi.Pointer<PangoMatrix> pango_context_get_matrix(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_context_get_matrix(
      context,
    );
  }

  late final _pango_context_get_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoMatrix> Function(
              ffi.Pointer<PangoContext>)>>('pango_context_get_matrix');
  late final _pango_context_get_matrix =
      _pango_context_get_matrixPtr.asFunction<
          ffi.Pointer<PangoMatrix> Function(ffi.Pointer<PangoContext>)>();

  void pango_context_set_round_glyph_positions(
    ffi.Pointer<PangoContext> context,
    int round_positions,
  ) {
    return _pango_context_set_round_glyph_positions(
      context,
      round_positions,
    );
  }

  late final _pango_context_set_round_glyph_positionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              gboolean)>>('pango_context_set_round_glyph_positions');
  late final _pango_context_set_round_glyph_positions =
      _pango_context_set_round_glyph_positionsPtr
          .asFunction<void Function(ffi.Pointer<PangoContext>, int)>();

  int pango_context_get_round_glyph_positions(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_context_get_round_glyph_positions(
      context,
    );
  }

  late final _pango_context_get_round_glyph_positionsPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoContext>)>>(
          'pango_context_get_round_glyph_positions');
  late final _pango_context_get_round_glyph_positions =
      _pango_context_get_round_glyph_positionsPtr
          .asFunction<int Function(ffi.Pointer<PangoContext>)>();

  int pango_layout_get_type() {
    return _pango_layout_get_type();
  }

  late final _pango_layout_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>('pango_layout_get_type');
  late final _pango_layout_get_type =
      _pango_layout_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoLayout> pango_layout_new(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_layout_new(
      context,
    );
  }

  late final _pango_layout_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayout> Function(
              ffi.Pointer<PangoContext>)>>('pango_layout_new');
  late final _pango_layout_new = _pango_layout_newPtr.asFunction<
      ffi.Pointer<PangoLayout> Function(ffi.Pointer<PangoContext>)>();

  ffi.Pointer<PangoLayout> pango_layout_copy(
    ffi.Pointer<PangoLayout> src,
  ) {
    return _pango_layout_copy(
      src,
    );
  }

  late final _pango_layout_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayout> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_copy');
  late final _pango_layout_copy = _pango_layout_copyPtr.asFunction<
      ffi.Pointer<PangoLayout> Function(ffi.Pointer<PangoLayout>)>();

  ffi.Pointer<PangoContext> pango_layout_get_context(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_context(
      layout,
    );
  }

  late final _pango_layout_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoContext> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_context');
  late final _pango_layout_get_context =
      _pango_layout_get_contextPtr.asFunction<
          ffi.Pointer<PangoContext> Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_attributes(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<PangoAttrList> attrs,
  ) {
    return _pango_layout_set_attributes(
      layout,
      attrs,
    );
  }

  late final _pango_layout_set_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              ffi.Pointer<PangoAttrList>)>>('pango_layout_set_attributes');
  late final _pango_layout_set_attributes =
      _pango_layout_set_attributesPtr.asFunction<
          void Function(
              ffi.Pointer<PangoLayout>, ffi.Pointer<PangoAttrList>)>();

  ffi.Pointer<PangoAttrList> pango_layout_get_attributes(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_attributes(
      layout,
    );
  }

  late final _pango_layout_get_attributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoAttrList> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_attributes');
  late final _pango_layout_get_attributes =
      _pango_layout_get_attributesPtr.asFunction<
          ffi.Pointer<PangoAttrList> Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_text(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<ffi.Char> text,
    int length,
  ) {
    return _pango_layout_set_text(
      layout,
      text,
      length,
    );
  }

  late final _pango_layout_set_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('pango_layout_set_text');
  late final _pango_layout_set_text = _pango_layout_set_textPtr.asFunction<
      void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> pango_layout_get_text(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_text(
      layout,
    );
  }

  late final _pango_layout_get_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_text');
  late final _pango_layout_get_text = _pango_layout_get_textPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoLayout>)>();

  int pango_layout_get_character_count(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_character_count(
      layout,
    );
  }

  late final _pango_layout_get_character_countPtr =
      _lookup<ffi.NativeFunction<gint Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_character_count');
  late final _pango_layout_get_character_count =
      _pango_layout_get_character_countPtr
          .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_markup(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<ffi.Char> markup,
    int length,
  ) {
    return _pango_layout_set_markup(
      layout,
      markup,
      length,
    );
  }

  late final _pango_layout_set_markupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('pango_layout_set_markup');
  late final _pango_layout_set_markup = _pango_layout_set_markupPtr.asFunction<
      void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Char>, int)>();

  void pango_layout_set_markup_with_accel(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<ffi.Char> markup,
    int length,
    int accel_marker,
    ffi.Pointer<gunichar> accel_char,
  ) {
    return _pango_layout_set_markup_with_accel(
      layout,
      markup,
      length,
      accel_marker,
      accel_char,
    );
  }

  late final _pango_layout_set_markup_with_accelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              gunichar,
              ffi.Pointer<gunichar>)>>('pango_layout_set_markup_with_accel');
  late final _pango_layout_set_markup_with_accel =
      _pango_layout_set_markup_with_accelPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Char>, int,
              int, ffi.Pointer<gunichar>)>();

  void pango_layout_set_font_description(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<PangoFontDescription> desc,
  ) {
    return _pango_layout_set_font_description(
      layout,
      desc,
    );
  }

  late final _pango_layout_set_font_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoLayout>,
                  ffi.Pointer<PangoFontDescription>)>>(
      'pango_layout_set_font_description');
  late final _pango_layout_set_font_description =
      _pango_layout_set_font_descriptionPtr.asFunction<
          void Function(
              ffi.Pointer<PangoLayout>, ffi.Pointer<PangoFontDescription>)>();

  ffi.Pointer<PangoFontDescription> pango_layout_get_font_description(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_font_description(
      layout,
    );
  }

  late final _pango_layout_get_font_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_font_description');
  late final _pango_layout_get_font_description =
      _pango_layout_get_font_descriptionPtr.asFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_width(
    ffi.Pointer<PangoLayout> layout,
    int width,
  ) {
    return _pango_layout_set_width(
      layout,
      width,
    );
  }

  late final _pango_layout_set_widthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>, ffi.Int)>>('pango_layout_set_width');
  late final _pango_layout_set_width = _pango_layout_set_widthPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_width(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_width(
      layout,
    );
  }

  late final _pango_layout_get_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_width');
  late final _pango_layout_get_width = _pango_layout_get_widthPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_height(
    ffi.Pointer<PangoLayout> layout,
    int height,
  ) {
    return _pango_layout_set_height(
      layout,
      height,
    );
  }

  late final _pango_layout_set_heightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>, ffi.Int)>>('pango_layout_set_height');
  late final _pango_layout_set_height = _pango_layout_set_heightPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_height(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_height(
      layout,
    );
  }

  late final _pango_layout_get_heightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_height');
  late final _pango_layout_get_height = _pango_layout_get_heightPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_wrap(
    ffi.Pointer<PangoLayout> layout,
    PangoWrapMode wrap,
  ) {
    return _pango_layout_set_wrap(
      layout,
      wrap.value,
    );
  }

  late final _pango_layout_set_wrapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              ffi.UnsignedInt)>>('pango_layout_set_wrap');
  late final _pango_layout_set_wrap = _pango_layout_set_wrapPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  PangoWrapMode pango_layout_get_wrap(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return PangoWrapMode.fromValue(_pango_layout_get_wrap(
      layout,
    ));
  }

  late final _pango_layout_get_wrapPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<PangoLayout>)>>(
      'pango_layout_get_wrap');
  late final _pango_layout_get_wrap = _pango_layout_get_wrapPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  int pango_layout_is_wrapped(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_is_wrapped(
      layout,
    );
  }

  late final _pango_layout_is_wrappedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_is_wrapped');
  late final _pango_layout_is_wrapped = _pango_layout_is_wrappedPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_indent(
    ffi.Pointer<PangoLayout> layout,
    int indent,
  ) {
    return _pango_layout_set_indent(
      layout,
      indent,
    );
  }

  late final _pango_layout_set_indentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>, ffi.Int)>>('pango_layout_set_indent');
  late final _pango_layout_set_indent = _pango_layout_set_indentPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_indent(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_indent(
      layout,
    );
  }

  late final _pango_layout_get_indentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_indent');
  late final _pango_layout_get_indent = _pango_layout_get_indentPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_spacing(
    ffi.Pointer<PangoLayout> layout,
    int spacing,
  ) {
    return _pango_layout_set_spacing(
      layout,
      spacing,
    );
  }

  late final _pango_layout_set_spacingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>, ffi.Int)>>('pango_layout_set_spacing');
  late final _pango_layout_set_spacing = _pango_layout_set_spacingPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_spacing(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_spacing(
      layout,
    );
  }

  late final _pango_layout_get_spacingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_spacing');
  late final _pango_layout_get_spacing = _pango_layout_get_spacingPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_line_spacing(
    ffi.Pointer<PangoLayout> layout,
    double factor,
  ) {
    return _pango_layout_set_line_spacing(
      layout,
      factor,
    );
  }

  late final _pango_layout_set_line_spacingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              ffi.Float)>>('pango_layout_set_line_spacing');
  late final _pango_layout_set_line_spacing = _pango_layout_set_line_spacingPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, double)>();

  double pango_layout_get_line_spacing(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_line_spacing(
      layout,
    );
  }

  late final _pango_layout_get_line_spacingPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_line_spacing');
  late final _pango_layout_get_line_spacing = _pango_layout_get_line_spacingPtr
      .asFunction<double Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_justify(
    ffi.Pointer<PangoLayout> layout,
    int justify,
  ) {
    return _pango_layout_set_justify(
      layout,
      justify,
    );
  }

  late final _pango_layout_set_justifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>, gboolean)>>('pango_layout_set_justify');
  late final _pango_layout_set_justify = _pango_layout_set_justifyPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_justify(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_justify(
      layout,
    );
  }

  late final _pango_layout_get_justifyPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_justify');
  late final _pango_layout_get_justify = _pango_layout_get_justifyPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_justify_last_line(
    ffi.Pointer<PangoLayout> layout,
    int justify,
  ) {
    return _pango_layout_set_justify_last_line(
      layout,
      justify,
    );
  }

  late final _pango_layout_set_justify_last_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              gboolean)>>('pango_layout_set_justify_last_line');
  late final _pango_layout_set_justify_last_line =
      _pango_layout_set_justify_last_linePtr
          .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_justify_last_line(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_justify_last_line(
      layout,
    );
  }

  late final _pango_layout_get_justify_last_linePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_justify_last_line');
  late final _pango_layout_get_justify_last_line =
      _pango_layout_get_justify_last_linePtr
          .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_auto_dir(
    ffi.Pointer<PangoLayout> layout,
    int auto_dir,
  ) {
    return _pango_layout_set_auto_dir(
      layout,
      auto_dir,
    );
  }

  late final _pango_layout_set_auto_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              gboolean)>>('pango_layout_set_auto_dir');
  late final _pango_layout_set_auto_dir = _pango_layout_set_auto_dirPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_auto_dir(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_auto_dir(
      layout,
    );
  }

  late final _pango_layout_get_auto_dirPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_auto_dir');
  late final _pango_layout_get_auto_dir = _pango_layout_get_auto_dirPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_alignment(
    ffi.Pointer<PangoLayout> layout,
    PangoAlignment alignment,
  ) {
    return _pango_layout_set_alignment(
      layout,
      alignment.value,
    );
  }

  late final _pango_layout_set_alignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              ffi.UnsignedInt)>>('pango_layout_set_alignment');
  late final _pango_layout_set_alignment = _pango_layout_set_alignmentPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  PangoAlignment pango_layout_get_alignment(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return PangoAlignment.fromValue(_pango_layout_get_alignment(
      layout,
    ));
  }

  late final _pango_layout_get_alignmentPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<PangoLayout>)>>(
      'pango_layout_get_alignment');
  late final _pango_layout_get_alignment = _pango_layout_get_alignmentPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_tabs(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<PangoTabArray> tabs,
  ) {
    return _pango_layout_set_tabs(
      layout,
      tabs,
    );
  }

  late final _pango_layout_set_tabsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              ffi.Pointer<PangoTabArray>)>>('pango_layout_set_tabs');
  late final _pango_layout_set_tabs = _pango_layout_set_tabsPtr.asFunction<
      void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<PangoTabArray>)>();

  ffi.Pointer<PangoTabArray> pango_layout_get_tabs(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_tabs(
      layout,
    );
  }

  late final _pango_layout_get_tabsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoTabArray> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_tabs');
  late final _pango_layout_get_tabs = _pango_layout_get_tabsPtr.asFunction<
      ffi.Pointer<PangoTabArray> Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_single_paragraph_mode(
    ffi.Pointer<PangoLayout> layout,
    int setting,
  ) {
    return _pango_layout_set_single_paragraph_mode(
      layout,
      setting,
    );
  }

  late final _pango_layout_set_single_paragraph_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              gboolean)>>('pango_layout_set_single_paragraph_mode');
  late final _pango_layout_set_single_paragraph_mode =
      _pango_layout_set_single_paragraph_modePtr
          .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  int pango_layout_get_single_paragraph_mode(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_single_paragraph_mode(
      layout,
    );
  }

  late final _pango_layout_get_single_paragraph_modePtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_single_paragraph_mode');
  late final _pango_layout_get_single_paragraph_mode =
      _pango_layout_get_single_paragraph_modePtr
          .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_set_ellipsize(
    ffi.Pointer<PangoLayout> layout,
    PangoEllipsizeMode ellipsize,
  ) {
    return _pango_layout_set_ellipsize(
      layout,
      ellipsize.value,
    );
  }

  late final _pango_layout_set_ellipsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>,
              ffi.UnsignedInt)>>('pango_layout_set_ellipsize');
  late final _pango_layout_set_ellipsize = _pango_layout_set_ellipsizePtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>, int)>();

  PangoEllipsizeMode pango_layout_get_ellipsize(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return PangoEllipsizeMode.fromValue(_pango_layout_get_ellipsize(
      layout,
    ));
  }

  late final _pango_layout_get_ellipsizePtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<PangoLayout>)>>(
      'pango_layout_get_ellipsize');
  late final _pango_layout_get_ellipsize = _pango_layout_get_ellipsizePtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  int pango_layout_is_ellipsized(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_is_ellipsized(
      layout,
    );
  }

  late final _pango_layout_is_ellipsizedPtr =
      _lookup<ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_is_ellipsized');
  late final _pango_layout_is_ellipsized = _pango_layout_is_ellipsizedPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  int pango_layout_get_unknown_glyphs_count(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_unknown_glyphs_count(
      layout,
    );
  }

  late final _pango_layout_get_unknown_glyphs_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_unknown_glyphs_count');
  late final _pango_layout_get_unknown_glyphs_count =
      _pango_layout_get_unknown_glyphs_countPtr
          .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  PangoDirection pango_layout_get_direction(
    ffi.Pointer<PangoLayout> layout,
    int index,
  ) {
    return PangoDirection.fromValue(_pango_layout_get_direction(
      layout,
      index,
    ));
  }

  late final _pango_layout_get_directionPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<PangoLayout>,
              ffi.Int)>>('pango_layout_get_direction');
  late final _pango_layout_get_direction = _pango_layout_get_directionPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>, int)>();

  void pango_layout_context_changed(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_context_changed(
      layout,
    );
  }

  late final _pango_layout_context_changedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_context_changed');
  late final _pango_layout_context_changed = _pango_layout_context_changedPtr
      .asFunction<void Function(ffi.Pointer<PangoLayout>)>();

  int pango_layout_get_serial(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_serial(
      layout,
    );
  }

  late final _pango_layout_get_serialPtr =
      _lookup<ffi.NativeFunction<guint Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_serial');
  late final _pango_layout_get_serial = _pango_layout_get_serialPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  void pango_layout_get_log_attrs(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<ffi.Pointer<PangoLogAttr>> attrs,
    ffi.Pointer<gint> n_attrs,
  ) {
    return _pango_layout_get_log_attrs(
      layout,
      attrs,
      n_attrs,
    );
  }

  late final _pango_layout_get_log_attrsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              ffi.Pointer<ffi.Pointer<PangoLogAttr>>,
              ffi.Pointer<gint>)>>('pango_layout_get_log_attrs');
  late final _pango_layout_get_log_attrs =
      _pango_layout_get_log_attrsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>,
              ffi.Pointer<ffi.Pointer<PangoLogAttr>>, ffi.Pointer<gint>)>();

  ffi.Pointer<PangoLogAttr> pango_layout_get_log_attrs_readonly(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<gint> n_attrs,
  ) {
    return _pango_layout_get_log_attrs_readonly(
      layout,
      n_attrs,
    );
  }

  late final _pango_layout_get_log_attrs_readonlyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLogAttr> Function(ffi.Pointer<PangoLayout>,
              ffi.Pointer<gint>)>>('pango_layout_get_log_attrs_readonly');
  late final _pango_layout_get_log_attrs_readonly =
      _pango_layout_get_log_attrs_readonlyPtr.asFunction<
          ffi.Pointer<PangoLogAttr> Function(
              ffi.Pointer<PangoLayout>, ffi.Pointer<gint>)>();

  void pango_layout_index_to_pos(
    ffi.Pointer<PangoLayout> layout,
    int index_,
    ffi.Pointer<PangoRectangle> pos,
  ) {
    return _pango_layout_index_to_pos(
      layout,
      index_,
      pos,
    );
  }

  late final _pango_layout_index_to_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>, ffi.Int,
              ffi.Pointer<PangoRectangle>)>>('pango_layout_index_to_pos');
  late final _pango_layout_index_to_pos =
      _pango_layout_index_to_posPtr.asFunction<
          void Function(
              ffi.Pointer<PangoLayout>, int, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_index_to_line_x(
    ffi.Pointer<PangoLayout> layout,
    int index_,
    int trailing,
    ffi.Pointer<ffi.Int> line,
    ffi.Pointer<ffi.Int> x_pos,
  ) {
    return _pango_layout_index_to_line_x(
      layout,
      index_,
      trailing,
      line,
      x_pos,
    );
  }

  late final _pango_layout_index_to_line_xPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              ffi.Int,
              gboolean,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_index_to_line_x');
  late final _pango_layout_index_to_line_x =
      _pango_layout_index_to_line_xPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, int, int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  void pango_layout_get_cursor_pos(
    ffi.Pointer<PangoLayout> layout,
    int index_,
    ffi.Pointer<PangoRectangle> strong_pos,
    ffi.Pointer<PangoRectangle> weak_pos,
  ) {
    return _pango_layout_get_cursor_pos(
      layout,
      index_,
      strong_pos,
      weak_pos,
    );
  }

  late final _pango_layout_get_cursor_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              ffi.Int,
              ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>>('pango_layout_get_cursor_pos');
  late final _pango_layout_get_cursor_pos =
      _pango_layout_get_cursor_posPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, int,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_get_caret_pos(
    ffi.Pointer<PangoLayout> layout,
    int index_,
    ffi.Pointer<PangoRectangle> strong_pos,
    ffi.Pointer<PangoRectangle> weak_pos,
  ) {
    return _pango_layout_get_caret_pos(
      layout,
      index_,
      strong_pos,
      weak_pos,
    );
  }

  late final _pango_layout_get_caret_posPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              ffi.Int,
              ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>>('pango_layout_get_caret_pos');
  late final _pango_layout_get_caret_pos =
      _pango_layout_get_caret_posPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, int,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_move_cursor_visually(
    ffi.Pointer<PangoLayout> layout,
    int strong,
    int old_index,
    int old_trailing,
    int direction,
    ffi.Pointer<ffi.Int> new_index,
    ffi.Pointer<ffi.Int> new_trailing,
  ) {
    return _pango_layout_move_cursor_visually(
      layout,
      strong,
      old_index,
      old_trailing,
      direction,
      new_index,
      new_trailing,
    );
  }

  late final _pango_layout_move_cursor_visuallyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              gboolean,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_move_cursor_visually');
  late final _pango_layout_move_cursor_visually =
      _pango_layout_move_cursor_visuallyPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, int, int, int, int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int pango_layout_xy_to_index(
    ffi.Pointer<PangoLayout> layout,
    int x,
    int y,
    ffi.Pointer<ffi.Int> index_,
    ffi.Pointer<ffi.Int> trailing,
  ) {
    return _pango_layout_xy_to_index(
      layout,
      x,
      y,
      index_,
      trailing,
    );
  }

  late final _pango_layout_xy_to_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<PangoLayout>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_xy_to_index');
  late final _pango_layout_xy_to_index =
      _pango_layout_xy_to_indexPtr.asFunction<
          int Function(ffi.Pointer<PangoLayout>, int, int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void pango_layout_get_extents(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_get_extents(
      layout,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_get_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>>('pango_layout_get_extents');
  late final _pango_layout_get_extents =
      _pango_layout_get_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>();

  void pango_layout_get_pixel_extents(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_get_pixel_extents(
      layout,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_get_pixel_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayout>,
              ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>>('pango_layout_get_pixel_extents');
  late final _pango_layout_get_pixel_extents =
      _pango_layout_get_pixel_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>();

  void pango_layout_get_size(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _pango_layout_get_size(
      layout,
      width,
      height,
    );
  }

  late final _pango_layout_get_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_get_size');
  late final _pango_layout_get_size = _pango_layout_get_sizePtr.asFunction<
      void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  void pango_layout_get_pixel_size(
    ffi.Pointer<PangoLayout> layout,
    ffi.Pointer<ffi.Int> width,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _pango_layout_get_pixel_size(
      layout,
      width,
      height,
    );
  }

  late final _pango_layout_get_pixel_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_get_pixel_size');
  late final _pango_layout_get_pixel_size =
      _pango_layout_get_pixel_sizePtr.asFunction<
          void Function(ffi.Pointer<PangoLayout>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  int pango_layout_get_baseline(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_baseline(
      layout,
    );
  }

  late final _pango_layout_get_baselinePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_baseline');
  late final _pango_layout_get_baseline = _pango_layout_get_baselinePtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  int pango_layout_get_line_count(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_line_count(
      layout,
    );
  }

  late final _pango_layout_get_line_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayout>)>>(
          'pango_layout_get_line_count');
  late final _pango_layout_get_line_count = _pango_layout_get_line_countPtr
      .asFunction<int Function(ffi.Pointer<PangoLayout>)>();

  ffi.Pointer<PangoLayoutLine> pango_layout_get_line(
    ffi.Pointer<PangoLayout> layout,
    int line,
  ) {
    return _pango_layout_get_line(
      layout,
      line,
    );
  }

  late final _pango_layout_get_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayoutLine> Function(
              ffi.Pointer<PangoLayout>, ffi.Int)>>('pango_layout_get_line');
  late final _pango_layout_get_line = _pango_layout_get_linePtr.asFunction<
      ffi.Pointer<PangoLayoutLine> Function(ffi.Pointer<PangoLayout>, int)>();

  ffi.Pointer<PangoLayoutLine> pango_layout_get_line_readonly(
    ffi.Pointer<PangoLayout> layout,
    int line,
  ) {
    return _pango_layout_get_line_readonly(
      layout,
      line,
    );
  }

  late final _pango_layout_get_line_readonlyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayoutLine> Function(ffi.Pointer<PangoLayout>,
              ffi.Int)>>('pango_layout_get_line_readonly');
  late final _pango_layout_get_line_readonly =
      _pango_layout_get_line_readonlyPtr.asFunction<
          ffi.Pointer<PangoLayoutLine> Function(
              ffi.Pointer<PangoLayout>, int)>();

  ffi.Pointer<GSList1> pango_layout_get_lines(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_lines(
      layout,
    );
  }

  late final _pango_layout_get_linesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList1> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_lines');
  late final _pango_layout_get_lines = _pango_layout_get_linesPtr
      .asFunction<ffi.Pointer<GSList1> Function(ffi.Pointer<PangoLayout>)>();

  ffi.Pointer<GSList1> pango_layout_get_lines_readonly(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_lines_readonly(
      layout,
    );
  }

  late final _pango_layout_get_lines_readonlyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GSList1> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_lines_readonly');
  late final _pango_layout_get_lines_readonly =
      _pango_layout_get_lines_readonlyPtr.asFunction<
          ffi.Pointer<GSList1> Function(ffi.Pointer<PangoLayout>)>();

  ffi.Pointer<GBytes> pango_layout_serialize(
    ffi.Pointer<PangoLayout> layout,
    PangoLayoutSerializeFlags flags,
  ) {
    return _pango_layout_serialize(
      layout,
      flags.value,
    );
  }

  late final _pango_layout_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GBytes> Function(ffi.Pointer<PangoLayout>,
              ffi.UnsignedInt)>>('pango_layout_serialize');
  late final _pango_layout_serialize = _pango_layout_serializePtr.asFunction<
      ffi.Pointer<GBytes> Function(ffi.Pointer<PangoLayout>, int)>();

  Dartgint pango_layout_write_to_file(
    ffi.Pointer<PangoLayout> layout,
    PangoLayoutSerializeFlags flags,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _pango_layout_write_to_file(
      layout,
      flags.value,
      filename,
      error,
    );
  }

  late final _pango_layout_write_to_filePtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<PangoLayout>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>>('pango_layout_write_to_file');
  late final _pango_layout_write_to_file =
      _pango_layout_write_to_filePtr.asFunction<
          int Function(ffi.Pointer<PangoLayout>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<GError>>)>();

  int pango_layout_deserialize_error_quark() {
    return _pango_layout_deserialize_error_quark();
  }

  late final _pango_layout_deserialize_error_quarkPtr =
      _lookup<ffi.NativeFunction<GQuark Function()>>(
          'pango_layout_deserialize_error_quark');
  late final _pango_layout_deserialize_error_quark =
      _pango_layout_deserialize_error_quarkPtr.asFunction<int Function()>();

  ffi.Pointer<PangoLayout> pango_layout_deserialize(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<GBytes> bytes,
    PangoLayoutDeserializeFlags flags,
    ffi.Pointer<ffi.Pointer<GError>> error,
  ) {
    return _pango_layout_deserialize(
      context,
      bytes,
      flags.value,
      error,
    );
  }

  late final _pango_layout_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayout> Function(
              ffi.Pointer<PangoContext>,
              ffi.Pointer<GBytes>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Pointer<GError>>)>>('pango_layout_deserialize');
  late final _pango_layout_deserialize =
      _pango_layout_deserializePtr.asFunction<
          ffi.Pointer<PangoLayout> Function(ffi.Pointer<PangoContext>,
              ffi.Pointer<GBytes>, int, ffi.Pointer<ffi.Pointer<GError>>)>();

  int pango_layout_line_get_type() {
    return _pango_layout_line_get_type();
  }

  late final _pango_layout_line_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'pango_layout_line_get_type');
  late final _pango_layout_line_get_type =
      _pango_layout_line_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoLayoutLine> pango_layout_line_ref(
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return _pango_layout_line_ref(
      line,
    );
  }

  late final _pango_layout_line_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayoutLine> Function(
              ffi.Pointer<PangoLayoutLine>)>>('pango_layout_line_ref');
  late final _pango_layout_line_ref = _pango_layout_line_refPtr.asFunction<
      ffi.Pointer<PangoLayoutLine> Function(ffi.Pointer<PangoLayoutLine>)>();

  void pango_layout_line_unref(
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return _pango_layout_line_unref(
      line,
    );
  }

  late final _pango_layout_line_unrefPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PangoLayoutLine>)>>(
      'pango_layout_line_unref');
  late final _pango_layout_line_unref = _pango_layout_line_unrefPtr
      .asFunction<void Function(ffi.Pointer<PangoLayoutLine>)>();

  int pango_layout_line_get_start_index(
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return _pango_layout_line_get_start_index(
      line,
    );
  }

  late final _pango_layout_line_get_start_indexPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayoutLine>)>>(
      'pango_layout_line_get_start_index');
  late final _pango_layout_line_get_start_index =
      _pango_layout_line_get_start_indexPtr
          .asFunction<int Function(ffi.Pointer<PangoLayoutLine>)>();

  int pango_layout_line_get_length(
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return _pango_layout_line_get_length(
      line,
    );
  }

  late final _pango_layout_line_get_lengthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayoutLine>)>>(
      'pango_layout_line_get_length');
  late final _pango_layout_line_get_length = _pango_layout_line_get_lengthPtr
      .asFunction<int Function(ffi.Pointer<PangoLayoutLine>)>();

  int pango_layout_line_is_paragraph_start(
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return _pango_layout_line_is_paragraph_start(
      line,
    );
  }

  late final _pango_layout_line_is_paragraph_startPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayoutLine>)>>(
      'pango_layout_line_is_paragraph_start');
  late final _pango_layout_line_is_paragraph_start =
      _pango_layout_line_is_paragraph_startPtr
          .asFunction<int Function(ffi.Pointer<PangoLayoutLine>)>();

  PangoDirection pango_layout_line_get_resolved_direction(
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return PangoDirection.fromValue(_pango_layout_line_get_resolved_direction(
      line,
    ));
  }

  late final _pango_layout_line_get_resolved_directionPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoLayoutLine>)>>(
      'pango_layout_line_get_resolved_direction');
  late final _pango_layout_line_get_resolved_direction =
      _pango_layout_line_get_resolved_directionPtr
          .asFunction<int Function(ffi.Pointer<PangoLayoutLine>)>();

  int pango_layout_line_x_to_index(
    ffi.Pointer<PangoLayoutLine> line,
    int x_pos,
    ffi.Pointer<ffi.Int> index_,
    ffi.Pointer<ffi.Int> trailing,
  ) {
    return _pango_layout_line_x_to_index(
      line,
      x_pos,
      index_,
      trailing,
    );
  }

  late final _pango_layout_line_x_to_indexPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(
              ffi.Pointer<PangoLayoutLine>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_line_x_to_index');
  late final _pango_layout_line_x_to_index =
      _pango_layout_line_x_to_indexPtr.asFunction<
          int Function(ffi.Pointer<PangoLayoutLine>, int, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void pango_layout_line_index_to_x(
    ffi.Pointer<PangoLayoutLine> line,
    int index_,
    int trailing,
    ffi.Pointer<ffi.Int> x_pos,
  ) {
    return _pango_layout_line_index_to_x(
      line,
      index_,
      trailing,
      x_pos,
    );
  }

  late final _pango_layout_line_index_to_xPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayoutLine>, ffi.Int, gboolean,
              ffi.Pointer<ffi.Int>)>>('pango_layout_line_index_to_x');
  late final _pango_layout_line_index_to_x =
      _pango_layout_line_index_to_xPtr.asFunction<
          void Function(
              ffi.Pointer<PangoLayoutLine>, int, int, ffi.Pointer<ffi.Int>)>();

  void pango_layout_line_get_x_ranges(
    ffi.Pointer<PangoLayoutLine> line,
    int start_index,
    int end_index,
    ffi.Pointer<ffi.Pointer<ffi.Int>> ranges,
    ffi.Pointer<ffi.Int> n_ranges,
  ) {
    return _pango_layout_line_get_x_ranges(
      line,
      start_index,
      end_index,
      ranges,
      n_ranges,
    );
  }

  late final _pango_layout_line_get_x_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayoutLine>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_line_get_x_ranges');
  late final _pango_layout_line_get_x_ranges =
      _pango_layout_line_get_x_rangesPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutLine>, int, int,
              ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Pointer<ffi.Int>)>();

  void pango_layout_line_get_extents(
    ffi.Pointer<PangoLayoutLine> line,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_line_get_extents(
      line,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_line_get_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoLayoutLine>,
              ffi.Pointer<PangoRectangle>,
              ffi.Pointer<PangoRectangle>)>>('pango_layout_line_get_extents');
  late final _pango_layout_line_get_extents =
      _pango_layout_line_get_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutLine>,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_line_get_height(
    ffi.Pointer<PangoLayoutLine> line,
    ffi.Pointer<ffi.Int> height,
  ) {
    return _pango_layout_line_get_height(
      line,
      height,
    );
  }

  late final _pango_layout_line_get_heightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayoutLine>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_line_get_height');
  late final _pango_layout_line_get_height =
      _pango_layout_line_get_heightPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutLine>, ffi.Pointer<ffi.Int>)>();

  void pango_layout_line_get_pixel_extents(
    ffi.Pointer<PangoLayoutLine> layout_line,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_line_get_pixel_extents(
      layout_line,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_line_get_pixel_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoLayoutLine>,
                  ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>>(
      'pango_layout_line_get_pixel_extents');
  late final _pango_layout_line_get_pixel_extents =
      _pango_layout_line_get_pixel_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutLine>,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  int pango_layout_iter_get_type() {
    return _pango_layout_iter_get_type();
  }

  late final _pango_layout_iter_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'pango_layout_iter_get_type');
  late final _pango_layout_iter_get_type =
      _pango_layout_iter_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoLayoutIter> pango_layout_get_iter(
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_layout_get_iter(
      layout,
    );
  }

  late final _pango_layout_get_iterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayoutIter> Function(
              ffi.Pointer<PangoLayout>)>>('pango_layout_get_iter');
  late final _pango_layout_get_iter = _pango_layout_get_iterPtr.asFunction<
      ffi.Pointer<PangoLayoutIter> Function(ffi.Pointer<PangoLayout>)>();

  ffi.Pointer<PangoLayoutIter> pango_layout_iter_copy(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_copy(
      iter,
    );
  }

  late final _pango_layout_iter_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayoutIter> Function(
              ffi.Pointer<PangoLayoutIter>)>>('pango_layout_iter_copy');
  late final _pango_layout_iter_copy = _pango_layout_iter_copyPtr.asFunction<
      ffi.Pointer<PangoLayoutIter> Function(ffi.Pointer<PangoLayoutIter>)>();

  void pango_layout_iter_free(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_free(
      iter,
    );
  }

  late final _pango_layout_iter_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_free');
  late final _pango_layout_iter_free = _pango_layout_iter_freePtr
      .asFunction<void Function(ffi.Pointer<PangoLayoutIter>)>();

  int pango_layout_iter_get_index(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_index(
      iter,
    );
  }

  late final _pango_layout_iter_get_indexPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_get_index');
  late final _pango_layout_iter_get_index = _pango_layout_iter_get_indexPtr
      .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  ffi.Pointer<PangoLayoutRun> pango_layout_iter_get_run(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_run(
      iter,
    );
  }

  late final _pango_layout_iter_get_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayoutRun> Function(
              ffi.Pointer<PangoLayoutIter>)>>('pango_layout_iter_get_run');
  late final _pango_layout_iter_get_run =
      _pango_layout_iter_get_runPtr.asFunction<
          ffi.Pointer<PangoLayoutRun> Function(ffi.Pointer<PangoLayoutIter>)>();

  ffi.Pointer<PangoLayoutRun> pango_layout_iter_get_run_readonly(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_run_readonly(
      iter,
    );
  }

  late final _pango_layout_iter_get_run_readonlyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PangoLayoutRun> Function(
                  ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_get_run_readonly');
  late final _pango_layout_iter_get_run_readonly =
      _pango_layout_iter_get_run_readonlyPtr.asFunction<
          ffi.Pointer<PangoLayoutRun> Function(ffi.Pointer<PangoLayoutIter>)>();

  ffi.Pointer<PangoLayoutLine> pango_layout_iter_get_line(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_line(
      iter,
    );
  }

  late final _pango_layout_iter_get_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayoutLine> Function(
              ffi.Pointer<PangoLayoutIter>)>>('pango_layout_iter_get_line');
  late final _pango_layout_iter_get_line =
      _pango_layout_iter_get_linePtr.asFunction<
          ffi.Pointer<PangoLayoutLine> Function(
              ffi.Pointer<PangoLayoutIter>)>();

  ffi.Pointer<PangoLayoutLine> pango_layout_iter_get_line_readonly(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_line_readonly(
      iter,
    );
  }

  late final _pango_layout_iter_get_line_readonlyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PangoLayoutLine> Function(
                  ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_get_line_readonly');
  late final _pango_layout_iter_get_line_readonly =
      _pango_layout_iter_get_line_readonlyPtr.asFunction<
          ffi.Pointer<PangoLayoutLine> Function(
              ffi.Pointer<PangoLayoutIter>)>();

  int pango_layout_iter_at_last_line(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_at_last_line(
      iter,
    );
  }

  late final _pango_layout_iter_at_last_linePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_at_last_line');
  late final _pango_layout_iter_at_last_line =
      _pango_layout_iter_at_last_linePtr
          .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  ffi.Pointer<PangoLayout> pango_layout_iter_get_layout(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_layout(
      iter,
    );
  }

  late final _pango_layout_iter_get_layoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayout> Function(
              ffi.Pointer<PangoLayoutIter>)>>('pango_layout_iter_get_layout');
  late final _pango_layout_iter_get_layout =
      _pango_layout_iter_get_layoutPtr.asFunction<
          ffi.Pointer<PangoLayout> Function(ffi.Pointer<PangoLayoutIter>)>();

  int pango_layout_iter_next_char(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_next_char(
      iter,
    );
  }

  late final _pango_layout_iter_next_charPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_next_char');
  late final _pango_layout_iter_next_char = _pango_layout_iter_next_charPtr
      .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  int pango_layout_iter_next_cluster(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_next_cluster(
      iter,
    );
  }

  late final _pango_layout_iter_next_clusterPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_next_cluster');
  late final _pango_layout_iter_next_cluster =
      _pango_layout_iter_next_clusterPtr
          .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  int pango_layout_iter_next_run(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_next_run(
      iter,
    );
  }

  late final _pango_layout_iter_next_runPtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_next_run');
  late final _pango_layout_iter_next_run = _pango_layout_iter_next_runPtr
      .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  int pango_layout_iter_next_line(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_next_line(
      iter,
    );
  }

  late final _pango_layout_iter_next_linePtr = _lookup<
          ffi.NativeFunction<gboolean Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_next_line');
  late final _pango_layout_iter_next_line = _pango_layout_iter_next_linePtr
      .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  void pango_layout_iter_get_char_extents(
    ffi.Pointer<PangoLayoutIter> iter,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_iter_get_char_extents(
      iter,
      logical_rect,
    );
  }

  late final _pango_layout_iter_get_char_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<PangoLayoutIter>, ffi.Pointer<PangoRectangle>)>>(
      'pango_layout_iter_get_char_extents');
  late final _pango_layout_iter_get_char_extents =
      _pango_layout_iter_get_char_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<PangoLayoutIter>, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_iter_get_cluster_extents(
    ffi.Pointer<PangoLayoutIter> iter,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_iter_get_cluster_extents(
      iter,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_iter_get_cluster_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoLayoutIter>,
                  ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>>(
      'pango_layout_iter_get_cluster_extents');
  late final _pango_layout_iter_get_cluster_extents =
      _pango_layout_iter_get_cluster_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutIter>,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_iter_get_run_extents(
    ffi.Pointer<PangoLayoutIter> iter,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_iter_get_run_extents(
      iter,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_iter_get_run_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoLayoutIter>,
                  ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>>(
      'pango_layout_iter_get_run_extents');
  late final _pango_layout_iter_get_run_extents =
      _pango_layout_iter_get_run_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutIter>,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_iter_get_line_extents(
    ffi.Pointer<PangoLayoutIter> iter,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_iter_get_line_extents(
      iter,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_iter_get_line_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoLayoutIter>,
                  ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>>(
      'pango_layout_iter_get_line_extents');
  late final _pango_layout_iter_get_line_extents =
      _pango_layout_iter_get_line_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutIter>,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  void pango_layout_iter_get_line_yrange(
    ffi.Pointer<PangoLayoutIter> iter,
    ffi.Pointer<ffi.Int> y0_,
    ffi.Pointer<ffi.Int> y1_,
  ) {
    return _pango_layout_iter_get_line_yrange(
      iter,
      y0_,
      y1_,
    );
  }

  late final _pango_layout_iter_get_line_yrangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoLayoutIter>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pango_layout_iter_get_line_yrange');
  late final _pango_layout_iter_get_line_yrange =
      _pango_layout_iter_get_line_yrangePtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutIter>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void pango_layout_iter_get_layout_extents(
    ffi.Pointer<PangoLayoutIter> iter,
    ffi.Pointer<PangoRectangle> ink_rect,
    ffi.Pointer<PangoRectangle> logical_rect,
  ) {
    return _pango_layout_iter_get_layout_extents(
      iter,
      ink_rect,
      logical_rect,
    );
  }

  late final _pango_layout_iter_get_layout_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoLayoutIter>,
                  ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>>(
      'pango_layout_iter_get_layout_extents');
  late final _pango_layout_iter_get_layout_extents =
      _pango_layout_iter_get_layout_extentsPtr.asFunction<
          void Function(ffi.Pointer<PangoLayoutIter>,
              ffi.Pointer<PangoRectangle>, ffi.Pointer<PangoRectangle>)>();

  int pango_layout_iter_get_baseline(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_baseline(
      iter,
    );
  }

  late final _pango_layout_iter_get_baselinePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_get_baseline');
  late final _pango_layout_iter_get_baseline =
      _pango_layout_iter_get_baselinePtr
          .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  int pango_layout_iter_get_run_baseline(
    ffi.Pointer<PangoLayoutIter> iter,
  ) {
    return _pango_layout_iter_get_run_baseline(
      iter,
    );
  }

  late final _pango_layout_iter_get_run_baselinePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PangoLayoutIter>)>>(
      'pango_layout_iter_get_run_baseline');
  late final _pango_layout_iter_get_run_baseline =
      _pango_layout_iter_get_run_baselinePtr
          .asFunction<int Function(ffi.Pointer<PangoLayoutIter>)>();

  int pango_cairo_font_map_get_type() {
    return _pango_cairo_font_map_get_type();
  }

  late final _pango_cairo_font_map_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'pango_cairo_font_map_get_type');
  late final _pango_cairo_font_map_get_type =
      _pango_cairo_font_map_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<PangoFontMap> pango_cairo_font_map_new() {
    return _pango_cairo_font_map_new();
  }

  late final _pango_cairo_font_map_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PangoFontMap> Function()>>(
          'pango_cairo_font_map_new');
  late final _pango_cairo_font_map_new = _pango_cairo_font_map_newPtr
      .asFunction<ffi.Pointer<PangoFontMap> Function()>();

  ffi.Pointer<PangoFontMap> pango_cairo_font_map_new_for_font_type(
    _cairo_font_type fonttype,
  ) {
    return _pango_cairo_font_map_new_for_font_type(
      fonttype.value,
    );
  }

  late final _pango_cairo_font_map_new_for_font_typePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<PangoFontMap> Function(ffi.UnsignedInt)>>(
      'pango_cairo_font_map_new_for_font_type');
  late final _pango_cairo_font_map_new_for_font_type =
      _pango_cairo_font_map_new_for_font_typePtr
          .asFunction<ffi.Pointer<PangoFontMap> Function(int)>();

  ffi.Pointer<PangoFontMap> pango_cairo_font_map_get_default() {
    return _pango_cairo_font_map_get_default();
  }

  late final _pango_cairo_font_map_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PangoFontMap> Function()>>(
          'pango_cairo_font_map_get_default');
  late final _pango_cairo_font_map_get_default =
      _pango_cairo_font_map_get_defaultPtr
          .asFunction<ffi.Pointer<PangoFontMap> Function()>();

  void pango_cairo_font_map_set_default(
    ffi.Pointer<PangoCairoFontMap> fontmap,
  ) {
    return _pango_cairo_font_map_set_default(
      fontmap,
    );
  }

  late final _pango_cairo_font_map_set_defaultPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<PangoCairoFontMap>)>>(
      'pango_cairo_font_map_set_default');
  late final _pango_cairo_font_map_set_default =
      _pango_cairo_font_map_set_defaultPtr
          .asFunction<void Function(ffi.Pointer<PangoCairoFontMap>)>();

  _cairo_font_type pango_cairo_font_map_get_font_type(
    ffi.Pointer<PangoCairoFontMap> fontmap,
  ) {
    return _cairo_font_type.fromValue(_pango_cairo_font_map_get_font_type(
      fontmap,
    ));
  }

  late final _pango_cairo_font_map_get_font_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<PangoCairoFontMap>)>>(
      'pango_cairo_font_map_get_font_type');
  late final _pango_cairo_font_map_get_font_type =
      _pango_cairo_font_map_get_font_typePtr
          .asFunction<int Function(ffi.Pointer<PangoCairoFontMap>)>();

  void pango_cairo_font_map_set_resolution(
    ffi.Pointer<PangoCairoFontMap> fontmap,
    double dpi,
  ) {
    return _pango_cairo_font_map_set_resolution(
      fontmap,
      dpi,
    );
  }

  late final _pango_cairo_font_map_set_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoCairoFontMap>,
              ffi.Double)>>('pango_cairo_font_map_set_resolution');
  late final _pango_cairo_font_map_set_resolution =
      _pango_cairo_font_map_set_resolutionPtr
          .asFunction<void Function(ffi.Pointer<PangoCairoFontMap>, double)>();

  double pango_cairo_font_map_get_resolution(
    ffi.Pointer<PangoCairoFontMap> fontmap,
  ) {
    return _pango_cairo_font_map_get_resolution(
      fontmap,
    );
  }

  late final _pango_cairo_font_map_get_resolutionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<PangoCairoFontMap>)>>(
      'pango_cairo_font_map_get_resolution');
  late final _pango_cairo_font_map_get_resolution =
      _pango_cairo_font_map_get_resolutionPtr
          .asFunction<double Function(ffi.Pointer<PangoCairoFontMap>)>();

  ffi.Pointer<PangoContext> pango_cairo_font_map_create_context(
    ffi.Pointer<PangoCairoFontMap> fontmap,
  ) {
    return _pango_cairo_font_map_create_context(
      fontmap,
    );
  }

  late final _pango_cairo_font_map_create_contextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<PangoContext> Function(
                  ffi.Pointer<PangoCairoFontMap>)>>(
      'pango_cairo_font_map_create_context');
  late final _pango_cairo_font_map_create_context =
      _pango_cairo_font_map_create_contextPtr.asFunction<
          ffi.Pointer<PangoContext> Function(ffi.Pointer<PangoCairoFontMap>)>();

  int pango_cairo_font_get_type() {
    return _pango_cairo_font_get_type();
  }

  late final _pango_cairo_font_get_typePtr =
      _lookup<ffi.NativeFunction<GType Function()>>(
          'pango_cairo_font_get_type');
  late final _pango_cairo_font_get_type =
      _pango_cairo_font_get_typePtr.asFunction<int Function()>();

  ffi.Pointer<cairo_scaled_font_t> pango_cairo_font_get_scaled_font(
    ffi.Pointer<PangoCairoFont> font,
  ) {
    return _pango_cairo_font_get_scaled_font(
      font,
    );
  }

  late final _pango_cairo_font_get_scaled_fontPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_scaled_font_t> Function(
                  ffi.Pointer<PangoCairoFont>)>>(
      'pango_cairo_font_get_scaled_font');
  late final _pango_cairo_font_get_scaled_font =
      _pango_cairo_font_get_scaled_fontPtr.asFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<PangoCairoFont>)>();

  void pango_cairo_update_context(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_cairo_update_context(
      cr,
      context,
    );
  }

  late final _pango_cairo_update_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<PangoContext>)>>('pango_cairo_update_context');
  late final _pango_cairo_update_context =
      _pango_cairo_update_contextPtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoContext>)>();

  void pango_cairo_context_set_font_options(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _pango_cairo_context_set_font_options(
      context,
      options,
    );
  }

  late final _pango_cairo_context_set_font_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<PangoContext>,
                  ffi.Pointer<cairo_font_options_t>)>>(
      'pango_cairo_context_set_font_options');
  late final _pango_cairo_context_set_font_options =
      _pango_cairo_context_set_font_optionsPtr.asFunction<
          void Function(
              ffi.Pointer<PangoContext>, ffi.Pointer<cairo_font_options_t>)>();

  ffi.Pointer<cairo_font_options_t> pango_cairo_context_get_font_options(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_cairo_context_get_font_options(
      context,
    );
  }

  late final _pango_cairo_context_get_font_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_font_options_t> Function(
                  ffi.Pointer<PangoContext>)>>(
      'pango_cairo_context_get_font_options');
  late final _pango_cairo_context_get_font_options =
      _pango_cairo_context_get_font_optionsPtr.asFunction<
          ffi.Pointer<cairo_font_options_t> Function(
              ffi.Pointer<PangoContext>)>();

  void pango_cairo_context_set_resolution(
    ffi.Pointer<PangoContext> context,
    double dpi,
  ) {
    return _pango_cairo_context_set_resolution(
      context,
      dpi,
    );
  }

  late final _pango_cairo_context_set_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PangoContext>,
              ffi.Double)>>('pango_cairo_context_set_resolution');
  late final _pango_cairo_context_set_resolution =
      _pango_cairo_context_set_resolutionPtr
          .asFunction<void Function(ffi.Pointer<PangoContext>, double)>();

  double pango_cairo_context_get_resolution(
    ffi.Pointer<PangoContext> context,
  ) {
    return _pango_cairo_context_get_resolution(
      context,
    );
  }

  late final _pango_cairo_context_get_resolutionPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PangoContext>)>>(
      'pango_cairo_context_get_resolution');
  late final _pango_cairo_context_get_resolution =
      _pango_cairo_context_get_resolutionPtr
          .asFunction<double Function(ffi.Pointer<PangoContext>)>();

  void pango_cairo_context_set_shape_renderer(
    ffi.Pointer<PangoContext> context,
    PangoCairoShapeRendererFunc func,
    gpointer data,
    GDestroyNotify dnotify,
  ) {
    return _pango_cairo_context_set_shape_renderer(
      context,
      func,
      data,
      dnotify,
    );
  }

  late final _pango_cairo_context_set_shape_rendererPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoContext>,
              PangoCairoShapeRendererFunc,
              gpointer,
              GDestroyNotify)>>('pango_cairo_context_set_shape_renderer');
  late final _pango_cairo_context_set_shape_renderer =
      _pango_cairo_context_set_shape_rendererPtr.asFunction<
          void Function(ffi.Pointer<PangoContext>, PangoCairoShapeRendererFunc,
              gpointer, GDestroyNotify)>();

  PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer(
    ffi.Pointer<PangoContext> context,
    ffi.Pointer<gpointer> data,
  ) {
    return _pango_cairo_context_get_shape_renderer(
      context,
      data,
    );
  }

  late final _pango_cairo_context_get_shape_rendererPtr = _lookup<
          ffi.NativeFunction<
              PangoCairoShapeRendererFunc Function(
                  ffi.Pointer<PangoContext>, ffi.Pointer<gpointer>)>>(
      'pango_cairo_context_get_shape_renderer');
  late final _pango_cairo_context_get_shape_renderer =
      _pango_cairo_context_get_shape_rendererPtr.asFunction<
          PangoCairoShapeRendererFunc Function(
              ffi.Pointer<PangoContext>, ffi.Pointer<gpointer>)>();

  ffi.Pointer<PangoContext> pango_cairo_create_context(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _pango_cairo_create_context(
      cr,
    );
  }

  late final _pango_cairo_create_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoContext> Function(
              ffi.Pointer<cairo_t>)>>('pango_cairo_create_context');
  late final _pango_cairo_create_context = _pango_cairo_create_contextPtr
      .asFunction<ffi.Pointer<PangoContext> Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<PangoLayout> pango_cairo_create_layout(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _pango_cairo_create_layout(
      cr,
    );
  }

  late final _pango_cairo_create_layoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PangoLayout> Function(
              ffi.Pointer<cairo_t>)>>('pango_cairo_create_layout');
  late final _pango_cairo_create_layout = _pango_cairo_create_layoutPtr
      .asFunction<ffi.Pointer<PangoLayout> Function(ffi.Pointer<cairo_t>)>();

  void pango_cairo_update_layout(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_cairo_update_layout(
      cr,
      layout,
    );
  }

  late final _pango_cairo_update_layoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<PangoLayout>)>>('pango_cairo_update_layout');
  late final _pango_cairo_update_layout =
      _pango_cairo_update_layoutPtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoLayout>)>();

  void pango_cairo_show_glyph_string(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoFont> font,
    ffi.Pointer<PangoGlyphString> glyphs,
  ) {
    return _pango_cairo_show_glyph_string(
      cr,
      font,
      glyphs,
    );
  }

  late final _pango_cairo_show_glyph_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoFont>,
              ffi.Pointer<PangoGlyphString>)>>('pango_cairo_show_glyph_string');
  late final _pango_cairo_show_glyph_string =
      _pango_cairo_show_glyph_stringPtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoFont>,
              ffi.Pointer<PangoGlyphString>)>();

  void pango_cairo_show_glyph_item(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<PangoGlyphItem> glyph_item,
  ) {
    return _pango_cairo_show_glyph_item(
      cr,
      text,
      glyph_item,
    );
  }

  late final _pango_cairo_show_glyph_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<PangoGlyphItem>)>>('pango_cairo_show_glyph_item');
  late final _pango_cairo_show_glyph_item =
      _pango_cairo_show_glyph_itemPtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<PangoGlyphItem>)>();

  void pango_cairo_show_layout_line(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return _pango_cairo_show_layout_line(
      cr,
      line,
    );
  }

  late final _pango_cairo_show_layout_linePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<PangoLayoutLine>)>>('pango_cairo_show_layout_line');
  late final _pango_cairo_show_layout_line =
      _pango_cairo_show_layout_linePtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoLayoutLine>)>();

  void pango_cairo_show_layout(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_cairo_show_layout(
      cr,
      layout,
    );
  }

  late final _pango_cairo_show_layoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<PangoLayout>)>>('pango_cairo_show_layout');
  late final _pango_cairo_show_layout = _pango_cairo_show_layoutPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoLayout>)>();

  void pango_cairo_show_error_underline(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _pango_cairo_show_error_underline(
      cr,
      x,
      y,
      width,
      height,
    );
  }

  late final _pango_cairo_show_error_underlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('pango_cairo_show_error_underline');
  late final _pango_cairo_show_error_underline =
      _pango_cairo_show_error_underlinePtr.asFunction<
          void Function(
              ffi.Pointer<cairo_t>, double, double, double, double)>();

  void pango_cairo_glyph_string_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoFont> font,
    ffi.Pointer<PangoGlyphString> glyphs,
  ) {
    return _pango_cairo_glyph_string_path(
      cr,
      font,
      glyphs,
    );
  }

  late final _pango_cairo_glyph_string_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoFont>,
              ffi.Pointer<PangoGlyphString>)>>('pango_cairo_glyph_string_path');
  late final _pango_cairo_glyph_string_path =
      _pango_cairo_glyph_string_pathPtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoFont>,
              ffi.Pointer<PangoGlyphString>)>();

  void pango_cairo_layout_line_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoLayoutLine> line,
  ) {
    return _pango_cairo_layout_line_path(
      cr,
      line,
    );
  }

  late final _pango_cairo_layout_line_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<PangoLayoutLine>)>>('pango_cairo_layout_line_path');
  late final _pango_cairo_layout_line_path =
      _pango_cairo_layout_line_pathPtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoLayoutLine>)>();

  void pango_cairo_layout_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoLayout> layout,
  ) {
    return _pango_cairo_layout_path(
      cr,
      layout,
    );
  }

  late final _pango_cairo_layout_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<PangoLayout>)>>('pango_cairo_layout_path');
  late final _pango_cairo_layout_path = _pango_cairo_layout_pathPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<PangoLayout>)>();

  void pango_cairo_error_underline_path(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _pango_cairo_error_underline_path(
      cr,
      x,
      y,
      width,
      height,
    );
  }

  late final _pango_cairo_error_underline_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('pango_cairo_error_underline_path');
  late final _pango_cairo_error_underline_path =
      _pango_cairo_error_underline_pathPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_t>, double, double, double, double)>();
}

/// PangoLogAttr:
/// @is_line_break: if set, can break line in front of character
/// @is_mandatory_break: if set, must break line in front of character
/// @is_char_break: if set, can break here when doing character wrapping
/// @is_white: is whitespace character
/// @is_cursor_position: if set, cursor can appear in front of character.
/// i.e. this is a grapheme boundary, or the first character in the text.
/// This flag implements Unicode's
/// [Grapheme Cluster Boundaries](http://www.unicode.org/reports/tr29/)
/// semantics.
/// @is_word_start: is first character in a word
/// @is_word_end: is first non-word char after a word
/// Note that in degenerate cases, you could have both @is_word_start
/// and @is_word_end set for some character.
/// @is_sentence_boundary: is a sentence boundary.
/// There are two ways to divide sentences. The first assigns all
/// inter-sentence whitespace/control/format chars to some sentence,
/// so all chars are in some sentence; @is_sentence_boundary denotes
/// the boundaries there. The second way doesn't assign
/// between-sentence spaces, etc. to any sentence, so
/// @is_sentence_start/@is_sentence_end mark the boundaries of those sentences.
/// @is_sentence_start: is first character in a sentence
/// @is_sentence_end: is first char after a sentence.
/// Note that in degenerate cases, you could have both @is_sentence_start
/// and @is_sentence_end set for some character. (e.g. no space after a
/// period, so the next sentence starts right away)
/// @backspace_deletes_character: if set, backspace deletes one character
/// rather than the entire grapheme cluster. This field is only meaningful
/// on grapheme boundaries (where @is_cursor_position is set). In some languages,
/// the full grapheme (e.g. letter + diacritics) is considered a unit, while in
/// others, each decomposed character in the grapheme is a unit. In the default
/// implementation of [func@break], this bit is set on all grapheme boundaries
/// except those following Latin, Cyrillic or Greek base characters.
/// @is_expandable_space: is a whitespace character that can possibly be
/// expanded for justification purposes. (Since: 1.18)
/// @is_word_boundary: is a word boundary, as defined by UAX#29.
/// More specifically, means that this is not a position in the middle of a word.
/// For example, both sides of a punctuation mark are considered word boundaries.
/// This flag is particularly useful when selecting text word-by-word. This flag
/// implements Unicode's [Word Boundaries](http://www.unicode.org/reports/tr29/)
/// semantics. (Since: 1.22)
/// @break_inserts_hyphen: when breaking lines before this char, insert a hyphen.
/// Since: 1.50
/// @break_removes_preceding: when breaking lines before this char, remove the
/// preceding char. Since 1.50
///
/// The `PangoLogAttr` structure stores information about the attributes of a
/// single character.
final class _PangoLogAttr extends ffi.Opaque {}

typedef PangoLogAttr = _PangoLogAttr;
typedef gsize = ffi.UnsignedLong;
typedef Dartgsize = int;
typedef GType = gsize;

/// GTypeClass:
///
/// An opaque structure used as the base of all classes.
final class _GTypeClass extends ffi.Struct {
  @GType()
  external int g_type;
}

typedef GTypeClass = _GTypeClass;

/// GTypeInstance:
///
/// An opaque structure used as the base of all type instances.
final class _GTypeInstance extends ffi.Struct {
  external ffi.Pointer<GTypeClass> g_class;
}

typedef GTypeInstance = _GTypeInstance;
typedef guint = ffi.UnsignedInt;
typedef Dartguint = int;

final class _GData extends ffi.Opaque {}

typedef GData = _GData;

final class _GObject extends ffi.Struct {
  external GTypeInstance g_type_instance;

  @guint()
  external int ref_count;

  external ffi.Pointer<GData> qdata;
}

typedef GObject = _GObject;

/// PangoEngine:
///
/// `PangoEngine` is the base class for all types of language and
/// script specific engines. It has no functionality by itself.
///
/// Deprecated: 1.38
final class _PangoEngine extends ffi.Struct {
  external GObject parent_instance;
}

typedef PangoEngine = _PangoEngine;

/// PangoEngineLang:
///
/// The `PangoEngineLang` class is implemented by engines that
/// customize the rendering-system independent part of the
/// Pango pipeline for a particular script or language. For
/// instance, a custom `PangoEngineLang` could be provided for
/// Thai to implement the dictionary-based word boundary
/// lookups needed for that language.
///
/// Deprecated: 1.38
final class _PangoEngineLang extends ffi.Struct {
  external PangoEngine parent_instance;
}

typedef PangoEngineLang = _PangoEngineLang;

/// PangoEngineShape:
///
/// The `PangoEngineShape` class is implemented by engines that
/// customize the rendering-system dependent part of the
/// Pango pipeline for a particular script or language.
/// A `PangoEngineShape` implementation is then specific to both
/// a particular rendering system or group of rendering systems
/// and to a particular script. For instance, there is one
/// `PangoEngineShape` implementation to handle shaping Arabic
/// for Fontconfig-based backends.
///
/// Deprecated: 1.38
final class _PangoEngineShape extends ffi.Struct {
  external PangoEngine parent_instance;
}

typedef PangoEngineShape = _PangoEngineShape;

/// PangoFont:
///
/// A `PangoFont` is used to represent a font in a
/// rendering-system-independent manner.
final class _PangoFont extends ffi.Struct {
  external GObject parent_instance;
}

typedef PangoFont = _PangoFont;

/// PangoFontMap:
///
/// A `PangoFontMap` represents the set of fonts available for a
/// particular rendering system.
///
/// This is a virtual object with implementations being specific to
/// particular rendering systems.
final class _PangoFontMap extends ffi.Struct {
  external GObject parent_instance;
}

typedef PangoFontMap = _PangoFontMap;

/// PangoRectangle:
/// @x: X coordinate of the left side of the rectangle.
/// @y: Y coordinate of the the top side of the rectangle.
/// @width: width of the rectangle.
/// @height: height of the rectangle.
///
/// The `PangoRectangle` structure represents a rectangle.
///
/// `PangoRectangle` is frequently used to represent the logical or ink
/// extents of a single glyph or section of text. (See, for instance,
/// [method@Pango.Font.get_glyph_extents].)
final class _PangoRectangle extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

typedef PangoRectangle = _PangoRectangle;

final class _PangoContext extends ffi.Opaque {}

typedef PangoContext = _PangoContext;

final class _PangoLanguage extends ffi.Opaque {}

typedef PangoLanguage = _PangoLanguage;
typedef guint32 = ffi.UnsignedInt;
typedef Dartguint32 = int;

/// PangoGlyph:
///
/// A `PangoGlyph` represents a single glyph in the output form of a string.
typedef PangoGlyph = guint32;

final class _PangoFontDescription extends ffi.Opaque {}

/// PangoFontDescription:
///
/// A `PangoFontDescription` describes a font in an implementation-independent
/// manner.
///
/// `PangoFontDescription` structures are used both to list what fonts are
/// available on the system and also for specifying the characteristics of
/// a font to load.
typedef PangoFontDescription = _PangoFontDescription;

final class _PangoFontMetrics extends ffi.Struct {
  @guint()
  external int ref_count;

  @ffi.Int()
  external int ascent;

  @ffi.Int()
  external int descent;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int approximate_char_width;

  @ffi.Int()
  external int approximate_digit_width;

  @ffi.Int()
  external int underline_position;

  @ffi.Int()
  external int underline_thickness;

  @ffi.Int()
  external int strikethrough_position;

  @ffi.Int()
  external int strikethrough_thickness;
}

/// PangoFontMetrics:
///
/// A `PangoFontMetrics` structure holds the overall metric information
/// for a font.
///
/// The information in a `PangoFontMetrics` structure may be restricted
/// to a script. The fields of this structure are private to implementations
/// of a font backend. See the documentation of the corresponding getters
/// for documentation of their meaning.
///
/// For an overview of the most important metrics, see:
///
/// <picture>
/// <source srcset="fontmetrics-dark.png" media="(prefers-color-scheme: dark)">
/// <img alt="Font metrics" src="fontmetrics-light.png">
/// </picture>
typedef PangoFontMetrics = _PangoFontMetrics;

/// PangoStyle:
/// @PANGO_STYLE_NORMAL: the font is upright.
/// @PANGO_STYLE_OBLIQUE: the font is slanted, but in a roman style.
/// @PANGO_STYLE_ITALIC: the font is slanted in an italic style.
///
/// An enumeration specifying the various slant styles possible for a font.
enum PangoStyle {
  PANGO_STYLE_NORMAL(0),
  PANGO_STYLE_OBLIQUE(1),
  PANGO_STYLE_ITALIC(2);

  final int value;
  const PangoStyle(this.value);

  static PangoStyle fromValue(int value) => switch (value) {
        0 => PANGO_STYLE_NORMAL,
        1 => PANGO_STYLE_OBLIQUE,
        2 => PANGO_STYLE_ITALIC,
        _ => throw ArgumentError("Unknown value for PangoStyle: $value"),
      };
}

/// PangoVariant:
/// @PANGO_VARIANT_NORMAL: A normal font.
/// @PANGO_VARIANT_SMALL_CAPS: A font with the lower case characters
/// replaced by smaller variants of the capital characters.
/// @PANGO_VARIANT_ALL_SMALL_CAPS: A font with all characters
/// replaced by smaller variants of the capital characters. Since: 1.50
/// @PANGO_VARIANT_PETITE_CAPS: A font with the lower case characters
/// replaced by smaller variants of the capital characters.
/// Petite Caps can be even smaller than Small Caps. Since: 1.50
/// @PANGO_VARIANT_ALL_PETITE_CAPS: A font with all characters
/// replaced by smaller variants of the capital characters.
/// Petite Caps can be even smaller than Small Caps. Since: 1.50
/// @PANGO_VARIANT_UNICASE: A font with the upper case characters
/// replaced by smaller variants of the capital letters. Since: 1.50
/// @PANGO_VARIANT_TITLE_CAPS: A font with capital letters that
/// are more suitable for all-uppercase titles. Since: 1.50
///
/// An enumeration specifying capitalization variant of the font.
enum PangoVariant {
  PANGO_VARIANT_NORMAL(0),
  PANGO_VARIANT_SMALL_CAPS(1),
  PANGO_VARIANT_ALL_SMALL_CAPS(2),
  PANGO_VARIANT_PETITE_CAPS(3),
  PANGO_VARIANT_ALL_PETITE_CAPS(4),
  PANGO_VARIANT_UNICASE(5),
  PANGO_VARIANT_TITLE_CAPS(6);

  final int value;
  const PangoVariant(this.value);

  static PangoVariant fromValue(int value) => switch (value) {
        0 => PANGO_VARIANT_NORMAL,
        1 => PANGO_VARIANT_SMALL_CAPS,
        2 => PANGO_VARIANT_ALL_SMALL_CAPS,
        3 => PANGO_VARIANT_PETITE_CAPS,
        4 => PANGO_VARIANT_ALL_PETITE_CAPS,
        5 => PANGO_VARIANT_UNICASE,
        6 => PANGO_VARIANT_TITLE_CAPS,
        _ => throw ArgumentError("Unknown value for PangoVariant: $value"),
      };
}

/// PangoWeight:
/// @PANGO_WEIGHT_THIN: the thin weight (= 100) Since: 1.24
/// @PANGO_WEIGHT_ULTRALIGHT: the ultralight weight (= 200)
/// @PANGO_WEIGHT_LIGHT: the light weight (= 300)
/// @PANGO_WEIGHT_SEMILIGHT: the semilight weight (= 350) Since: 1.36.7
/// @PANGO_WEIGHT_BOOK: the book weight (= 380) Since: 1.24)
/// @PANGO_WEIGHT_NORMAL: the default weight (= 400)
/// @PANGO_WEIGHT_MEDIUM: the medium weight (= 500) Since: 1.24
/// @PANGO_WEIGHT_SEMIBOLD: the semibold weight (= 600)
/// @PANGO_WEIGHT_BOLD: the bold weight (= 700)
/// @PANGO_WEIGHT_ULTRABOLD: the ultrabold weight (= 800)
/// @PANGO_WEIGHT_HEAVY: the heavy weight (= 900)
/// @PANGO_WEIGHT_ULTRAHEAVY: the ultraheavy weight (= 1000) Since: 1.24
///
/// An enumeration specifying the weight (boldness) of a font.
///
/// Weight is specified as a numeric value ranging from 100 to 1000.
/// This enumeration simply provides some common, predefined values.
enum PangoWeight {
  PANGO_WEIGHT_THIN(100),
  PANGO_WEIGHT_ULTRALIGHT(200),
  PANGO_WEIGHT_LIGHT(300),
  PANGO_WEIGHT_SEMILIGHT(350),
  PANGO_WEIGHT_BOOK(380),
  PANGO_WEIGHT_NORMAL(400),
  PANGO_WEIGHT_MEDIUM(500),
  PANGO_WEIGHT_SEMIBOLD(600),
  PANGO_WEIGHT_BOLD(700),
  PANGO_WEIGHT_ULTRABOLD(800),
  PANGO_WEIGHT_HEAVY(900),
  PANGO_WEIGHT_ULTRAHEAVY(1000);

  final int value;
  const PangoWeight(this.value);

  static PangoWeight fromValue(int value) => switch (value) {
        100 => PANGO_WEIGHT_THIN,
        200 => PANGO_WEIGHT_ULTRALIGHT,
        300 => PANGO_WEIGHT_LIGHT,
        350 => PANGO_WEIGHT_SEMILIGHT,
        380 => PANGO_WEIGHT_BOOK,
        400 => PANGO_WEIGHT_NORMAL,
        500 => PANGO_WEIGHT_MEDIUM,
        600 => PANGO_WEIGHT_SEMIBOLD,
        700 => PANGO_WEIGHT_BOLD,
        800 => PANGO_WEIGHT_ULTRABOLD,
        900 => PANGO_WEIGHT_HEAVY,
        1000 => PANGO_WEIGHT_ULTRAHEAVY,
        _ => throw ArgumentError("Unknown value for PangoWeight: $value"),
      };
}

/// PangoStretch:
/// @PANGO_STRETCH_ULTRA_CONDENSED: ultra condensed width
/// @PANGO_STRETCH_EXTRA_CONDENSED: extra condensed width
/// @PANGO_STRETCH_CONDENSED: condensed width
/// @PANGO_STRETCH_SEMI_CONDENSED: semi condensed width
/// @PANGO_STRETCH_NORMAL: the normal width
/// @PANGO_STRETCH_SEMI_EXPANDED: semi expanded width
/// @PANGO_STRETCH_EXPANDED: expanded width
/// @PANGO_STRETCH_EXTRA_EXPANDED: extra expanded width
/// @PANGO_STRETCH_ULTRA_EXPANDED: ultra expanded width
///
/// An enumeration specifying the width of the font relative to other designs
/// within a family.
enum PangoStretch {
  PANGO_STRETCH_ULTRA_CONDENSED(0),
  PANGO_STRETCH_EXTRA_CONDENSED(1),
  PANGO_STRETCH_CONDENSED(2),
  PANGO_STRETCH_SEMI_CONDENSED(3),
  PANGO_STRETCH_NORMAL(4),
  PANGO_STRETCH_SEMI_EXPANDED(5),
  PANGO_STRETCH_EXPANDED(6),
  PANGO_STRETCH_EXTRA_EXPANDED(7),
  PANGO_STRETCH_ULTRA_EXPANDED(8);

  final int value;
  const PangoStretch(this.value);

  static PangoStretch fromValue(int value) => switch (value) {
        0 => PANGO_STRETCH_ULTRA_CONDENSED,
        1 => PANGO_STRETCH_EXTRA_CONDENSED,
        2 => PANGO_STRETCH_CONDENSED,
        3 => PANGO_STRETCH_SEMI_CONDENSED,
        4 => PANGO_STRETCH_NORMAL,
        5 => PANGO_STRETCH_SEMI_EXPANDED,
        6 => PANGO_STRETCH_EXPANDED,
        7 => PANGO_STRETCH_EXTRA_EXPANDED,
        8 => PANGO_STRETCH_ULTRA_EXPANDED,
        _ => throw ArgumentError("Unknown value for PangoStretch: $value"),
      };
}

/// PangoFontMask:
/// @PANGO_FONT_MASK_FAMILY: the font family is specified.
/// @PANGO_FONT_MASK_STYLE: the font style is specified.
/// @PANGO_FONT_MASK_VARIANT: the font variant is specified.
/// @PANGO_FONT_MASK_WEIGHT: the font weight is specified.
/// @PANGO_FONT_MASK_STRETCH: the font stretch is specified.
/// @PANGO_FONT_MASK_SIZE: the font size is specified.
/// @PANGO_FONT_MASK_GRAVITY: the font gravity is specified (Since: 1.16.)
/// @PANGO_FONT_MASK_VARIATIONS: OpenType font variations are specified (Since: 1.42)
///
/// The bits in a `PangoFontMask` correspond to the set fields in a
/// `PangoFontDescription`.
enum PangoFontMask {
  PANGO_FONT_MASK_FAMILY(1),
  PANGO_FONT_MASK_STYLE(2),
  PANGO_FONT_MASK_VARIANT(4),
  PANGO_FONT_MASK_WEIGHT(8),
  PANGO_FONT_MASK_STRETCH(16),
  PANGO_FONT_MASK_SIZE(32),
  PANGO_FONT_MASK_GRAVITY(64),
  PANGO_FONT_MASK_VARIATIONS(128);

  final int value;
  const PangoFontMask(this.value);

  static PangoFontMask fromValue(int value) => switch (value) {
        1 => PANGO_FONT_MASK_FAMILY,
        2 => PANGO_FONT_MASK_STYLE,
        4 => PANGO_FONT_MASK_VARIANT,
        8 => PANGO_FONT_MASK_WEIGHT,
        16 => PANGO_FONT_MASK_STRETCH,
        32 => PANGO_FONT_MASK_SIZE,
        64 => PANGO_FONT_MASK_GRAVITY,
        128 => PANGO_FONT_MASK_VARIATIONS,
        _ => throw ArgumentError("Unknown value for PangoFontMask: $value"),
      };
}

typedef gint = ffi.Int;
typedef Dartgint = int;
typedef gboolean = gint;

/// PangoGravity:
/// @PANGO_GRAVITY_SOUTH: Glyphs stand upright (default) <img align="right" valign="center" src="m-south.png">
/// @PANGO_GRAVITY_EAST: Glyphs are rotated 90 degrees counter-clockwise. <img align="right" valign="center" src="m-east.png">
/// @PANGO_GRAVITY_NORTH: Glyphs are upside-down. <img align="right" valign="cener" src="m-north.png">
/// @PANGO_GRAVITY_WEST: Glyphs are rotated 90 degrees clockwise. <img align="right" valign="center" src="m-west.png">
/// @PANGO_GRAVITY_AUTO: Gravity is resolved from the context matrix
///
/// `PangoGravity` represents the orientation of glyphs in a segment
/// of text.
///
/// This is useful when rendering vertical text layouts. In those situations,
/// the layout is rotated using a non-identity [struct@Pango.Matrix], and then
/// glyph orientation is controlled using `PangoGravity`.
///
/// Not every value in this enumeration makes sense for every usage of
/// `PangoGravity`; for example, %PANGO_GRAVITY_AUTO only can be passed to
/// [method@Pango.Context.set_base_gravity] and can only be returned by
/// [method@Pango.Context.get_base_gravity].
///
/// See also: [enum@Pango.GravityHint]
///
/// Since: 1.16
enum PangoGravity {
  PANGO_GRAVITY_SOUTH(0),
  PANGO_GRAVITY_EAST(1),
  PANGO_GRAVITY_NORTH(2),
  PANGO_GRAVITY_WEST(3),
  PANGO_GRAVITY_AUTO(4);

  final int value;
  const PangoGravity(this.value);

  static PangoGravity fromValue(int value) => switch (value) {
        0 => PANGO_GRAVITY_SOUTH,
        1 => PANGO_GRAVITY_EAST,
        2 => PANGO_GRAVITY_NORTH,
        3 => PANGO_GRAVITY_WEST,
        4 => PANGO_GRAVITY_AUTO,
        _ => throw ArgumentError("Unknown value for PangoGravity: $value"),
      };
}

/// PangoFontFace:
///
/// A `PangoFontFace` is used to represent a group of fonts with
/// the same family, slant, weight, and width, but varying sizes.
final class _PangoFontFace extends ffi.Struct {
  external GObject parent_instance;
}

typedef PangoFontFace = _PangoFontFace;

/// PangoFontFamily:
///
/// A `PangoFontFamily` is used to represent a family of related
/// font faces.
///
/// The font faces in a family share a common design, but differ in
/// slant, weight, width or other aspects.
final class _PangoFontFamily extends ffi.Struct {
  external GObject parent_instance;
}

typedef PangoFontFamily = _PangoFontFamily;
typedef gpointer = ffi.Pointer<ffi.Void>;
typedef GSList = _GSList;

final class _GSList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GSList> next;
}

typedef GSList1 = _GSList;
typedef gchar = ffi.Char;
typedef Dartgchar = int;

/// GParamFlags:
/// @G_PARAM_READABLE: the parameter is readable
/// @G_PARAM_WRITABLE: the parameter is writable
/// @G_PARAM_READWRITE: alias for %G_PARAM_READABLE | %G_PARAM_WRITABLE
/// @G_PARAM_CONSTRUCT: the parameter will be set upon object construction
/// @G_PARAM_CONSTRUCT_ONLY: the parameter can only be set upon object construction
/// @G_PARAM_LAX_VALIDATION: upon parameter conversion (see g_param_value_convert())
/// strict validation is not required
/// @G_PARAM_STATIC_NAME: the string used as name when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_NICK: the string used as nick when constructing the
/// parameter is guaranteed to remain valid and
/// unmmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_STATIC_BLURB: the string used as blurb when constructing the
/// parameter is guaranteed to remain valid and
/// unmodified for the lifetime of the parameter.
/// Since 2.8
/// @G_PARAM_EXPLICIT_NOTIFY: calls to g_object_set_property() for this
/// property will not automatically result in a "notify" signal being
/// emitted: the implementation must call g_object_notify() themselves
/// in case the property actually changes.  Since: 2.42.
/// @G_PARAM_PRIVATE: internal
/// @G_PARAM_DEPRECATED: the parameter is deprecated and will be removed
/// in a future version. A warning will be generated if it is used
/// while running with G_ENABLE_DIAGNOSTIC=1.
/// Since 2.26
///
/// Through the #GParamFlags flag values, certain aspects of parameters
/// can be configured.
///
/// See also: %G_PARAM_STATIC_STRINGS
enum GParamFlags {
  G_PARAM_READABLE(1),
  G_PARAM_WRITABLE(2),
  G_PARAM_READWRITE(3),
  G_PARAM_CONSTRUCT(4),
  G_PARAM_CONSTRUCT_ONLY(8),
  G_PARAM_LAX_VALIDATION(16),
  G_PARAM_STATIC_NAME(32),
  G_PARAM_STATIC_NICK(64),
  G_PARAM_STATIC_BLURB(128),
  G_PARAM_EXPLICIT_NOTIFY(1073741824),
  G_PARAM_DEPRECATED(-2147483648);

  static const G_PARAM_PRIVATE = G_PARAM_STATIC_NAME;

  final int value;
  const GParamFlags(this.value);

  static GParamFlags fromValue(int value) => switch (value) {
        1 => G_PARAM_READABLE,
        2 => G_PARAM_WRITABLE,
        3 => G_PARAM_READWRITE,
        4 => G_PARAM_CONSTRUCT,
        8 => G_PARAM_CONSTRUCT_ONLY,
        16 => G_PARAM_LAX_VALIDATION,
        32 => G_PARAM_STATIC_NAME,
        64 => G_PARAM_STATIC_NICK,
        128 => G_PARAM_STATIC_BLURB,
        1073741824 => G_PARAM_EXPLICIT_NOTIFY,
        -2147483648 => G_PARAM_DEPRECATED,
        _ => throw ArgumentError("Unknown value for GParamFlags: $value"),
      };

  @override
  String toString() {
    if (this == G_PARAM_STATIC_NAME)
      return "GParamFlags.G_PARAM_STATIC_NAME, GParamFlags.G_PARAM_PRIVATE";
    return super.toString();
  }
}

final class _GParamSpec extends ffi.Struct {
  external GTypeInstance g_type_instance;

  external ffi.Pointer<gchar> name;

  @ffi.Int()
  external int flagsAsInt;

  GParamFlags get flags => GParamFlags.fromValue(flagsAsInt);

  @GType()
  external int value_type;

  @GType()
  external int owner_type;

  external ffi.Pointer<gchar> _nick;

  external ffi.Pointer<gchar> _blurb;

  external ffi.Pointer<GData> qdata;

  @guint()
  external int ref_count;

  @guint()
  external int param_id;
}

typedef GParamSpec = _GParamSpec;
typedef glong = ffi.Long;
typedef Dartglong = int;
typedef gulong = ffi.UnsignedLong;
typedef Dartgulong = int;
typedef gint64 = ffi.Long;
typedef Dartgint64 = int;
typedef guint64 = ffi.UnsignedLong;
typedef Dartguint64 = int;
typedef gfloat = ffi.Float;
typedef Dartgfloat = double;
typedef gdouble = ffi.Double;
typedef Dartgdouble = double;

final class UnnamedUnion1 extends ffi.Union {
  @gint()
  external int v_int;

  @guint()
  external int v_uint;

  @glong()
  external int v_long;

  @gulong()
  external int v_ulong;

  @gint64()
  external int v_int64;

  @guint64()
  external int v_uint64;

  @gfloat()
  external double v_float;

  @gdouble()
  external double v_double;

  external gpointer v_pointer;
}

/// GValue:
///
/// An opaque structure used to hold different types of values.
///
/// The data within the structure has protected scope: it is accessible only
/// to functions within a #GTypeValueTable structure, or implementations of
/// the g_value_*() API. That is, code portions which implement new fundamental
/// types.
///
/// #GValue users cannot make any assumptions about how data is stored
/// within the 2 element @data union, and the @g_type member should
/// only be accessed through the G_VALUE_TYPE() macro.
final class _GValue extends ffi.Struct {
  @GType()
  external int g_type;

  @ffi.Array.multi([2])
  external ffi.Array<UnnamedUnion1> data;
}

typedef GValue = _GValue;

/// GObjectConstructParam:
/// @pspec: the #GParamSpec of the construct parameter
/// @value: the value to set the parameter to
///
/// The GObjectConstructParam struct is an auxiliary structure used to hand
/// #GParamSpec/#GValue pairs to the @constructor of a #GObjectClass.
final class _GObjectConstructParam extends ffi.Struct {
  external ffi.Pointer<GParamSpec> pspec;

  external ffi.Pointer<GValue> value;
}

typedef GObjectConstructParam = _GObjectConstructParam;

/// GObjectClass:
/// @g_type_class: the parent class
/// @constructor: the @constructor function is called by g_object_new () to
/// complete the object initialization after all the construction properties are
/// set. The first thing a @constructor implementation must do is chain up to the
/// @constructor of the parent class. Overriding @constructor should be rarely
/// needed, e.g. to handle construct properties, or to implement singletons.
/// @set_property: the generic setter for all properties of this type. Should be
/// overridden for every type with properties. If implementations of
/// @set_property don't emit property change notification explicitly, this will
/// be done implicitly by the type system. However, if the notify signal is
/// emitted explicitly, the type system will not emit it a second time.
/// @get_property: the generic getter for all properties of this type. Should be
/// overridden for every type with properties.
/// @dispose: the @dispose function is supposed to drop all references to other
/// objects, but keep the instance otherwise intact, so that client method
/// invocations still work. It may be run multiple times (due to reference
/// loops). Before returning, @dispose should chain up to the @dispose method
/// of the parent class.
/// @finalize: instance finalization function, should finish the finalization of
/// the instance begun in @dispose and chain up to the @finalize method of the
/// parent class.
/// @dispatch_properties_changed: emits property change notification for a bunch
/// of properties. Overriding @dispatch_properties_changed should be rarely
/// needed.
/// @notify: the class closure for the notify signal
/// @constructed: the @constructed function is called by g_object_new() as the
/// final step of the object creation process.  At the point of the call, all
/// construction properties have been set on the object.  The purpose of this
/// call is to allow for object initialisation steps that can only be performed
/// after construction properties have been set.  @constructed implementors
/// should chain up to the @constructed call of their parent class to allow it
/// to complete its initialisation.
///
/// The class structure for the GObject type.
///
/// |[<!-- language="C" -->
/// // Example of implementing a singleton using a constructor.
/// static MySingleton *the_singleton = NULL;
///
/// static GObject*
/// my_singleton_constructor (GType                  type,
/// guint                  n_construct_params,
/// GObjectConstructParam *construct_params)
/// {
/// GObject *object;
///
/// if (!the_singleton)
/// {
/// object = G_OBJECT_CLASS (parent_class)->constructor (type,
/// n_construct_params,
/// construct_params);
/// the_singleton = MY_SINGLETON (object);
/// }
/// else
/// object = g_object_ref (G_OBJECT (the_singleton));
///
/// return object;
/// }
/// ]|
final class _GObjectClass extends ffi.Struct {
  external GTypeClass g_type_class;

  external ffi.Pointer<GSList1> construct_properties;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<GObject> Function(
                  GType type,
                  guint n_construct_properties,
                  ffi.Pointer<GObjectConstructParam> construct_properties)>>
      constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject> object,
              guint property_id,
              ffi.Pointer<GValue> value,
              ffi.Pointer<GParamSpec> pspec)>> set_property;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<GObject> object,
              guint property_id,
              ffi.Pointer<GValue> value,
              ffi.Pointer<GParamSpec> pspec)>> get_property;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      dispose;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      finalize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<GObject> object, guint n_pspecs,
                  ffi.Pointer<ffi.Pointer<GParamSpec>> pspecs)>>
      dispatch_properties_changed;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<GObject> object, ffi.Pointer<GParamSpec> pspec)>>
      notify;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GObject> object)>>
      constructed;

  @gsize()
  external int flags;

  @gsize()
  external int n_construct_properties;

  external gpointer pspecs;

  @gsize()
  external int n_pspecs;

  @ffi.Array.multi([3])
  external ffi.Array<gpointer> pdummy;
}

typedef GObjectClass = _GObjectClass;

final class _PangoFontFamilyClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFontFamily> family,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<PangoFontFace>>> faces,
              ffi.Pointer<ffi.Int> n_faces)>> list_faces;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PangoFontFamily> family)>> get_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<PangoFontFamily> family)>> is_monospace;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<PangoFontFamily> family)>> is_variable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontFace> Function(
              ffi.Pointer<PangoFontFamily> family,
              ffi.Pointer<ffi.Char> name)>> get_face;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _pango_reserved2;
}

typedef PangoFontFamilyClass = _PangoFontFamilyClass;

final class _PangoFontFaceClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<PangoFontFace> face)>>
      get_face_name;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFontFace> face)>> describe;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFontFace> face,
              ffi.Pointer<ffi.Pointer<ffi.Int>> sizes,
              ffi.Pointer<ffi.Int> n_sizes)>> list_sizes;

  external ffi.Pointer<
          ffi
          .NativeFunction<gboolean Function(ffi.Pointer<PangoFontFace> face)>>
      is_synthesized;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontFamily> Function(
              ffi.Pointer<PangoFontFace> face)>> get_family;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _pango_reserved3;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      _pango_reserved4;
}

typedef PangoFontFaceClass = _PangoFontFaceClass;

final class _PangoCoverage extends ffi.Opaque {}

/// PangoCoverage:
///
/// A `PangoCoverage` structure is a map from Unicode characters
/// to [enum@Pango.CoverageLevel] values.
///
/// It is often necessary in Pango to determine if a particular
/// font can represent a particular character, and also how well
/// it can represent that character. The `PangoCoverage` is a data
/// structure that is used to represent that information. It is an
/// opaque structure with no public fields.
typedef PangoCoverage = _PangoCoverage;

/// hb_tag_t:
///
/// Data type for tag identifiers. Tags are four
/// byte integers, each byte representing a character.
///
/// Tags are used to identify tables, design-variation axes,
/// scripts, languages, font features, and baselines with
/// human-readable names.
typedef hb_tag_t = ffi.Uint32;
typedef Darthb_tag_t = int;

/// hb_feature_t:
/// @tag: The #hb_tag_t tag of the feature
/// @value: The value of the feature. 0 disables the feature, non-zero (usually
/// 1) enables the feature.  For features implemented as lookup type 3 (like
/// 'salt') the @value is a one based index into the alternates.
/// @start: the cluster to start applying this feature setting (inclusive).
/// @end: the cluster to end applying this feature setting (exclusive).
///
/// The #hb_feature_t is the structure that holds information about requested
/// feature application. The feature will be applied with the given value to all
/// glyphs which are in clusters between @start (inclusive) and @end (exclusive).
/// Setting start to #HB_FEATURE_GLOBAL_START and end to #HB_FEATURE_GLOBAL_END
/// specifies that the feature always applies to the entire buffer.
final class hb_feature_t extends ffi.Struct {
  @hb_tag_t()
  external int tag;

  @ffi.Uint32()
  external int value;

  @ffi.UnsignedInt()
  external int start;

  @ffi.UnsignedInt()
  external int end;
}

final class hb_font_t extends ffi.Opaque {}

final class _PangoFontClass extends ffi.Struct {
  external GObjectClass parent_class;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFont> font)>> describe;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoCoverage> Function(ffi.Pointer<PangoFont> font,
              ffi.Pointer<PangoLanguage> language)>> get_coverage;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFont> font,
              PangoGlyph glyph,
              ffi.Pointer<PangoRectangle> ink_rect,
              ffi.Pointer<PangoRectangle> logical_rect)>> get_glyph_extents;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontMetrics> Function(ffi.Pointer<PangoFont> font,
              ffi.Pointer<PangoLanguage> language)>> get_metrics;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<PangoFontMap> Function(ffi.Pointer<PangoFont> font)>>
      get_font_map;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoFontDescription> Function(
              ffi.Pointer<PangoFont> font)>> describe_absolute;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PangoFont> font,
              ffi.Pointer<hb_feature_t> features,
              guint len,
              ffi.Pointer<guint> num_features)>> get_features;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<hb_font_t> Function(ffi.Pointer<PangoFont> font)>>
      create_hb_font;
}

typedef PangoFontClass = _PangoFontClass;

/// gunichar:
///
/// A type which can hold any UTF-32 or UCS-4 character code,
/// also known as a Unicode code point.
///
/// If you want to produce the UTF-8 representation of a #gunichar,
/// use g_ucs4_to_utf8(). See also g_utf8_to_ucs4() for the reverse
/// process.
///
/// To print/scan values of this type as integer, use
/// %G_GINT32_MODIFIER and/or %G_GUINT32_FORMAT.
///
/// The notation to express a Unicode code point in running text is
/// as a hexadecimal number with four to six digits and uppercase
/// letters, prefixed by the string "U+". Leading zeros are omitted,
/// unless the code point would have fewer than four hexadecimal digits.
/// For example, "U+0041 LATIN CAPITAL LETTER A". To print a code point
/// in the U+-notation, use the format string "U+\%04"G_GINT32_FORMAT"X".
/// To scan, use the format string "U+\%06"G_GINT32_FORMAT"X".
///
/// |[
/// gunichar c;
/// sscanf ("U+0041", "U+%06"G_GINT32_FORMAT"X", &amp;c)
/// g_print ("Read U+%04"G_GINT32_FORMAT"X", c);
/// ]|
typedef gunichar = guint32;

final class _GBytes extends ffi.Opaque {}

typedef GBytes = _GBytes;
typedef GQuark = guint32;

final class _GError extends ffi.Struct {
  @GQuark()
  external int domain;

  @gint()
  external int code;

  external ffi.Pointer<gchar> message;
}

/// GError:
/// @domain: error domain, e.g. %G_FILE_ERROR
/// @code: error code, e.g. %G_FILE_ERROR_NOENT
/// @message: human-readable informative error message
///
/// The `GError` structure contains information about
/// an error that has occurred.
typedef GError = _GError;
typedef PangoFontFamily_autoptr = ffi.Pointer<PangoFontFamily>;
typedef GList = _GList;

final class _GList extends ffi.Struct {
  external gpointer data;

  external ffi.Pointer<GList> next;

  external ffi.Pointer<GList> prev;
}

typedef GList1 = _GList;
typedef PangoFontFamily_listautoptr = ffi.Pointer<GList1>;
typedef PangoFontFamily_slistautoptr = ffi.Pointer<GSList1>;

/// GQueue:
/// @head: a pointer to the first element of the queue
/// @tail: a pointer to the last element of the queue
/// @length: the number of elements in the queue
///
/// Contains the public fields of a
/// [Queue][glib-Double-ended-Queues].
final class _GQueue extends ffi.Struct {
  external ffi.Pointer<GList1> head;

  external ffi.Pointer<GList1> tail;

  @guint()
  external int length;
}

typedef GQueue = _GQueue;
typedef PangoFontFamily_queueautoptr = ffi.Pointer<GQueue>;
typedef PangoFontFace_autoptr = ffi.Pointer<PangoFontFace>;
typedef PangoFontFace_listautoptr = ffi.Pointer<GList1>;
typedef PangoFontFace_slistautoptr = ffi.Pointer<GSList1>;
typedef PangoFontFace_queueautoptr = ffi.Pointer<GQueue>;
typedef PangoFont_autoptr = ffi.Pointer<PangoFont>;
typedef PangoFont_listautoptr = ffi.Pointer<GList1>;
typedef PangoFont_slistautoptr = ffi.Pointer<GSList1>;
typedef PangoFont_queueautoptr = ffi.Pointer<GQueue>;
typedef PangoFontDescription_autoptr = ffi.Pointer<PangoFontDescription>;
typedef PangoFontDescription_listautoptr = ffi.Pointer<GList1>;
typedef PangoFontDescription_slistautoptr = ffi.Pointer<GSList1>;
typedef PangoFontDescription_queueautoptr = ffi.Pointer<GQueue>;

final class _PangoContextClass extends ffi.Opaque {}

typedef PangoContextClass = _PangoContextClass;

/// PangoFontset:
///
/// A `PangoFontset` represents a set of `PangoFont` to use when rendering text.
///
/// A `PangoFontset` is the result of resolving a `PangoFontDescription`
/// against a particular `PangoContext`. It has operations for finding the
/// component font for a particular Unicode character, and for finding a
/// composite set of metrics for the entire fontset.
final class _PangoFontset extends ffi.Struct {
  external GObject parent_instance;
}

typedef PangoFontset = _PangoFontset;

/// PangoDirection:
/// @PANGO_DIRECTION_LTR: A strong left-to-right direction
/// @PANGO_DIRECTION_RTL: A strong right-to-left direction
/// @PANGO_DIRECTION_TTB_LTR: Deprecated value; treated the
/// same as `PANGO_DIRECTION_RTL`.
/// @PANGO_DIRECTION_TTB_RTL: Deprecated value; treated the
/// same as `PANGO_DIRECTION_LTR`
/// @PANGO_DIRECTION_WEAK_LTR: A weak left-to-right direction
/// @PANGO_DIRECTION_WEAK_RTL: A weak right-to-left direction
/// @PANGO_DIRECTION_NEUTRAL: No direction specified
///
/// `PangoDirection` represents a direction in the Unicode bidirectional
/// algorithm.
///
/// Not every value in this enumeration makes sense for every usage of
/// `PangoDirection`; for example, the return value of [func@unichar_direction]
/// and [func@find_base_dir] cannot be `PANGO_DIRECTION_WEAK_LTR` or
/// `PANGO_DIRECTION_WEAK_RTL`, since every character is either neutral
/// or has a strong direction; on the other hand `PANGO_DIRECTION_NEUTRAL`
/// doesn't make sense to pass to [func@itemize_with_base_dir].
///
/// The `PANGO_DIRECTION_TTB_LTR`, `PANGO_DIRECTION_TTB_RTL` values come from
/// an earlier interpretation of this enumeration as the writing direction
/// of a block of text and are no longer used. See `PangoGravity` for how
/// vertical text is handled in Pango.
///
/// If you are interested in text direction, you should really use fribidi
/// directly. `PangoDirection` is only retained because it is used in some
/// public apis.
enum PangoDirection {
  PANGO_DIRECTION_LTR(0),
  PANGO_DIRECTION_RTL(1),
  PANGO_DIRECTION_TTB_LTR(2),
  PANGO_DIRECTION_TTB_RTL(3),
  PANGO_DIRECTION_WEAK_LTR(4),
  PANGO_DIRECTION_WEAK_RTL(5),
  PANGO_DIRECTION_NEUTRAL(6);

  final int value;
  const PangoDirection(this.value);

  static PangoDirection fromValue(int value) => switch (value) {
        0 => PANGO_DIRECTION_LTR,
        1 => PANGO_DIRECTION_RTL,
        2 => PANGO_DIRECTION_TTB_LTR,
        3 => PANGO_DIRECTION_TTB_RTL,
        4 => PANGO_DIRECTION_WEAK_LTR,
        5 => PANGO_DIRECTION_WEAK_RTL,
        6 => PANGO_DIRECTION_NEUTRAL,
        _ => throw ArgumentError("Unknown value for PangoDirection: $value"),
      };
}

/// PangoGravityHint:
/// @PANGO_GRAVITY_HINT_NATURAL: scripts will take their natural gravity based
/// on the base gravity and the script.  This is the default.
/// @PANGO_GRAVITY_HINT_STRONG: always use the base gravity set, regardless of
/// the script.
/// @PANGO_GRAVITY_HINT_LINE: for scripts not in their natural direction (eg.
/// Latin in East gravity), choose per-script gravity such that every script
/// respects the line progression. This means, Latin and Arabic will take
/// opposite gravities and both flow top-to-bottom for example.
///
/// `PangoGravityHint` defines how horizontal scripts should behave in a
/// vertical context.
///
/// That is, English excerpts in a vertical paragraph for example.
///
/// See also [enum@Pango.Gravity]
///
/// Since: 1.16
enum PangoGravityHint {
  PANGO_GRAVITY_HINT_NATURAL(0),
  PANGO_GRAVITY_HINT_STRONG(1),
  PANGO_GRAVITY_HINT_LINE(2);

  final int value;
  const PangoGravityHint(this.value);

  static PangoGravityHint fromValue(int value) => switch (value) {
        0 => PANGO_GRAVITY_HINT_NATURAL,
        1 => PANGO_GRAVITY_HINT_STRONG,
        2 => PANGO_GRAVITY_HINT_LINE,
        _ => throw ArgumentError("Unknown value for PangoGravityHint: $value"),
      };
}

/// PangoMatrix:
/// @xx: 1st component of the transformation matrix
/// @xy: 2nd component of the transformation matrix
/// @yx: 3rd component of the transformation matrix
/// @yy: 4th component of the transformation matrix
/// @x0: x translation
/// @y0: y translation
///
/// A `PangoMatrix` specifies a transformation between user-space
/// and device coordinates.
///
/// The transformation is given by
///
/// ```
/// x_device = x_user * matrix->xx + y_user * matrix->xy + matrix->x0;
/// y_device = x_user * matrix->yx + y_user * matrix->yy + matrix->y0;
/// ```
///
/// Since: 1.6
final class _PangoMatrix extends ffi.Struct {
  @ffi.Double()
  external double xx;

  @ffi.Double()
  external double xy;

  @ffi.Double()
  external double yx;

  @ffi.Double()
  external double yy;

  @ffi.Double()
  external double x0;

  @ffi.Double()
  external double y0;
}

typedef PangoMatrix = _PangoMatrix;

final class _PangoLayout extends ffi.Opaque {}

typedef PangoLayout = _PangoLayout;

final class _PangoLayoutClass extends ffi.Opaque {}

typedef PangoLayoutClass = _PangoLayoutClass;

/// PangoLayoutLine:
/// @layout: (nullable): the layout this line belongs to, might be %NULL
/// @start_index: start of line as byte index into layout->text
/// @length: length of line in bytes
/// @runs: (nullable) (element-type Pango.LayoutRun): list of runs in the
/// line, from left to right
/// @is_paragraph_start: #TRUE if this is the first line of the paragraph
/// @resolved_dir: #Resolved PangoDirection of line
///
/// A `PangoLayoutLine` represents one of the lines resulting from laying
/// out a paragraph via `PangoLayout`.
///
/// `PangoLayoutLine` structures are obtained by calling
/// [method@Pango.Layout.get_line] and are only valid until the text,
/// attributes, or settings of the parent `PangoLayout` are modified.
final class _PangoLayoutLine extends ffi.Opaque {}

typedef PangoLayoutLine = _PangoLayoutLine;
typedef guint8 = ffi.UnsignedChar;
typedef Dartguint8 = int;

/// PangoAnalysis:
/// @shape_engine: unused, reserved
/// @lang_engine: unused, reserved
/// @font: the font for this segment.
/// @level: the bidirectional level for this segment.
/// @gravity: the glyph orientation for this segment (A `PangoGravity`).
/// @flags: boolean flags for this segment (Since: 1.16).
/// @script: the detected script for this segment (A `PangoScript`) (Since: 1.18).
/// @language: the detected language for this segment.
/// @extra_attrs: extra attributes for this segment.
///
/// The `PangoAnalysis` structure stores information about
/// the properties of a segment of text.
final class _PangoAnalysis extends ffi.Struct {
  external ffi.Pointer<PangoEngineShape> shape_engine;

  external ffi.Pointer<PangoEngineLang> lang_engine;

  external ffi.Pointer<PangoFont> font;

  @guint8()
  external int level;

  @guint8()
  external int gravity;

  @guint8()
  external int flags;

  @guint8()
  external int script;

  external ffi.Pointer<PangoLanguage> language;

  external ffi.Pointer<GSList1> extra_attrs;
}

typedef PangoAnalysis = _PangoAnalysis;

/// PangoItem:
/// @offset: byte offset of the start of this item in text.
/// @length: length of this item in bytes.
/// @num_chars: number of Unicode characters in the item.
/// @char_offset: character offset of the start of this item in text. Since 1.50
/// @analysis: analysis results for the item.
///
/// The `PangoItem` structure stores information about a segment of text.
///
/// You typically obtain `PangoItems` by itemizing a piece of text
/// with [func@itemize].
final class _PangoItem extends ffi.Struct {
  @ffi.Int()
  external int offset;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int num_chars;

  external PangoAnalysis analysis;
}

typedef PangoItem = _PangoItem;

/// PangoGlyphInfo:
/// @glyph: the glyph itself.
/// @geometry: the positional information about the glyph.
/// @attr: the visual attributes of the glyph.
///
/// A `PangoGlyphInfo` structure represents a single glyph with
/// positioning information and visual attributes.
final class _PangoGlyphInfo extends ffi.Opaque {}

typedef PangoGlyphInfo = _PangoGlyphInfo;

/// PangoGlyphString:
/// @num_glyphs: number of glyphs in this glyph string
/// @glyphs: (array length=num_glyphs): array of glyph information
/// @log_clusters: logical cluster info, indexed by the byte index
/// within the text corresponding to the glyph string
///
/// A `PangoGlyphString` is used to store strings of glyphs with geometry
/// and visual attribute information.
///
/// The storage for the glyph information is owned by the structure
/// which simplifies memory management.
final class _PangoGlyphString extends ffi.Struct {
  @ffi.Int()
  external int num_glyphs;

  external ffi.Pointer<PangoGlyphInfo> glyphs;

  external ffi.Pointer<ffi.Int> log_clusters;

  @ffi.Int()
  external int space;
}

typedef PangoGlyphString = _PangoGlyphString;

final class _PangoGlyphItem extends ffi.Struct {
  external ffi.Pointer<PangoItem> item;

  external ffi.Pointer<PangoGlyphString> glyphs;

  @ffi.Int()
  external int y_offset;

  @ffi.Int()
  external int start_x_offset;

  @ffi.Int()
  external int end_x_offset;
}

/// PangoGlyphItem:
/// @item: corresponding `PangoItem`
/// @glyphs: corresponding `PangoGlyphString`
/// @y_offset: shift of the baseline, relative to the baseline
/// of the containing line. Positive values shift upwards
/// @start_x_offset: horizontal displacement to apply before the
/// glyph item. Positive values shift right
/// @end_x_offset: horizontal displacement to apply after th
/// glyph item. Positive values shift right
///
/// A `PangoGlyphItem` is a pair of a `PangoItem` and the glyphs
/// resulting from shaping the items text.
///
/// As an example of the usage of `PangoGlyphItem`, the results
/// of shaping text with `PangoLayout` is a list of `PangoLayoutLine`,
/// each of which contains a list of `PangoGlyphItem`.
typedef PangoGlyphItem = _PangoGlyphItem;

/// PangoLayoutRun:
///
/// A `PangoLayoutRun` represents a single run within a `PangoLayoutLine`.
///
/// It is simply an alternate name for [struct@Pango.GlyphItem].
/// See the [struct@Pango.GlyphItem] docs for details on the fields.
typedef PangoLayoutRun = PangoGlyphItem;

/// PangoAlignment:
/// @PANGO_ALIGN_LEFT: Put all available space on the right
/// @PANGO_ALIGN_CENTER: Center the line within the available space
/// @PANGO_ALIGN_RIGHT: Put all available space on the left
///
/// `PangoAlignment` describes how to align the lines of a `PangoLayout`
/// within the available space.
///
/// If the `PangoLayout` is set to justify using [method@Pango.Layout.set_justify],
/// this only affects partial lines.
///
/// See [method@Pango.Layout.set_auto_dir] for how text direction affects
/// the interpretation of `PangoAlignment` values.
enum PangoAlignment {
  PANGO_ALIGN_LEFT(0),
  PANGO_ALIGN_CENTER(1),
  PANGO_ALIGN_RIGHT(2);

  final int value;
  const PangoAlignment(this.value);

  static PangoAlignment fromValue(int value) => switch (value) {
        0 => PANGO_ALIGN_LEFT,
        1 => PANGO_ALIGN_CENTER,
        2 => PANGO_ALIGN_RIGHT,
        _ => throw ArgumentError("Unknown value for PangoAlignment: $value"),
      };
}

/// PangoWrapMode:
/// @PANGO_WRAP_WORD: wrap lines at word boundaries.
/// @PANGO_WRAP_CHAR: wrap lines at character boundaries.
/// @PANGO_WRAP_WORD_CHAR: wrap lines at word boundaries, but fall back to
/// character boundaries if there is not enough space for a full word.
///
/// `PangoWrapMode` describes how to wrap the lines of a `PangoLayout`
/// to the desired width.
///
/// For @PANGO_WRAP_WORD, Pango uses break opportunities that are determined
/// by the Unicode line breaking algorithm. For @PANGO_WRAP_CHAR, Pango allows
/// breaking at grapheme boundaries that are determined by the Unicode text
/// segmentation algorithm.
enum PangoWrapMode {
  PANGO_WRAP_WORD(0),
  PANGO_WRAP_CHAR(1),
  PANGO_WRAP_WORD_CHAR(2);

  final int value;
  const PangoWrapMode(this.value);

  static PangoWrapMode fromValue(int value) => switch (value) {
        0 => PANGO_WRAP_WORD,
        1 => PANGO_WRAP_CHAR,
        2 => PANGO_WRAP_WORD_CHAR,
        _ => throw ArgumentError("Unknown value for PangoWrapMode: $value"),
      };
}

/// PangoEllipsizeMode:
/// @PANGO_ELLIPSIZE_NONE: No ellipsization
/// @PANGO_ELLIPSIZE_START: Omit characters at the start of the text
/// @PANGO_ELLIPSIZE_MIDDLE: Omit characters in the middle of the text
/// @PANGO_ELLIPSIZE_END: Omit characters at the end of the text
///
/// `PangoEllipsizeMode` describes what sort of ellipsization
/// should be applied to text.
///
/// In the ellipsization process characters are removed from the
/// text in order to make it fit to a given width and replaced
/// with an ellipsis.
enum PangoEllipsizeMode {
  PANGO_ELLIPSIZE_NONE(0),
  PANGO_ELLIPSIZE_START(1),
  PANGO_ELLIPSIZE_MIDDLE(2),
  PANGO_ELLIPSIZE_END(3);

  final int value;
  const PangoEllipsizeMode(this.value);

  static PangoEllipsizeMode fromValue(int value) => switch (value) {
        0 => PANGO_ELLIPSIZE_NONE,
        1 => PANGO_ELLIPSIZE_START,
        2 => PANGO_ELLIPSIZE_MIDDLE,
        3 => PANGO_ELLIPSIZE_END,
        _ =>
          throw ArgumentError("Unknown value for PangoEllipsizeMode: $value"),
      };
}

final class _PangoAttrList extends ffi.Opaque {}

typedef PangoAttrList = _PangoAttrList;

final class _PangoTabArray extends ffi.Opaque {}

typedef PangoTabArray = _PangoTabArray;

/// PangoLayoutSerializeFlags:
/// @PANGO_LAYOUT_SERIALIZE_DEFAULT: Default behavior
/// @PANGO_LAYOUT_SERIALIZE_CONTEXT: Include context information
/// @PANGO_LAYOUT_SERIALIZE_OUTPUT: Include information about the formatted output
///
/// Flags that influence the behavior of [method@Pango.Layout.serialize].
///
/// New members may be added to this enumeration over time.
///
/// Since: 1.50
enum PangoLayoutSerializeFlags {
  PANGO_LAYOUT_SERIALIZE_DEFAULT(0),
  PANGO_LAYOUT_SERIALIZE_CONTEXT(1),
  PANGO_LAYOUT_SERIALIZE_OUTPUT(2);

  final int value;
  const PangoLayoutSerializeFlags(this.value);

  static PangoLayoutSerializeFlags fromValue(int value) => switch (value) {
        0 => PANGO_LAYOUT_SERIALIZE_DEFAULT,
        1 => PANGO_LAYOUT_SERIALIZE_CONTEXT,
        2 => PANGO_LAYOUT_SERIALIZE_OUTPUT,
        _ => throw ArgumentError(
            "Unknown value for PangoLayoutSerializeFlags: $value"),
      };
}

/// PangoLayoutDeserializeError:
/// @PANGO_LAYOUT_DESERIALIZE_INVALID: Unspecified error
/// @PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE: A JSon value could not be
/// interpreted
/// @PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE: A required JSon member was
/// not found
///
/// Errors that can be returned by [func@Pango.Layout.deserialize].
///
/// Since: 1.50
enum PangoLayoutDeserializeError {
  PANGO_LAYOUT_DESERIALIZE_INVALID(0),
  PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE(1),
  PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE(2);

  final int value;
  const PangoLayoutDeserializeError(this.value);

  static PangoLayoutDeserializeError fromValue(int value) => switch (value) {
        0 => PANGO_LAYOUT_DESERIALIZE_INVALID,
        1 => PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE,
        2 => PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE,
        _ => throw ArgumentError(
            "Unknown value for PangoLayoutDeserializeError: $value"),
      };
}

/// PangoLayoutDeserializeFlags:
/// @PANGO_LAYOUT_DESERIALIZE_DEFAULT: Default behavior
/// @PANGO_LAYOUT_DESERIALIZE_CONTEXT: Apply context information
/// from the serialization to the `PangoContext`
///
/// Flags that influence the behavior of [func@Pango.Layout.deserialize].
///
/// New members may be added to this enumeration over time.
///
/// Since: 1.50
enum PangoLayoutDeserializeFlags {
  PANGO_LAYOUT_DESERIALIZE_DEFAULT(0),
  PANGO_LAYOUT_DESERIALIZE_CONTEXT(1);

  final int value;
  const PangoLayoutDeserializeFlags(this.value);

  static PangoLayoutDeserializeFlags fromValue(int value) => switch (value) {
        0 => PANGO_LAYOUT_DESERIALIZE_DEFAULT,
        1 => PANGO_LAYOUT_DESERIALIZE_CONTEXT,
        _ => throw ArgumentError(
            "Unknown value for PangoLayoutDeserializeFlags: $value"),
      };
}

final class _PangoLayoutIter extends ffi.Opaque {}

typedef PangoLayoutIter = _PangoLayoutIter;
typedef PangoLayout_autoptr = ffi.Pointer<PangoLayout>;
typedef PangoLayout_listautoptr = ffi.Pointer<GList1>;
typedef PangoLayout_slistautoptr = ffi.Pointer<GSList1>;
typedef PangoLayout_queueautoptr = ffi.Pointer<GQueue>;
typedef PangoLayoutIter_autoptr = ffi.Pointer<PangoLayoutIter>;
typedef PangoLayoutIter_listautoptr = ffi.Pointer<GList1>;
typedef PangoLayoutIter_slistautoptr = ffi.Pointer<GSList1>;
typedef PangoLayoutIter_queueautoptr = ffi.Pointer<GQueue>;

final class _PangoCairoFont extends ffi.Opaque {}

/// PangoCairoFont:
///
/// `PangoCairoFont` is an interface exported by fonts for
/// use with Cairo.
///
/// The actual type of the font will depend on the particular
/// font technology Cairo was compiled to use.
///
/// Since: 1.18
typedef PangoCairoFont = _PangoCairoFont;

final class _PangoCairoFontMap extends ffi.Opaque {}

/// PangoCairoFontMap:
///
/// `PangoCairoFontMap` is an interface exported by font maps for
/// use with Cairo.
///
/// The actual type of the font map will depend on the particular
/// font technology Cairo was compiled to use.
///
/// Since: 1.10
typedef PangoCairoFontMap = _PangoCairoFontMap;

final class _cairo extends ffi.Opaque {}

/// cairo_t:
///
/// A #cairo_t contains the current state of the rendering device,
/// including coordinates of yet to be drawn shapes.
///
/// Cairo contexts, as #cairo_t objects are named, are central to
/// cairo and all drawing with cairo is always done to a #cairo_t
/// object.
///
/// Memory management of #cairo_t is done with
/// cairo_reference() and cairo_destroy().
///
/// Since: 1.0
typedef cairo_t = _cairo;

/// PangoAttrType:
/// @PANGO_ATTR_INVALID: does not happen
/// @PANGO_ATTR_LANGUAGE: language ([struct@Pango.AttrLanguage])
/// @PANGO_ATTR_FAMILY: font family name list ([struct@Pango.AttrString])
/// @PANGO_ATTR_STYLE: font slant style ([struct@Pango.AttrInt])
/// @PANGO_ATTR_WEIGHT: font weight ([struct@Pango.AttrInt])
/// @PANGO_ATTR_VARIANT: font variant (normal or small caps) ([struct@Pango.AttrInt])
/// @PANGO_ATTR_STRETCH: font stretch ([struct@Pango.AttrInt])
/// @PANGO_ATTR_SIZE: font size in points scaled by %PANGO_SCALE ([struct@Pango.AttrInt])
/// @PANGO_ATTR_FONT_DESC: font description ([struct@Pango.AttrFontDesc])
/// @PANGO_ATTR_FOREGROUND: foreground color ([struct@Pango.AttrColor])
/// @PANGO_ATTR_BACKGROUND: background color ([struct@Pango.AttrColor])
/// @PANGO_ATTR_UNDERLINE: whether the text has an underline ([struct@Pango.AttrInt])
/// @PANGO_ATTR_STRIKETHROUGH: whether the text is struck-through ([struct@Pango.AttrInt])
/// @PANGO_ATTR_RISE: baseline displacement ([struct@Pango.AttrInt])
/// @PANGO_ATTR_SHAPE: shape ([struct@Pango.AttrShape])
/// @PANGO_ATTR_SCALE: font size scale factor ([struct@Pango.AttrFloat])
/// @PANGO_ATTR_FALLBACK: whether fallback is enabled ([struct@Pango.AttrInt])
/// @PANGO_ATTR_LETTER_SPACING: letter spacing ([struct@PangoAttrInt])
/// @PANGO_ATTR_UNDERLINE_COLOR: underline color ([struct@Pango.AttrColor])
/// @PANGO_ATTR_STRIKETHROUGH_COLOR: strikethrough color ([struct@Pango.AttrColor])
/// @PANGO_ATTR_ABSOLUTE_SIZE: font size in pixels scaled by %PANGO_SCALE ([struct@Pango.AttrInt])
/// @PANGO_ATTR_GRAVITY: base text gravity ([struct@Pango.AttrInt])
/// @PANGO_ATTR_GRAVITY_HINT: gravity hint ([struct@Pango.AttrInt])
/// @PANGO_ATTR_FONT_FEATURES: OpenType font features ([struct@Pango.AttrFontFeatures]). Since 1.38
/// @PANGO_ATTR_FOREGROUND_ALPHA: foreground alpha ([struct@Pango.AttrInt]). Since 1.38
/// @PANGO_ATTR_BACKGROUND_ALPHA: background alpha ([struct@Pango.AttrInt]). Since 1.38
/// @PANGO_ATTR_ALLOW_BREAKS: whether breaks are allowed ([struct@Pango.AttrInt]). Since 1.44
/// @PANGO_ATTR_SHOW: how to render invisible characters ([struct@Pango.AttrInt]). Since 1.44
/// @PANGO_ATTR_INSERT_HYPHENS: whether to insert hyphens at intra-word line breaks ([struct@Pango.AttrInt]). Since 1.44
/// @PANGO_ATTR_OVERLINE: whether the text has an overline ([struct@Pango.AttrInt]). Since 1.46
/// @PANGO_ATTR_OVERLINE_COLOR: overline color ([struct@Pango.AttrColor]). Since 1.46
/// @PANGO_ATTR_LINE_HEIGHT: line height factor ([struct@Pango.AttrFloat]). Since: 1.50
/// @PANGO_ATTR_ABSOLUTE_LINE_HEIGHT: line height ([struct@Pango.AttrInt]). Since: 1.50
/// @PANGO_ATTR_WORD: override segmentation to classify the range of the attribute as a single word ([struct@Pango.AttrInt]). Since 1.50
/// @PANGO_ATTR_SENTENCE: override segmentation to classify the range of the attribute as a single sentence ([struct@Pango.AttrInt]). Since 1.50
/// @PANGO_ATTR_BASELINE_SHIFT: baseline displacement ([struct@Pango.AttrInt]). Since 1.50
/// @PANGO_ATTR_FONT_SCALE: font-relative size change ([struct@Pango.AttrInt]). Since 1.50
///
/// The `PangoAttrType` distinguishes between different types of attributes.
///
/// Along with the predefined values, it is possible to allocate additional
/// values for custom attributes using [func@AttrType.register]. The predefined
/// values are given below. The type of structure used to store the attribute is
/// listed in parentheses after the description.
enum PangoAttrType {
  PANGO_ATTR_INVALID(0),
  PANGO_ATTR_LANGUAGE(1),
  PANGO_ATTR_FAMILY(2),
  PANGO_ATTR_STYLE(3),
  PANGO_ATTR_WEIGHT(4),
  PANGO_ATTR_VARIANT(5),
  PANGO_ATTR_STRETCH(6),
  PANGO_ATTR_SIZE(7),
  PANGO_ATTR_FONT_DESC(8),
  PANGO_ATTR_FOREGROUND(9),
  PANGO_ATTR_BACKGROUND(10),
  PANGO_ATTR_UNDERLINE(11),
  PANGO_ATTR_STRIKETHROUGH(12),
  PANGO_ATTR_RISE(13),
  PANGO_ATTR_SHAPE(14),
  PANGO_ATTR_SCALE(15),
  PANGO_ATTR_FALLBACK(16),
  PANGO_ATTR_LETTER_SPACING(17),
  PANGO_ATTR_UNDERLINE_COLOR(18),
  PANGO_ATTR_STRIKETHROUGH_COLOR(19),
  PANGO_ATTR_ABSOLUTE_SIZE(20),
  PANGO_ATTR_GRAVITY(21),
  PANGO_ATTR_GRAVITY_HINT(22),
  PANGO_ATTR_FONT_FEATURES(23),
  PANGO_ATTR_FOREGROUND_ALPHA(24),
  PANGO_ATTR_BACKGROUND_ALPHA(25),
  PANGO_ATTR_ALLOW_BREAKS(26),
  PANGO_ATTR_SHOW(27),
  PANGO_ATTR_INSERT_HYPHENS(28),
  PANGO_ATTR_OVERLINE(29),
  PANGO_ATTR_OVERLINE_COLOR(30),
  PANGO_ATTR_LINE_HEIGHT(31),
  PANGO_ATTR_ABSOLUTE_LINE_HEIGHT(32),
  PANGO_ATTR_TEXT_TRANSFORM(33),
  PANGO_ATTR_WORD(34),
  PANGO_ATTR_SENTENCE(35),
  PANGO_ATTR_BASELINE_SHIFT(36),
  PANGO_ATTR_FONT_SCALE(37);

  final int value;
  const PangoAttrType(this.value);

  static PangoAttrType fromValue(int value) => switch (value) {
        0 => PANGO_ATTR_INVALID,
        1 => PANGO_ATTR_LANGUAGE,
        2 => PANGO_ATTR_FAMILY,
        3 => PANGO_ATTR_STYLE,
        4 => PANGO_ATTR_WEIGHT,
        5 => PANGO_ATTR_VARIANT,
        6 => PANGO_ATTR_STRETCH,
        7 => PANGO_ATTR_SIZE,
        8 => PANGO_ATTR_FONT_DESC,
        9 => PANGO_ATTR_FOREGROUND,
        10 => PANGO_ATTR_BACKGROUND,
        11 => PANGO_ATTR_UNDERLINE,
        12 => PANGO_ATTR_STRIKETHROUGH,
        13 => PANGO_ATTR_RISE,
        14 => PANGO_ATTR_SHAPE,
        15 => PANGO_ATTR_SCALE,
        16 => PANGO_ATTR_FALLBACK,
        17 => PANGO_ATTR_LETTER_SPACING,
        18 => PANGO_ATTR_UNDERLINE_COLOR,
        19 => PANGO_ATTR_STRIKETHROUGH_COLOR,
        20 => PANGO_ATTR_ABSOLUTE_SIZE,
        21 => PANGO_ATTR_GRAVITY,
        22 => PANGO_ATTR_GRAVITY_HINT,
        23 => PANGO_ATTR_FONT_FEATURES,
        24 => PANGO_ATTR_FOREGROUND_ALPHA,
        25 => PANGO_ATTR_BACKGROUND_ALPHA,
        26 => PANGO_ATTR_ALLOW_BREAKS,
        27 => PANGO_ATTR_SHOW,
        28 => PANGO_ATTR_INSERT_HYPHENS,
        29 => PANGO_ATTR_OVERLINE,
        30 => PANGO_ATTR_OVERLINE_COLOR,
        31 => PANGO_ATTR_LINE_HEIGHT,
        32 => PANGO_ATTR_ABSOLUTE_LINE_HEIGHT,
        33 => PANGO_ATTR_TEXT_TRANSFORM,
        34 => PANGO_ATTR_WORD,
        35 => PANGO_ATTR_SENTENCE,
        36 => PANGO_ATTR_BASELINE_SHIFT,
        37 => PANGO_ATTR_FONT_SCALE,
        _ => throw ArgumentError("Unknown value for PangoAttrType: $value"),
      };
}

typedef PangoAttribute = _PangoAttribute;

/// PangoAttrClass:
/// @type: the type ID for this attribute
/// @copy: function to duplicate an attribute of this type
/// (see [method@Pango.Attribute.copy])
/// @destroy: function to free an attribute of this type
/// (see [method@Pango.Attribute.destroy])
/// @equal: function to check two attributes of this type for equality
/// (see [method@Pango.Attribute.equal])
///
/// The `PangoAttrClass` structure stores the type and operations for
/// a particular type of attribute.
///
/// The functions in this structure should not be called directly. Instead,
/// one should use the wrapper functions provided for `PangoAttribute`.
final class _PangoAttrClass extends ffi.Struct {
  @ffi.UnsignedInt()
  external int typeAsInt;

  PangoAttrType get type => PangoAttrType.fromValue(typeAsInt);

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<PangoAttribute> Function(
              ffi.Pointer<PangoAttribute> attr)>> copy;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<PangoAttribute> attr)>>
      destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<PangoAttribute> attr1,
              ffi.Pointer<PangoAttribute> attr2)>> equal;
}

typedef PangoAttrClass = _PangoAttrClass;

/// PangoAttribute:
/// @klass: the class structure holding information about the type of the attribute
/// @start_index: the start index of the range (in bytes).
/// @end_index: end index of the range (in bytes). The character at this index
/// is not included in the range.
///
/// The `PangoAttribute` structure represents the common portions of all
/// attributes.
///
/// Particular types of attributes include this structure as their initial
/// portion. The common portion of the attribute holds the range to which
/// the value in the type-specific part of the attribute applies and should
/// be initialized using [method@Pango.Attribute.init]. By default, an attribute
/// will have an all-inclusive range of [0,%G_MAXUINT].
final class _PangoAttribute extends ffi.Struct {
  external ffi.Pointer<PangoAttrClass> klass;

  @guint()
  external int start_index;

  @guint()
  external int end_index;
}

typedef PangoAttribute1 = _PangoAttribute;
typedef gconstpointer = ffi.Pointer<ffi.Void>;
typedef PangoAttrDataCopyFuncFunction = gpointer Function(
    gconstpointer user_data);

/// PangoAttrDataCopyFunc:
/// @user_data: user data to copy
///
/// Type of a function that can duplicate user data for an attribute.
///
/// Return value: new copy of @user_data.
typedef PangoAttrDataCopyFunc
    = ffi.Pointer<ffi.NativeFunction<PangoAttrDataCopyFuncFunction>>;
typedef GDestroyNotifyFunction = ffi.Void Function(gpointer data);
typedef DartGDestroyNotifyFunction = void Function(gpointer data);
typedef GDestroyNotify
    = ffi.Pointer<ffi.NativeFunction<GDestroyNotifyFunction>>;

/// PangoAttrShape:
/// @attr: the common portion of the attribute
/// @ink_rect: the ink rectangle to restrict to
/// @logical_rect: the logical rectangle to restrict to
/// @data: user data set (see [func@Pango.AttrShape.new_with_data])
/// @copy_func: copy function for the user data
/// @destroy_func: destroy function for the user data
///
/// The `PangoAttrShape` structure is used to represent attributes which
/// impose shape restrictions.
final class _PangoAttrShape extends ffi.Struct {
  external PangoAttribute1 attr;

  external PangoRectangle ink_rect;

  external PangoRectangle logical_rect;

  external gpointer data;

  external PangoAttrDataCopyFunc copy_func;

  external GDestroyNotify destroy_func;
}

typedef PangoAttrShape = _PangoAttrShape;
typedef PangoCairoShapeRendererFuncFunction = ffi.Void Function(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoAttrShape> attr,
    gboolean do_path,
    gpointer data);
typedef DartPangoCairoShapeRendererFuncFunction = void Function(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<PangoAttrShape> attr,
    Dartgint do_path,
    gpointer data);

/// PangoCairoShapeRendererFunc:
/// @cr: a Cairo context with current point set to where the shape should
/// be rendered
/// @attr: the %PANGO_ATTR_SHAPE to render
/// @do_path: whether only the shape path should be appended to current
/// path of @cr and no filling/stroking done.  This will be set
/// to %TRUE when called from pango_cairo_layout_path() and
/// pango_cairo_layout_line_path() rendering functions.
/// @data: (closure): user data passed to pango_cairo_context_set_shape_renderer()
///
/// Function type for rendering attributes of type %PANGO_ATTR_SHAPE
/// with Pango's Cairo renderer.
typedef PangoCairoShapeRendererFunc
    = ffi.Pointer<ffi.NativeFunction<PangoCairoShapeRendererFuncFunction>>;

/// cairo_font_type_t:
/// @CAIRO_FONT_TYPE_TOY: The font was created using cairo's toy font api (Since: 1.2)
/// @CAIRO_FONT_TYPE_FT: The font is of type FreeType (Since: 1.2)
/// @CAIRO_FONT_TYPE_WIN32: The font is of type Win32 (Since: 1.2)
/// @CAIRO_FONT_TYPE_QUARTZ: The font is of type Quartz (Since: 1.6, in 1.2 and
/// 1.4 it was named CAIRO_FONT_TYPE_ATSUI)
/// @CAIRO_FONT_TYPE_USER: The font was create using cairo's user font api (Since: 1.8)
/// @CAIRO_FONT_TYPE_DWRITE: The font is of type Win32 DWrite (Since: 1.18)
///
/// #cairo_font_type_t is used to describe the type of a given font
/// face or scaled font. The font types are also known as "font
/// backends" within cairo.
///
/// The type of a font face is determined by the function used to
/// create it, which will generally be of the form
/// <function>cairo_<emphasis>type</emphasis>_font_face_create(<!-- -->)</function>.
/// The font face type can be queried with cairo_font_face_get_type()
///
/// The various #cairo_font_face_t functions can be used with a font face
/// of any type.
///
/// The type of a scaled font is determined by the type of the font
/// face passed to cairo_scaled_font_create(). The scaled font type can
/// be queried with cairo_scaled_font_get_type()
///
/// The various #cairo_scaled_font_t functions can be used with scaled
/// fonts of any type, but some font backends also provide
/// type-specific functions that must only be called with a scaled font
/// of the appropriate type. These functions have names that begin with
/// <function>cairo_<emphasis>type</emphasis>_scaled_font(<!-- -->)</function>
/// such as cairo_ft_scaled_font_lock_face().
///
/// The behavior of calling a type-specific function with a scaled font
/// of the wrong type is undefined.
///
/// New entries may be added in future versions.
///
/// Since: 1.2
enum _cairo_font_type {
  CAIRO_FONT_TYPE_TOY(0),
  CAIRO_FONT_TYPE_FT(1),
  CAIRO_FONT_TYPE_WIN32(2),
  CAIRO_FONT_TYPE_QUARTZ(3),
  CAIRO_FONT_TYPE_USER(4),
  CAIRO_FONT_TYPE_DWRITE(5);

  final int value;
  const _cairo_font_type(this.value);

  static _cairo_font_type fromValue(int value) => switch (value) {
        0 => CAIRO_FONT_TYPE_TOY,
        1 => CAIRO_FONT_TYPE_FT,
        2 => CAIRO_FONT_TYPE_WIN32,
        3 => CAIRO_FONT_TYPE_QUARTZ,
        4 => CAIRO_FONT_TYPE_USER,
        5 => CAIRO_FONT_TYPE_DWRITE,
        _ => throw ArgumentError("Unknown value for _cairo_font_type: $value"),
      };
}

final class _cairo_scaled_font extends ffi.Opaque {}

/// cairo_scaled_font_t:
///
/// A #cairo_scaled_font_t is a font scaled to a particular size and device
/// resolution. A #cairo_scaled_font_t is most useful for low-level font
/// usage where a library or application wants to cache a reference
/// to a scaled font to speed up the computation of metrics.
///
/// There are various types of scaled fonts, depending on the
/// <firstterm>font backend</firstterm> they use. The type of a
/// scaled font can be queried using cairo_scaled_font_get_type().
///
/// Memory management of #cairo_scaled_font_t is done with
/// cairo_scaled_font_reference() and cairo_scaled_font_destroy().
///
/// Since: 1.0
typedef cairo_scaled_font_t = _cairo_scaled_font;

final class _cairo_font_options extends ffi.Opaque {}

/// cairo_font_options_t:
///
/// An opaque structure holding all options that are used when
/// rendering fonts.
///
/// Individual features of a #cairo_font_options_t can be set or
/// accessed using functions named
/// <function>cairo_font_options_set_<emphasis>feature_name</emphasis>()</function> and
/// <function>cairo_font_options_get_<emphasis>feature_name</emphasis>()</function>, like
/// cairo_font_options_set_antialias() and
/// cairo_font_options_get_antialias().
///
/// New features may be added to a #cairo_font_options_t in the
/// future.  For this reason, cairo_font_options_copy(),
/// cairo_font_options_equal(), cairo_font_options_merge(), and
/// cairo_font_options_hash() should be used to copy, check
/// for equality, merge, or compute a hash value of
/// #cairo_font_options_t objects.
///
/// Since: 1.0
typedef cairo_font_options_t = _cairo_font_options;

const int PANGO_SCALE = 1024;

const double PANGO_SCALE_XX_SMALL = 0.5787037037037;

const double PANGO_SCALE_X_SMALL = 0.6944444444444;

const double PANGO_SCALE_SMALL = 0.8333333333333;

const double PANGO_SCALE_MEDIUM = 1.0;

const double PANGO_SCALE_LARGE = 1.2;

const double PANGO_SCALE_X_LARGE = 1.44;

const double PANGO_SCALE_XX_LARGE = 1.728;

const int PANGO_GLYPH_EMPTY = 268435455;

const int PANGO_GLYPH_INVALID_INPUT = 4294967295;

const int PANGO_GLYPH_UNKNOWN_FLAG = 268435456;

const int PANGO_UNKNOWN_GLYPH_WIDTH = 10;

const int PANGO_UNKNOWN_GLYPH_HEIGHT = 14;
