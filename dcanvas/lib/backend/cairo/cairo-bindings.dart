// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Cairo Dart bindings
class Cairo {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Cairo(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Cairo.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void cairo_append_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_path_t> path,
  ) {
    return _cairo_append_path(
      cr,
      path,
    );
  }

  late final _cairo_append_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_path_t>)>>('cairo_append_path');
  late final _cairo_append_path = _cairo_append_pathPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_path_t>)>();

  void cairo_arc(
    ffi.Pointer<cairo_t> cr,
    double xc,
    double yc,
    double radius,
    double angle1,
    double angle2,
  ) {
    return _cairo_arc(
      cr,
      xc,
      yc,
      radius,
      angle1,
      angle2,
    );
  }

  late final _cairo_arcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double)>>('cairo_arc');
  late final _cairo_arc = _cairo_arcPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>, double, double, double, double, double)>();

  void cairo_arc_negative(
    ffi.Pointer<cairo_t> cr,
    double xc,
    double yc,
    double radius,
    double angle1,
    double angle2,
  ) {
    return _cairo_arc_negative(
      cr,
      xc,
      yc,
      radius,
      angle1,
      angle2,
    );
  }

  late final _cairo_arc_negativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double)>>('cairo_arc_negative');
  late final _cairo_arc_negative = _cairo_arc_negativePtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>, double, double, double, double, double)>();

  void cairo_clip(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_clip(
      cr,
    );
  }

  late final _cairo_clipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_clip');
  late final _cairo_clip =
      _cairo_clipPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_clip_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_clip_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_clip_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_clip_extents');
  late final _cairo_clip_extents = _cairo_clip_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_clip_preserve(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_clip_preserve(
      cr,
    );
  }

  late final _cairo_clip_preservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_clip_preserve');
  late final _cairo_clip_preserve =
      _cairo_clip_preservePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// XXX: NYI
  /// cairo_public void
  /// cairo_stroke_to_path (cairo_t *cr);
  void cairo_close_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_close_path(
      cr,
    );
  }

  late final _cairo_close_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_close_path');
  late final _cairo_close_path =
      _cairo_close_pathPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_rectangle_list_t> cairo_copy_clip_rectangle_list(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_clip_rectangle_list(
      cr,
    );
  }

  late final _cairo_copy_clip_rectangle_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_rectangle_list_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_copy_clip_rectangle_list');
  late final _cairo_copy_clip_rectangle_list =
      _cairo_copy_clip_rectangle_listPtr.asFunction<
          ffi.Pointer<cairo_rectangle_list_t> Function(ffi.Pointer<cairo_t>)>();

  void cairo_copy_page(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_page(
      cr,
    );
  }

  late final _cairo_copy_pagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_copy_page');
  late final _cairo_copy_page =
      _cairo_copy_pagePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_path_t> cairo_copy_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_path(
      cr,
    );
  }

  late final _cairo_copy_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_path_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_copy_path');
  late final _cairo_copy_path = _cairo_copy_pathPtr
      .asFunction<ffi.Pointer<cairo_path_t> Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_path_t> cairo_copy_path_flat(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_copy_path_flat(
      cr,
    );
  }

  late final _cairo_copy_path_flatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_path_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_copy_path_flat');
  late final _cairo_copy_path_flat = _cairo_copy_path_flatPtr
      .asFunction<ffi.Pointer<cairo_path_t> Function(ffi.Pointer<cairo_t>)>();

  /// Functions for manipulating state objects
  ffi.Pointer<cairo_t> cairo_create(
    ffi.Pointer<cairo_surface_t> target,
  ) {
    return _cairo_create(
      target,
    );
  }

  late final _cairo_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_t> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_create');
  late final _cairo_create = _cairo_createPtr.asFunction<
      ffi.Pointer<cairo_t> Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_curve_to(
    ffi.Pointer<cairo_t> cr,
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _cairo_curve_to(
      cr,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
    );
  }

  late final _cairo_curve_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_curve_to');
  late final _cairo_curve_to = _cairo_curve_toPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double,
          double, double)>();

  /// Functions to be used while debugging (not intended for use in production code)
  void cairo_debug_reset_static_data() {
    return _cairo_debug_reset_static_data();
  }

  late final _cairo_debug_reset_static_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'cairo_debug_reset_static_data');
  late final _cairo_debug_reset_static_data =
      _cairo_debug_reset_static_dataPtr.asFunction<void Function()>();

  void cairo_destroy(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_destroy(
      cr,
    );
  }

  late final _cairo_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_destroy');
  late final _cairo_destroy =
      _cairo_destroyPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  cairo_status1 cairo_device_acquire(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return cairo_status1.fromValue(_cairo_device_acquire(
      device,
    ));
  }

  late final _cairo_device_acquirePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_device_t>)>>('cairo_device_acquire');
  late final _cairo_device_acquire = _cairo_device_acquirePtr
      .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_destroy(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_destroy(
      device,
    );
  }

  late final _cairo_device_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_destroy');
  late final _cairo_device_destroy = _cairo_device_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_finish(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_finish(
      device,
    );
  }

  late final _cairo_device_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_finish');
  late final _cairo_device_finish = _cairo_device_finishPtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_flush(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_flush(
      device,
    );
  }

  late final _cairo_device_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_flush');
  late final _cairo_device_flush = _cairo_device_flushPtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  int cairo_device_get_reference_count(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_get_reference_count(
      device,
    );
  }

  late final _cairo_device_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_get_reference_count');
  late final _cairo_device_get_reference_count =
      _cairo_device_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  cairo_device_type cairo_device_get_type(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return cairo_device_type.fromValue(_cairo_device_get_type(
      device,
    ));
  }

  late final _cairo_device_get_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_get_type');
  late final _cairo_device_get_type = _cairo_device_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  ffi.Pointer<ffi.Void> cairo_device_get_user_data(
    ffi.Pointer<cairo_device_t> device,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_device_get_user_data(
      device,
      key,
    );
  }

  late final _cairo_device_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_device_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_device_get_user_data');
  late final _cairo_device_get_user_data =
      _cairo_device_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_device_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  double cairo_device_observer_elapsed(
    ffi.Pointer<cairo_device_t> abstract_device,
  ) {
    return _cairo_device_observer_elapsed(
      abstract_device,
    );
  }

  late final _cairo_device_observer_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_elapsed');
  late final _cairo_device_observer_elapsed = _cairo_device_observer_elapsedPtr
      .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_fill_elapsed(
    ffi.Pointer<cairo_device_t> abstract_device,
  ) {
    return _cairo_device_observer_fill_elapsed(
      abstract_device,
    );
  }

  late final _cairo_device_observer_fill_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_fill_elapsed');
  late final _cairo_device_observer_fill_elapsed =
      _cairo_device_observer_fill_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_glyphs_elapsed(
    ffi.Pointer<cairo_device_t> abstract_device,
  ) {
    return _cairo_device_observer_glyphs_elapsed(
      abstract_device,
    );
  }

  late final _cairo_device_observer_glyphs_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_glyphs_elapsed');
  late final _cairo_device_observer_glyphs_elapsed =
      _cairo_device_observer_glyphs_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_mask_elapsed(
    ffi.Pointer<cairo_device_t> abstract_device,
  ) {
    return _cairo_device_observer_mask_elapsed(
      abstract_device,
    );
  }

  late final _cairo_device_observer_mask_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_mask_elapsed');
  late final _cairo_device_observer_mask_elapsed =
      _cairo_device_observer_mask_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  double cairo_device_observer_paint_elapsed(
    ffi.Pointer<cairo_device_t> abstract_device,
  ) {
    return _cairo_device_observer_paint_elapsed(
      abstract_device,
    );
  }

  late final _cairo_device_observer_paint_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_paint_elapsed');
  late final _cairo_device_observer_paint_elapsed =
      _cairo_device_observer_paint_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  cairo_status1 cairo_device_observer_print(
    ffi.Pointer<cairo_device_t> abstract_device,
    cairo_write_func_t write_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return cairo_status1.fromValue(_cairo_device_observer_print(
      abstract_device,
      write_func,
      closure,
    ));
  }

  late final _cairo_device_observer_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_device_t>,
              cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_device_observer_print');
  late final _cairo_device_observer_print =
      _cairo_device_observer_printPtr.asFunction<
          int Function(ffi.Pointer<cairo_device_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>();

  double cairo_device_observer_stroke_elapsed(
    ffi.Pointer<cairo_device_t> abstract_device,
  ) {
    return _cairo_device_observer_stroke_elapsed(
      abstract_device,
    );
  }

  late final _cairo_device_observer_stroke_elapsedPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_observer_stroke_elapsed');
  late final _cairo_device_observer_stroke_elapsed =
      _cairo_device_observer_stroke_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_device_t>)>();

  /// Backend device manipulation
  ffi.Pointer<cairo_device_t> cairo_device_reference(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_reference(
      device,
    );
  }

  late final _cairo_device_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_device_t> Function(
              ffi.Pointer<cairo_device_t>)>>('cairo_device_reference');
  late final _cairo_device_reference = _cairo_device_referencePtr.asFunction<
      ffi.Pointer<cairo_device_t> Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_release(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return _cairo_device_release(
      device,
    );
  }

  late final _cairo_device_releasePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_device_t>)>>(
      'cairo_device_release');
  late final _cairo_device_release = _cairo_device_releasePtr
      .asFunction<void Function(ffi.Pointer<cairo_device_t>)>();

  cairo_status1 cairo_device_set_user_data(
    ffi.Pointer<cairo_device_t> device,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return cairo_status1.fromValue(_cairo_device_set_user_data(
      device,
      key,
      user_data,
      destroy,
    ));
  }

  late final _cairo_device_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_device_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_device_set_user_data');
  late final _cairo_device_set_user_data =
      _cairo_device_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_device_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  cairo_status1 cairo_device_status(
    ffi.Pointer<cairo_device_t> device,
  ) {
    return cairo_status1.fromValue(_cairo_device_status(
      device,
    ));
  }

  late final _cairo_device_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_device_t>)>>('cairo_device_status');
  late final _cairo_device_status = _cairo_device_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_device_t>)>();

  void cairo_device_to_user(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_device_to_user(
      cr,
      x,
      y,
    );
  }

  late final _cairo_device_to_userPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_device_to_user');
  late final _cairo_device_to_user = _cairo_device_to_userPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_device_to_user_distance(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dx,
    ffi.Pointer<ffi.Double> dy,
  ) {
    return _cairo_device_to_user_distance(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_device_to_user_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_device_to_user_distance');
  late final _cairo_device_to_user_distance =
      _cairo_device_to_user_distancePtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_fill(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_fill(
      cr,
    );
  }

  late final _cairo_fillPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_fill');
  late final _cairo_fill =
      _cairo_fillPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_fill_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_fill_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_fill_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_fill_extents');
  late final _cairo_fill_extents = _cairo_fill_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_fill_preserve(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_fill_preserve(
      cr,
    );
  }

  late final _cairo_fill_preservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_fill_preserve');
  late final _cairo_fill_preserve =
      _cairo_fill_preservePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_font_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_extents_t> extents,
  ) {
    return _cairo_font_extents(
      cr,
      extents,
    );
  }

  late final _cairo_font_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_extents_t>)>>('cairo_font_extents');
  late final _cairo_font_extents = _cairo_font_extentsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_extents_t>)>();

  void cairo_font_face_destroy(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_destroy(
      font_face,
    );
  }

  late final _cairo_font_face_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_font_face_destroy');
  late final _cairo_font_face_destroy = _cairo_font_face_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_font_face_t>)>();

  int cairo_font_face_get_reference_count(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_get_reference_count(
      font_face,
    );
  }

  late final _cairo_font_face_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_font_face_get_reference_count');
  late final _cairo_font_face_get_reference_count =
      _cairo_font_face_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  cairo_font_type cairo_font_face_get_type(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return cairo_font_type.fromValue(_cairo_font_face_get_type(
      font_face,
    ));
  }

  late final _cairo_font_face_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_font_face_t>)>>('cairo_font_face_get_type');
  late final _cairo_font_face_get_type = _cairo_font_face_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  ffi.Pointer<ffi.Void> cairo_font_face_get_user_data(
    ffi.Pointer<cairo_font_face_t> font_face,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_font_face_get_user_data(
      font_face,
      key,
    );
  }

  late final _cairo_font_face_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_font_face_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_font_face_get_user_data');
  late final _cairo_font_face_get_user_data =
      _cairo_font_face_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  /// Generic identifier for a font style
  ffi.Pointer<cairo_font_face_t> cairo_font_face_reference(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_font_face_reference(
      font_face,
    );
  }

  late final _cairo_font_face_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_font_face_t>)>>('cairo_font_face_reference');
  late final _cairo_font_face_reference =
      _cairo_font_face_referencePtr.asFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_status1 cairo_font_face_set_user_data(
    ffi.Pointer<cairo_font_face_t> font_face,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return cairo_status1.fromValue(_cairo_font_face_set_user_data(
      font_face,
      key,
      user_data,
      destroy,
    ));
  }

  late final _cairo_font_face_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_font_face_set_user_data');
  late final _cairo_font_face_set_user_data =
      _cairo_font_face_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  cairo_status1 cairo_font_face_status(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return cairo_status1.fromValue(_cairo_font_face_status(
      font_face,
    ));
  }

  late final _cairo_font_face_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_font_face_t>)>>('cairo_font_face_status');
  late final _cairo_font_face_status = _cairo_font_face_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  ffi.Pointer<cairo_font_options_t> cairo_font_options_copy(
    ffi.Pointer<cairo_font_options_t> original,
  ) {
    return _cairo_font_options_copy(
      original,
    );
  }

  late final _cairo_font_options_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_options_t> Function(
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_copy');
  late final _cairo_font_options_copy = _cairo_font_options_copyPtr.asFunction<
      ffi.Pointer<cairo_font_options_t> Function(
          ffi.Pointer<cairo_font_options_t>)>();

  ffi.Pointer<cairo_font_options_t> cairo_font_options_create() {
    return _cairo_font_options_create();
  }

  late final _cairo_font_options_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_font_options_t> Function()>>(
          'cairo_font_options_create');
  late final _cairo_font_options_create = _cairo_font_options_createPtr
      .asFunction<ffi.Pointer<cairo_font_options_t> Function()>();

  void cairo_font_options_destroy(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_destroy(
      options,
    );
  }

  late final _cairo_font_options_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_destroy');
  late final _cairo_font_options_destroy = _cairo_font_options_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_equal(
    ffi.Pointer<cairo_font_options_t> options,
    ffi.Pointer<cairo_font_options_t> other,
  ) {
    return _cairo_font_options_equal(
      options,
      other,
    );
  }

  late final _cairo_font_options_equalPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_equal');
  late final _cairo_font_options_equal =
      _cairo_font_options_equalPtr.asFunction<
          int Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  cairo_antialias cairo_font_options_get_antialias(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return cairo_antialias.fromValue(_cairo_font_options_get_antialias(
      options,
    ));
  }

  late final _cairo_font_options_get_antialiasPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_antialias');
  late final _cairo_font_options_get_antialias =
      _cairo_font_options_get_antialiasPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  cairo_color_mode cairo_font_options_get_color_mode(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return cairo_color_mode.fromValue(_cairo_font_options_get_color_mode(
      options,
    ));
  }

  late final _cairo_font_options_get_color_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_color_mode');
  late final _cairo_font_options_get_color_mode =
      _cairo_font_options_get_color_modePtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_get_color_palette(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_get_color_palette(
      options,
    );
  }

  late final _cairo_font_options_get_color_palettePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_color_palette');
  late final _cairo_font_options_get_color_palette =
      _cairo_font_options_get_color_palettePtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  cairo_status1 cairo_font_options_get_custom_palette_color(
    ffi.Pointer<cairo_font_options_t> options,
    int index,
    ffi.Pointer<ffi.Double> red,
    ffi.Pointer<ffi.Double> green,
    ffi.Pointer<ffi.Double> blue,
    ffi.Pointer<ffi.Double> alpha,
  ) {
    return cairo_status1.fromValue(_cairo_font_options_get_custom_palette_color(
      options,
      index,
      red,
      green,
      blue,
      alpha,
    ));
  }

  late final _cairo_font_options_get_custom_palette_colorPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<cairo_font_options_t>,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>>(
      'cairo_font_options_get_custom_palette_color');
  late final _cairo_font_options_get_custom_palette_color =
      _cairo_font_options_get_custom_palette_colorPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_font_options_t>,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  cairo_hint_metrics cairo_font_options_get_hint_metrics(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return cairo_hint_metrics.fromValue(_cairo_font_options_get_hint_metrics(
      options,
    ));
  }

  late final _cairo_font_options_get_hint_metricsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_hint_metrics');
  late final _cairo_font_options_get_hint_metrics =
      _cairo_font_options_get_hint_metricsPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  cairo_hint_style cairo_font_options_get_hint_style(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return cairo_hint_style.fromValue(_cairo_font_options_get_hint_style(
      options,
    ));
  }

  late final _cairo_font_options_get_hint_stylePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_hint_style');
  late final _cairo_font_options_get_hint_style =
      _cairo_font_options_get_hint_stylePtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  cairo_subpixel_order cairo_font_options_get_subpixel_order(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return cairo_subpixel_order
        .fromValue(_cairo_font_options_get_subpixel_order(
      options,
    ));
  }

  late final _cairo_font_options_get_subpixel_orderPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_subpixel_order');
  late final _cairo_font_options_get_subpixel_order =
      _cairo_font_options_get_subpixel_orderPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  ffi.Pointer<ffi.Char> cairo_font_options_get_variations(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_get_variations(
      options,
    );
  }

  late final _cairo_font_options_get_variationsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_font_options_get_variations');
  late final _cairo_font_options_get_variations =
      _cairo_font_options_get_variationsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_font_options_hash(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_font_options_hash(
      options,
    );
  }

  late final _cairo_font_options_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_hash');
  late final _cairo_font_options_hash = _cairo_font_options_hashPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  void cairo_font_options_merge(
    ffi.Pointer<cairo_font_options_t> options,
    ffi.Pointer<cairo_font_options_t> other,
  ) {
    return _cairo_font_options_merge(
      options,
      other,
    );
  }

  late final _cairo_font_options_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_merge');
  late final _cairo_font_options_merge =
      _cairo_font_options_mergePtr.asFunction<
          void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  void cairo_font_options_set_antialias(
    ffi.Pointer<cairo_font_options_t> options,
    cairo_antialias antialias,
  ) {
    return _cairo_font_options_set_antialias(
      options,
      antialias.value,
    );
  }

  late final _cairo_font_options_set_antialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.UnsignedInt)>>('cairo_font_options_set_antialias');
  late final _cairo_font_options_set_antialias =
      _cairo_font_options_set_antialiasPtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_color_mode(
    ffi.Pointer<cairo_font_options_t> options,
    cairo_color_mode color_mode,
  ) {
    return _cairo_font_options_set_color_mode(
      options,
      color_mode.value,
    );
  }

  late final _cairo_font_options_set_color_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.UnsignedInt)>>('cairo_font_options_set_color_mode');
  late final _cairo_font_options_set_color_mode =
      _cairo_font_options_set_color_modePtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_color_palette(
    ffi.Pointer<cairo_font_options_t> options,
    int palette_index,
  ) {
    return _cairo_font_options_set_color_palette(
      options,
      palette_index,
    );
  }

  late final _cairo_font_options_set_color_palettePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.UnsignedInt)>>('cairo_font_options_set_color_palette');
  late final _cairo_font_options_set_color_palette =
      _cairo_font_options_set_color_palettePtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_custom_palette_color(
    ffi.Pointer<cairo_font_options_t> options,
    int index,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_font_options_set_custom_palette_color(
      options,
      index,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_font_options_set_custom_palette_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_font_options_t>,
              ffi.UnsignedInt,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_font_options_set_custom_palette_color');
  late final _cairo_font_options_set_custom_palette_color =
      _cairo_font_options_set_custom_palette_colorPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_options_t>, int, double, double,
              double, double)>();

  void cairo_font_options_set_hint_metrics(
    ffi.Pointer<cairo_font_options_t> options,
    cairo_hint_metrics hint_metrics,
  ) {
    return _cairo_font_options_set_hint_metrics(
      options,
      hint_metrics.value,
    );
  }

  late final _cairo_font_options_set_hint_metricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.UnsignedInt)>>('cairo_font_options_set_hint_metrics');
  late final _cairo_font_options_set_hint_metrics =
      _cairo_font_options_set_hint_metricsPtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_hint_style(
    ffi.Pointer<cairo_font_options_t> options,
    cairo_hint_style hint_style,
  ) {
    return _cairo_font_options_set_hint_style(
      options,
      hint_style.value,
    );
  }

  late final _cairo_font_options_set_hint_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.UnsignedInt)>>('cairo_font_options_set_hint_style');
  late final _cairo_font_options_set_hint_style =
      _cairo_font_options_set_hint_stylePtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_subpixel_order(
    ffi.Pointer<cairo_font_options_t> options,
    cairo_subpixel_order subpixel_order,
  ) {
    return _cairo_font_options_set_subpixel_order(
      options,
      subpixel_order.value,
    );
  }

  late final _cairo_font_options_set_subpixel_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.UnsignedInt)>>('cairo_font_options_set_subpixel_order');
  late final _cairo_font_options_set_subpixel_order =
      _cairo_font_options_set_subpixel_orderPtr
          .asFunction<void Function(ffi.Pointer<cairo_font_options_t>, int)>();

  void cairo_font_options_set_variations(
    ffi.Pointer<cairo_font_options_t> options,
    ffi.Pointer<ffi.Char> variations,
  ) {
    return _cairo_font_options_set_variations(
      options,
      variations,
    );
  }

  late final _cairo_font_options_set_variationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_font_options_t>,
              ffi.Pointer<ffi.Char>)>>('cairo_font_options_set_variations');
  late final _cairo_font_options_set_variations =
      _cairo_font_options_set_variationsPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_font_options_t>, ffi.Pointer<ffi.Char>)>();

  cairo_status1 cairo_font_options_status(
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return cairo_status1.fromValue(_cairo_font_options_status(
      options,
    ));
  }

  late final _cairo_font_options_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_font_options_t>)>>('cairo_font_options_status');
  late final _cairo_font_options_status = _cairo_font_options_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_options_t>)>();

  int cairo_format_stride_for_width(
    cairo_format format,
    int width,
  ) {
    return _cairo_format_stride_for_width(
      format.value,
      width,
    );
  }

  late final _cairo_format_stride_for_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'cairo_format_stride_for_width');
  late final _cairo_format_stride_for_width =
      _cairo_format_stride_for_widthPtr.asFunction<int Function(int, int)>();

  cairo_antialias cairo_get_antialias(
    ffi.Pointer<cairo_t> cr,
  ) {
    return cairo_antialias.fromValue(_cairo_get_antialias(
      cr,
    ));
  }

  late final _cairo_get_antialiasPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<cairo_t>)>>(
      'cairo_get_antialias');
  late final _cairo_get_antialias =
      _cairo_get_antialiasPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  void cairo_get_current_point(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_get_current_point(
      cr,
      x,
      y,
    );
  }

  late final _cairo_get_current_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_get_current_point');
  late final _cairo_get_current_point = _cairo_get_current_pointPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_get_dash(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dashes,
    ffi.Pointer<ffi.Double> offset,
  ) {
    return _cairo_get_dash(
      cr,
      dashes,
      offset,
    );
  }

  late final _cairo_get_dashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_get_dash');
  late final _cairo_get_dash = _cairo_get_dashPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int cairo_get_dash_count(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_dash_count(
      cr,
    );
  }

  late final _cairo_get_dash_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_dash_count');
  late final _cairo_get_dash_count =
      _cairo_get_dash_countPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  cairo_fill_rule cairo_get_fill_rule(
    ffi.Pointer<cairo_t> cr,
  ) {
    return cairo_fill_rule.fromValue(_cairo_get_fill_rule(
      cr,
    ));
  }

  late final _cairo_get_fill_rulePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<cairo_t>)>>(
      'cairo_get_fill_rule');
  late final _cairo_get_fill_rule =
      _cairo_get_fill_rulePtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_font_face_t> cairo_get_font_face(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_font_face(
      cr,
    );
  }

  late final _cairo_get_font_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_font_face');
  late final _cairo_get_font_face = _cairo_get_font_facePtr.asFunction<
      ffi.Pointer<cairo_font_face_t> Function(ffi.Pointer<cairo_t>)>();

  void cairo_get_font_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_get_font_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_get_font_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_get_font_matrix');
  late final _cairo_get_font_matrix = _cairo_get_font_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_get_font_options(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_get_font_options(
      cr,
      options,
    );
  }

  late final _cairo_get_font_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_get_font_options');
  late final _cairo_get_font_options = _cairo_get_font_optionsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_options_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_get_group_target(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_group_target(
      cr,
    );
  }

  late final _cairo_get_group_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_group_target');
  late final _cairo_get_group_target = _cairo_get_group_targetPtr.asFunction<
      ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_t>)>();

  int cairo_get_hairline(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_hairline(
      cr,
    );
  }

  late final _cairo_get_hairlinePtr =
      _lookup<ffi.NativeFunction<cairo_bool_t Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_hairline');
  late final _cairo_get_hairline =
      _cairo_get_hairlinePtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  cairo_line_cap cairo_get_line_cap(
    ffi.Pointer<cairo_t> cr,
  ) {
    return cairo_line_cap.fromValue(_cairo_get_line_cap(
      cr,
    ));
  }

  late final _cairo_get_line_capPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<cairo_t>)>>(
      'cairo_get_line_cap');
  late final _cairo_get_line_cap =
      _cairo_get_line_capPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  cairo_line_join cairo_get_line_join(
    ffi.Pointer<cairo_t> cr,
  ) {
    return cairo_line_join.fromValue(_cairo_get_line_join(
      cr,
    ));
  }

  late final _cairo_get_line_joinPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<cairo_t>)>>(
      'cairo_get_line_join');
  late final _cairo_get_line_join =
      _cairo_get_line_joinPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  double cairo_get_line_width(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_line_width(
      cr,
    );
  }

  late final _cairo_get_line_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_line_width');
  late final _cairo_get_line_width = _cairo_get_line_widthPtr
      .asFunction<double Function(ffi.Pointer<cairo_t>)>();

  void cairo_get_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_get_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_get_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_get_matrix');
  late final _cairo_get_matrix = _cairo_get_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  double cairo_get_miter_limit(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_miter_limit(
      cr,
    );
  }

  late final _cairo_get_miter_limitPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_miter_limit');
  late final _cairo_get_miter_limit = _cairo_get_miter_limitPtr
      .asFunction<double Function(ffi.Pointer<cairo_t>)>();

  /// Query functions
  cairo_operator cairo_get_operator(
    ffi.Pointer<cairo_t> cr,
  ) {
    return cairo_operator.fromValue(_cairo_get_operator(
      cr,
    ));
  }

  late final _cairo_get_operatorPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<cairo_t>)>>(
      'cairo_get_operator');
  late final _cairo_get_operator =
      _cairo_get_operatorPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  int cairo_get_reference_count(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_reference_count(
      cr,
    );
  }

  late final _cairo_get_reference_countPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<cairo_t>)>>(
      'cairo_get_reference_count');
  late final _cairo_get_reference_count = _cairo_get_reference_countPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_scaled_font_t> cairo_get_scaled_font(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_scaled_font(
      cr,
    );
  }

  late final _cairo_get_scaled_fontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_scaled_font');
  late final _cairo_get_scaled_font = _cairo_get_scaled_fontPtr.asFunction<
      ffi.Pointer<cairo_scaled_font_t> Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_get_source(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_source(
      cr,
    );
  }

  late final _cairo_get_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_source');
  late final _cairo_get_source = _cairo_get_sourcePtr.asFunction<
      ffi.Pointer<cairo_pattern_t> Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_get_target(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_target(
      cr,
    );
  }

  late final _cairo_get_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_get_target');
  late final _cairo_get_target = _cairo_get_targetPtr.asFunction<
      ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_t>)>();

  double cairo_get_tolerance(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_get_tolerance(
      cr,
    );
  }

  late final _cairo_get_tolerancePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<cairo_t>)>>(
          'cairo_get_tolerance');
  late final _cairo_get_tolerance = _cairo_get_tolerancePtr
      .asFunction<double Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<ffi.Void> cairo_get_user_data(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_get_user_data(
      cr,
      key,
    );
  }

  late final _cairo_get_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_user_data_key_t>)>>('cairo_get_user_data');
  late final _cairo_get_user_data = _cairo_get_user_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<cairo_t>, ffi.Pointer<cairo_user_data_key_t>)>();

  ffi.Pointer<cairo_glyph_t> cairo_glyph_allocate(
    int num_glyphs,
  ) {
    return _cairo_glyph_allocate(
      num_glyphs,
    );
  }

  late final _cairo_glyph_allocatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_glyph_t> Function(ffi.Int)>>(
          'cairo_glyph_allocate');
  late final _cairo_glyph_allocate = _cairo_glyph_allocatePtr
      .asFunction<ffi.Pointer<cairo_glyph_t> Function(int)>();

  void cairo_glyph_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_glyph_extents(
      cr,
      glyphs,
      num_glyphs,
      extents,
    );
  }

  late final _cairo_glyph_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_glyph_t>,
              ffi.Int,
              ffi.Pointer<cairo_text_extents_t>)>>('cairo_glyph_extents');
  late final _cairo_glyph_extents = _cairo_glyph_extentsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>, int,
          ffi.Pointer<cairo_text_extents_t>)>();

  void cairo_glyph_free(
    ffi.Pointer<cairo_glyph_t> glyphs,
  ) {
    return _cairo_glyph_free(
      glyphs,
    );
  }

  late final _cairo_glyph_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_glyph_t>)>>(
      'cairo_glyph_free');
  late final _cairo_glyph_free = _cairo_glyph_freePtr
      .asFunction<void Function(ffi.Pointer<cairo_glyph_t>)>();

  void cairo_glyph_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
  ) {
    return _cairo_glyph_path(
      cr,
      glyphs,
      num_glyphs,
    );
  }

  late final _cairo_glyph_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>,
              ffi.Int)>>('cairo_glyph_path');
  late final _cairo_glyph_path = _cairo_glyph_pathPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>, int)>();

  int cairo_has_current_point(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_has_current_point(
      cr,
    );
  }

  late final _cairo_has_current_pointPtr =
      _lookup<ffi.NativeFunction<cairo_bool_t Function(ffi.Pointer<cairo_t>)>>(
          'cairo_has_current_point');
  late final _cairo_has_current_point = _cairo_has_current_pointPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>)>();

  void cairo_identity_matrix(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_identity_matrix(
      cr,
    );
  }

  late final _cairo_identity_matrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_identity_matrix');
  late final _cairo_identity_matrix = _cairo_identity_matrixPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// Image-surface functions
  ffi.Pointer<cairo_surface_t> cairo_image_surface_create(
    cairo_format format,
    int width,
    int height,
  ) {
    return _cairo_image_surface_create(
      format.value,
      width,
      height,
    );
  }

  late final _cairo_image_surface_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Int, ffi.Int, ffi.Int)>>('cairo_image_surface_create');
  late final _cairo_image_surface_create = _cairo_image_surface_createPtr
      .asFunction<ffi.Pointer<cairo_surface_t> Function(int, int, int)>();

  ffi.Pointer<cairo_surface_t> cairo_image_surface_create_for_data(
    ffi.Pointer<ffi.UnsignedChar> data,
    cairo_format format,
    int width,
    int height,
    int stride,
  ) {
    return _cairo_image_surface_create_for_data(
      data,
      format.value,
      width,
      height,
      stride,
    );
  }

  late final _cairo_image_surface_create_for_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('cairo_image_surface_create_for_data');
  late final _cairo_image_surface_create_for_data =
      _cairo_image_surface_create_for_dataPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.UnsignedChar>, int, int, int, int)>();

  ffi.Pointer<cairo_surface_t> cairo_image_surface_create_from_png(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _cairo_image_surface_create_from_png(
      filename,
    );
  }

  late final _cairo_image_surface_create_from_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<ffi.Char>)>>('cairo_image_surface_create_from_png');
  late final _cairo_image_surface_create_from_png =
      _cairo_image_surface_create_from_pngPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cairo_surface_t> cairo_image_surface_create_from_png_stream(
    cairo_read_func_t read_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return _cairo_image_surface_create_from_png_stream(
      read_func,
      closure,
    );
  }

  late final _cairo_image_surface_create_from_png_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_surface_t> Function(
                  cairo_read_func_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_image_surface_create_from_png_stream');
  late final _cairo_image_surface_create_from_png_stream =
      _cairo_image_surface_create_from_png_streamPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              cairo_read_func_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.UnsignedChar> cairo_image_surface_get_data(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_data(
      surface,
    );
  }

  late final _cairo_image_surface_get_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_image_surface_get_data');
  late final _cairo_image_surface_get_data =
      _cairo_image_surface_get_dataPtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<cairo_surface_t>)>();

  cairo_format cairo_image_surface_get_format(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return cairo_format.fromValue(_cairo_image_surface_get_format(
      surface,
    ));
  }

  late final _cairo_image_surface_get_formatPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_format');
  late final _cairo_image_surface_get_format =
      _cairo_image_surface_get_formatPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_image_surface_get_height(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_height(
      surface,
    );
  }

  late final _cairo_image_surface_get_heightPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_height');
  late final _cairo_image_surface_get_height =
      _cairo_image_surface_get_heightPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_image_surface_get_stride(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_stride(
      surface,
    );
  }

  late final _cairo_image_surface_get_stridePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_stride');
  late final _cairo_image_surface_get_stride =
      _cairo_image_surface_get_stridePtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_image_surface_get_width(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_image_surface_get_width(
      surface,
    );
  }

  late final _cairo_image_surface_get_widthPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_image_surface_get_width');
  late final _cairo_image_surface_get_width = _cairo_image_surface_get_widthPtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_in_clip(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_in_clip(
      cr,
      x,
      y,
    );
  }

  late final _cairo_in_clipPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_in_clip');
  late final _cairo_in_clip = _cairo_in_clipPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>, double, double)>();

  int cairo_in_fill(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_in_fill(
      cr,
      x,
      y,
    );
  }

  late final _cairo_in_fillPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_in_fill');
  late final _cairo_in_fill = _cairo_in_fillPtr
      .asFunction<int Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Insideness testing
  int cairo_in_stroke(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_in_stroke(
      cr,
      x,
      y,
    );
  }

  late final _cairo_in_strokePtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_in_stroke');
  late final _cairo_in_stroke = _cairo_in_strokePtr
      .asFunction<int Function(ffi.Pointer<cairo_t>, double, double)>();

  void cairo_line_to(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_line_to(
      cr,
      x,
      y,
    );
  }

  late final _cairo_line_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_line_to');
  late final _cairo_line_to = _cairo_line_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  void cairo_mask(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_mask(
      cr,
      pattern,
    );
  }

  late final _cairo_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_pattern_t>)>>('cairo_mask');
  late final _cairo_mask = _cairo_maskPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_pattern_t>)>();

  void cairo_mask_surface(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_surface_t> surface,
    double surface_x,
    double surface_y,
  ) {
    return _cairo_mask_surface(
      cr,
      surface,
      surface_x,
      surface_y,
    );
  }

  late final _cairo_mask_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>,
              ffi.Double, ffi.Double)>>('cairo_mask_surface');
  late final _cairo_mask_surface = _cairo_mask_surfacePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>, double,
          double)>();

  /// Matrix functions
  void cairo_matrix_init(
    ffi.Pointer<cairo_matrix_t> matrix,
    double xx,
    double yx,
    double xy,
    double yy,
    double x0,
    double y0,
  ) {
    return _cairo_matrix_init(
      matrix,
      xx,
      yx,
      xy,
      yy,
      x0,
      y0,
    );
  }

  late final _cairo_matrix_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_matrix_init');
  late final _cairo_matrix_init = _cairo_matrix_initPtr.asFunction<
      void Function(ffi.Pointer<cairo_matrix_t>, double, double, double, double,
          double, double)>();

  void cairo_matrix_init_identity(
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_matrix_init_identity(
      matrix,
    );
  }

  late final _cairo_matrix_init_identityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_matrix_t>)>>(
      'cairo_matrix_init_identity');
  late final _cairo_matrix_init_identity = _cairo_matrix_init_identityPtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>)>();

  void cairo_matrix_init_rotate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double radians,
  ) {
    return _cairo_matrix_init_rotate(
      matrix,
      radians,
    );
  }

  late final _cairo_matrix_init_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>,
              ffi.Double)>>('cairo_matrix_init_rotate');
  late final _cairo_matrix_init_rotate = _cairo_matrix_init_rotatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double)>();

  void cairo_matrix_init_scale(
    ffi.Pointer<cairo_matrix_t> matrix,
    double sx,
    double sy,
  ) {
    return _cairo_matrix_init_scale(
      matrix,
      sx,
      sy,
    );
  }

  late final _cairo_matrix_init_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_init_scale');
  late final _cairo_matrix_init_scale = _cairo_matrix_init_scalePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  void cairo_matrix_init_translate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double tx,
    double ty,
  ) {
    return _cairo_matrix_init_translate(
      matrix,
      tx,
      ty,
    );
  }

  late final _cairo_matrix_init_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_init_translate');
  late final _cairo_matrix_init_translate = _cairo_matrix_init_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  cairo_status1 cairo_matrix_invert(
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return cairo_status1.fromValue(_cairo_matrix_invert(
      matrix,
    ));
  }

  late final _cairo_matrix_invertPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_matrix_t>)>>('cairo_matrix_invert');
  late final _cairo_matrix_invert = _cairo_matrix_invertPtr
      .asFunction<int Function(ffi.Pointer<cairo_matrix_t>)>();

  void cairo_matrix_multiply(
    ffi.Pointer<cairo_matrix_t> result,
    ffi.Pointer<cairo_matrix_t> a,
    ffi.Pointer<cairo_matrix_t> b,
  ) {
    return _cairo_matrix_multiply(
      result,
      a,
      b,
    );
  }

  late final _cairo_matrix_multiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_matrix_multiply');
  late final _cairo_matrix_multiply = _cairo_matrix_multiplyPtr.asFunction<
      void Function(ffi.Pointer<cairo_matrix_t>, ffi.Pointer<cairo_matrix_t>,
          ffi.Pointer<cairo_matrix_t>)>();

  void cairo_matrix_rotate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double radians,
  ) {
    return _cairo_matrix_rotate(
      matrix,
      radians,
    );
  }

  late final _cairo_matrix_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>, ffi.Double)>>('cairo_matrix_rotate');
  late final _cairo_matrix_rotate = _cairo_matrix_rotatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double)>();

  void cairo_matrix_scale(
    ffi.Pointer<cairo_matrix_t> matrix,
    double sx,
    double sy,
  ) {
    return _cairo_matrix_scale(
      matrix,
      sx,
      sy,
    );
  }

  late final _cairo_matrix_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_scale');
  late final _cairo_matrix_scale = _cairo_matrix_scalePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  void cairo_matrix_transform_distance(
    ffi.Pointer<cairo_matrix_t> matrix,
    ffi.Pointer<ffi.Double> dx,
    ffi.Pointer<ffi.Double> dy,
  ) {
    return _cairo_matrix_transform_distance(
      matrix,
      dx,
      dy,
    );
  }

  late final _cairo_matrix_transform_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_matrix_transform_distance');
  late final _cairo_matrix_transform_distance =
      _cairo_matrix_transform_distancePtr.asFunction<
          void Function(ffi.Pointer<cairo_matrix_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_matrix_transform_point(
    ffi.Pointer<cairo_matrix_t> matrix,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_matrix_transform_point(
      matrix,
      x,
      y,
    );
  }

  late final _cairo_matrix_transform_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_matrix_transform_point');
  late final _cairo_matrix_transform_point =
      _cairo_matrix_transform_pointPtr.asFunction<
          void Function(ffi.Pointer<cairo_matrix_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_matrix_translate(
    ffi.Pointer<cairo_matrix_t> matrix,
    double tx,
    double ty,
  ) {
    return _cairo_matrix_translate(
      matrix,
      tx,
      ty,
    );
  }

  late final _cairo_matrix_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_matrix_t>, ffi.Double,
              ffi.Double)>>('cairo_matrix_translate');
  late final _cairo_matrix_translate = _cairo_matrix_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_matrix_t>, double, double)>();

  void cairo_mesh_pattern_begin_patch(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_mesh_pattern_begin_patch(
      pattern,
    );
  }

  late final _cairo_mesh_pattern_begin_patchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_mesh_pattern_begin_patch');
  late final _cairo_mesh_pattern_begin_patch =
      _cairo_mesh_pattern_begin_patchPtr
          .asFunction<void Function(ffi.Pointer<cairo_pattern_t>)>();

  void cairo_mesh_pattern_curve_to(
    ffi.Pointer<cairo_pattern_t> pattern,
    double x1,
    double y1,
    double x2,
    double y2,
    double x3,
    double y3,
  ) {
    return _cairo_mesh_pattern_curve_to(
      pattern,
      x1,
      y1,
      x2,
      y2,
      x3,
      y3,
    );
  }

  late final _cairo_mesh_pattern_curve_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_curve_to');
  late final _cairo_mesh_pattern_curve_to =
      _cairo_mesh_pattern_curve_toPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double, double,
              double, double, double)>();

  void cairo_mesh_pattern_end_patch(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_mesh_pattern_end_patch(
      pattern,
    );
  }

  late final _cairo_mesh_pattern_end_patchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_mesh_pattern_end_patch');
  late final _cairo_mesh_pattern_end_patch = _cairo_mesh_pattern_end_patchPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_status1 cairo_mesh_pattern_get_control_point(
    ffi.Pointer<cairo_pattern_t> pattern,
    int patch_num,
    int point_num,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return cairo_status1.fromValue(_cairo_mesh_pattern_get_control_point(
      pattern,
      patch_num,
      point_num,
      x,
      y,
    ));
  }

  late final _cairo_mesh_pattern_get_control_pointPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<cairo_pattern_t>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>>(
      'cairo_mesh_pattern_get_control_point');
  late final _cairo_mesh_pattern_get_control_point =
      _cairo_mesh_pattern_get_control_pointPtr.asFunction<
          int Function(ffi.Pointer<cairo_pattern_t>, int, int,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  cairo_status1 cairo_mesh_pattern_get_corner_color_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    int patch_num,
    int corner_num,
    ffi.Pointer<ffi.Double> red,
    ffi.Pointer<ffi.Double> green,
    ffi.Pointer<ffi.Double> blue,
    ffi.Pointer<ffi.Double> alpha,
  ) {
    return cairo_status1.fromValue(_cairo_mesh_pattern_get_corner_color_rgba(
      pattern,
      patch_num,
      corner_num,
      red,
      green,
      blue,
      alpha,
    ));
  }

  late final _cairo_mesh_pattern_get_corner_color_rgbaPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<cairo_pattern_t>,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>,
                  ffi.Pointer<ffi.Double>)>>(
      'cairo_mesh_pattern_get_corner_color_rgba');
  late final _cairo_mesh_pattern_get_corner_color_rgba =
      _cairo_mesh_pattern_get_corner_color_rgbaPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              int,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  cairo_status1 cairo_mesh_pattern_get_patch_count(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.UnsignedInt> count,
  ) {
    return cairo_status1.fromValue(_cairo_mesh_pattern_get_patch_count(
      pattern,
      count,
    ));
  }

  late final _cairo_mesh_pattern_get_patch_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.UnsignedInt>)>>(
      'cairo_mesh_pattern_get_patch_count');
  late final _cairo_mesh_pattern_get_patch_count =
      _cairo_mesh_pattern_get_patch_countPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<cairo_path_t> cairo_mesh_pattern_get_path(
    ffi.Pointer<cairo_pattern_t> pattern,
    int patch_num,
  ) {
    return _cairo_mesh_pattern_get_path(
      pattern,
      patch_num,
    );
  }

  late final _cairo_mesh_pattern_get_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_path_t> Function(ffi.Pointer<cairo_pattern_t>,
              ffi.UnsignedInt)>>('cairo_mesh_pattern_get_path');
  late final _cairo_mesh_pattern_get_path =
      _cairo_mesh_pattern_get_pathPtr.asFunction<
          ffi.Pointer<cairo_path_t> Function(
              ffi.Pointer<cairo_pattern_t>, int)>();

  void cairo_mesh_pattern_line_to(
    ffi.Pointer<cairo_pattern_t> pattern,
    double x,
    double y,
  ) {
    return _cairo_mesh_pattern_line_to(
      pattern,
      x,
      y,
    );
  }

  late final _cairo_mesh_pattern_line_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>, ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_line_to');
  late final _cairo_mesh_pattern_line_to =
      _cairo_mesh_pattern_line_toPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double)>();

  void cairo_mesh_pattern_move_to(
    ffi.Pointer<cairo_pattern_t> pattern,
    double x,
    double y,
  ) {
    return _cairo_mesh_pattern_move_to(
      pattern,
      x,
      y,
    );
  }

  late final _cairo_mesh_pattern_move_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>, ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_move_to');
  late final _cairo_mesh_pattern_move_to =
      _cairo_mesh_pattern_move_toPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double)>();

  void cairo_mesh_pattern_set_control_point(
    ffi.Pointer<cairo_pattern_t> pattern,
    int point_num,
    double x,
    double y,
  ) {
    return _cairo_mesh_pattern_set_control_point(
      pattern,
      point_num,
      x,
      y,
    );
  }

  late final _cairo_mesh_pattern_set_control_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>, ffi.UnsignedInt,
              ffi.Double, ffi.Double)>>('cairo_mesh_pattern_set_control_point');
  late final _cairo_mesh_pattern_set_control_point =
      _cairo_mesh_pattern_set_control_pointPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, int, double, double)>();

  void cairo_mesh_pattern_set_corner_color_rgb(
    ffi.Pointer<cairo_pattern_t> pattern,
    int corner_num,
    double red,
    double green,
    double blue,
  ) {
    return _cairo_mesh_pattern_set_corner_color_rgb(
      pattern,
      corner_num,
      red,
      green,
      blue,
    );
  }

  late final _cairo_mesh_pattern_set_corner_color_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.UnsignedInt,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_set_corner_color_rgb');
  late final _cairo_mesh_pattern_set_corner_color_rgb =
      _cairo_mesh_pattern_set_corner_color_rgbPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, int, double, double, double)>();

  void cairo_mesh_pattern_set_corner_color_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    int corner_num,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_mesh_pattern_set_corner_color_rgba(
      pattern,
      corner_num,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_mesh_pattern_set_corner_color_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.UnsignedInt,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_mesh_pattern_set_corner_color_rgba');
  late final _cairo_mesh_pattern_set_corner_color_rgba =
      _cairo_mesh_pattern_set_corner_color_rgbaPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, int, double, double,
              double, double)>();

  void cairo_move_to(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
  ) {
    return _cairo_move_to(
      cr,
      x,
      y,
    );
  }

  late final _cairo_move_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_move_to');
  late final _cairo_move_to = _cairo_move_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Path creation functions
  void cairo_new_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_new_path(
      cr,
    );
  }

  late final _cairo_new_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_new_path');
  late final _cairo_new_path =
      _cairo_new_pathPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_new_sub_path(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_new_sub_path(
      cr,
    );
  }

  late final _cairo_new_sub_pathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_new_sub_path');
  late final _cairo_new_sub_path =
      _cairo_new_sub_pathPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// Painting functions
  void cairo_paint(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_paint(
      cr,
    );
  }

  late final _cairo_paintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_paint');
  late final _cairo_paint =
      _cairo_paintPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_paint_with_alpha(
    ffi.Pointer<cairo_t> cr,
    double alpha,
  ) {
    return _cairo_paint_with_alpha(
      cr,
      alpha,
    );
  }

  late final _cairo_paint_with_alphaPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double)>>(
      'cairo_paint_with_alpha');
  late final _cairo_paint_with_alpha = _cairo_paint_with_alphaPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_path_destroy(
    ffi.Pointer<cairo_path_t> path,
  ) {
    return _cairo_path_destroy(
      path,
    );
  }

  late final _cairo_path_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_path_t>)>>(
          'cairo_path_destroy');
  late final _cairo_path_destroy = _cairo_path_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_path_t>)>();

  void cairo_path_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_path_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_path_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_path_extents');
  late final _cairo_path_extents = _cairo_path_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_pattern_add_color_stop_rgb(
    ffi.Pointer<cairo_pattern_t> pattern,
    double offset,
    double red,
    double green,
    double blue,
  ) {
    return _cairo_pattern_add_color_stop_rgb(
      pattern,
      offset,
      red,
      green,
      blue,
    );
  }

  late final _cairo_pattern_add_color_stop_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_pattern_add_color_stop_rgb');
  late final _cairo_pattern_add_color_stop_rgb =
      _cairo_pattern_add_color_stop_rgbPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, double, double, double, double)>();

  void cairo_pattern_add_color_stop_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    double offset,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_pattern_add_color_stop_rgba(
      pattern,
      offset,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_pattern_add_color_stop_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_pattern_add_color_stop_rgba');
  late final _cairo_pattern_add_color_stop_rgba =
      _cairo_pattern_add_color_stop_rgbaPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, double, double, double,
              double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_for_surface(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_pattern_create_for_surface(
      surface,
    );
  }

  late final _cairo_pattern_create_for_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_pattern_t> Function(
                  ffi.Pointer<cairo_surface_t>)>>(
      'cairo_pattern_create_for_surface');
  late final _cairo_pattern_create_for_surface =
      _cairo_pattern_create_for_surfacePtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_linear(
    double x0,
    double y0,
    double x1,
    double y1,
  ) {
    return _cairo_pattern_create_linear(
      x0,
      y0,
      x1,
      y1,
    );
  }

  late final _cairo_pattern_create_linearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_pattern_create_linear');
  late final _cairo_pattern_create_linear =
      _cairo_pattern_create_linearPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              double, double, double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_mesh() {
    return _cairo_pattern_create_mesh();
  }

  late final _cairo_pattern_create_meshPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_pattern_t> Function()>>(
          'cairo_pattern_create_mesh');
  late final _cairo_pattern_create_mesh = _cairo_pattern_create_meshPtr
      .asFunction<ffi.Pointer<cairo_pattern_t> Function()>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_radial(
    double cx0,
    double cy0,
    double radius0,
    double cx1,
    double cy1,
    double radius1,
  ) {
    return _cairo_pattern_create_radial(
      cx0,
      cy0,
      radius0,
      cx1,
      cy1,
      radius1,
    );
  }

  late final _cairo_pattern_create_radialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_pattern_create_radial');
  late final _cairo_pattern_create_radial =
      _cairo_pattern_create_radialPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              double, double, double, double, double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_raster_source(
    ffi.Pointer<ffi.Void> user_data,
    cairo_content content,
    int width,
    int height,
  ) {
    return _cairo_pattern_create_raster_source(
      user_data,
      content.value,
      width,
      height,
    );
  }

  late final _cairo_pattern_create_raster_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int)>>('cairo_pattern_create_raster_source');
  late final _cairo_pattern_create_raster_source =
      _cairo_pattern_create_raster_sourcePtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// Pattern creation functions
  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_rgb(
    double red,
    double green,
    double blue,
  ) {
    return _cairo_pattern_create_rgb(
      red,
      green,
      blue,
    );
  }

  late final _cairo_pattern_create_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Double, ffi.Double, ffi.Double)>>('cairo_pattern_create_rgb');
  late final _cairo_pattern_create_rgb =
      _cairo_pattern_create_rgbPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(double, double, double)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_create_rgba(
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_pattern_create_rgba(
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_pattern_create_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_pattern_create_rgba');
  late final _cairo_pattern_create_rgba =
      _cairo_pattern_create_rgbaPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              double, double, double, double)>();

  void cairo_pattern_destroy(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_destroy(
      pattern,
    );
  }

  late final _cairo_pattern_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_destroy');
  late final _cairo_pattern_destroy = _cairo_pattern_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_status1 cairo_pattern_get_color_stop_count(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Int> count,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_get_color_stop_count(
      pattern,
      count,
    ));
  }

  late final _cairo_pattern_get_color_stop_countPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Int>)>>('cairo_pattern_get_color_stop_count');
  late final _cairo_pattern_get_color_stop_count =
      _cairo_pattern_get_color_stop_countPtr.asFunction<
          int Function(ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Int>)>();

  cairo_status1 cairo_pattern_get_color_stop_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    int index,
    ffi.Pointer<ffi.Double> offset,
    ffi.Pointer<ffi.Double> red,
    ffi.Pointer<ffi.Double> green,
    ffi.Pointer<ffi.Double> blue,
    ffi.Pointer<ffi.Double> alpha,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_get_color_stop_rgba(
      pattern,
      index,
      offset,
      red,
      green,
      blue,
      alpha,
    ));
  }

  late final _cairo_pattern_get_color_stop_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_color_stop_rgba');
  late final _cairo_pattern_get_color_stop_rgba =
      _cairo_pattern_get_color_stop_rgbaPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              int,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  cairo_dither cairo_pattern_get_dither(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return cairo_dither.fromValue(_cairo_pattern_get_dither(
      pattern,
    ));
  }

  late final _cairo_pattern_get_ditherPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>)>>('cairo_pattern_get_dither');
  late final _cairo_pattern_get_dither = _cairo_pattern_get_ditherPtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_extend cairo_pattern_get_extend(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return cairo_extend.fromValue(_cairo_pattern_get_extend(
      pattern,
    ));
  }

  late final _cairo_pattern_get_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>)>>('cairo_pattern_get_extend');
  late final _cairo_pattern_get_extend = _cairo_pattern_get_extendPtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_filter cairo_pattern_get_filter(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return cairo_filter.fromValue(_cairo_pattern_get_filter(
      pattern,
    ));
  }

  late final _cairo_pattern_get_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>)>>('cairo_pattern_get_filter');
  late final _cairo_pattern_get_filter = _cairo_pattern_get_filterPtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_status1 cairo_pattern_get_linear_points(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> y0,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_get_linear_points(
      pattern,
      x0,
      y0,
      x1,
      y1,
    ));
  }

  late final _cairo_pattern_get_linear_pointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_linear_points');
  late final _cairo_pattern_get_linear_points =
      _cairo_pattern_get_linear_pointsPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_pattern_get_matrix(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_pattern_get_matrix(
      pattern,
      matrix,
    );
  }

  late final _cairo_pattern_get_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_pattern_get_matrix');
  late final _cairo_pattern_get_matrix =
      _cairo_pattern_get_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, ffi.Pointer<cairo_matrix_t>)>();

  cairo_status1 cairo_pattern_get_radial_circles(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> y0,
    ffi.Pointer<ffi.Double> r0,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> r1,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_get_radial_circles(
      pattern,
      x0,
      y0,
      r0,
      x1,
      y1,
      r1,
    ));
  }

  late final _cairo_pattern_get_radial_circlesPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_radial_circles');
  late final _cairo_pattern_get_radial_circles =
      _cairo_pattern_get_radial_circlesPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int cairo_pattern_get_reference_count(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_get_reference_count(
      pattern,
    );
  }

  late final _cairo_pattern_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_pattern_get_reference_count');
  late final _cairo_pattern_get_reference_count =
      _cairo_pattern_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_status1 cairo_pattern_get_rgba(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Double> red,
    ffi.Pointer<ffi.Double> green,
    ffi.Pointer<ffi.Double> blue,
    ffi.Pointer<ffi.Double> alpha,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_get_rgba(
      pattern,
      red,
      green,
      blue,
      alpha,
    ));
  }

  late final _cairo_pattern_get_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_pattern_get_rgba');
  late final _cairo_pattern_get_rgba = _cairo_pattern_get_rgbaPtr.asFunction<
      int Function(
          ffi.Pointer<cairo_pattern_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  cairo_status1 cairo_pattern_get_surface(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Pointer<cairo_surface_t>> surface,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_get_surface(
      pattern,
      surface,
    ));
  }

  late final _cairo_pattern_get_surfacePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_pattern_t>,
                  ffi.Pointer<ffi.Pointer<cairo_surface_t>>)>>(
      'cairo_pattern_get_surface');
  late final _cairo_pattern_get_surface =
      _cairo_pattern_get_surfacePtr.asFunction<
          int Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<ffi.Pointer<cairo_surface_t>>)>();

  cairo_pattern_type cairo_pattern_get_type(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return cairo_pattern_type.fromValue(_cairo_pattern_get_type(
      pattern,
    ));
  }

  late final _cairo_pattern_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>)>>('cairo_pattern_get_type');
  late final _cairo_pattern_get_type = _cairo_pattern_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  ffi.Pointer<ffi.Void> cairo_pattern_get_user_data(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_pattern_get_user_data(
      pattern,
      key,
    );
  }

  late final _cairo_pattern_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_pattern_get_user_data');
  late final _cairo_pattern_get_user_data =
      _cairo_pattern_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_pattern_reference(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_pattern_reference(
      pattern,
    );
  }

  late final _cairo_pattern_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_pattern_t>)>>('cairo_pattern_reference');
  late final _cairo_pattern_reference = _cairo_pattern_referencePtr.asFunction<
      ffi.Pointer<cairo_pattern_t> Function(ffi.Pointer<cairo_pattern_t>)>();

  void cairo_pattern_set_dither(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_dither dither,
  ) {
    return _cairo_pattern_set_dither(
      pattern,
      dither.value,
    );
  }

  late final _cairo_pattern_set_ditherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.UnsignedInt)>>('cairo_pattern_set_dither');
  late final _cairo_pattern_set_dither = _cairo_pattern_set_ditherPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>, int)>();

  void cairo_pattern_set_extend(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_extend extend,
  ) {
    return _cairo_pattern_set_extend(
      pattern,
      extend.value,
    );
  }

  late final _cairo_pattern_set_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.UnsignedInt)>>('cairo_pattern_set_extend');
  late final _cairo_pattern_set_extend = _cairo_pattern_set_extendPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>, int)>();

  void cairo_pattern_set_filter(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_filter filter,
  ) {
    return _cairo_pattern_set_filter(
      pattern,
      filter.value,
    );
  }

  late final _cairo_pattern_set_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.UnsignedInt)>>('cairo_pattern_set_filter');
  late final _cairo_pattern_set_filter = _cairo_pattern_set_filterPtr
      .asFunction<void Function(ffi.Pointer<cairo_pattern_t>, int)>();

  void cairo_pattern_set_matrix(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_pattern_set_matrix(
      pattern,
      matrix,
    );
  }

  late final _cairo_pattern_set_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_pattern_set_matrix');
  late final _cairo_pattern_set_matrix =
      _cairo_pattern_set_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, ffi.Pointer<cairo_matrix_t>)>();

  cairo_status1 cairo_pattern_set_user_data(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_set_user_data(
      pattern,
      key,
      user_data,
      destroy,
    ));
  }

  late final _cairo_pattern_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_pattern_set_user_data');
  late final _cairo_pattern_set_user_data =
      _cairo_pattern_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  cairo_status1 cairo_pattern_status(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return cairo_status1.fromValue(_cairo_pattern_status(
      pattern,
    ));
  }

  late final _cairo_pattern_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_pattern_t>)>>('cairo_pattern_status');
  late final _cairo_pattern_status = _cairo_pattern_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_pattern_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_pop_group(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_pop_group(
      cr,
    );
  }

  late final _cairo_pop_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_t>)>>('cairo_pop_group');
  late final _cairo_pop_group = _cairo_pop_groupPtr.asFunction<
      ffi.Pointer<cairo_pattern_t> Function(ffi.Pointer<cairo_t>)>();

  void cairo_pop_group_to_source(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_pop_group_to_source(
      cr,
    );
  }

  late final _cairo_pop_group_to_sourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_pop_group_to_source');
  late final _cairo_pop_group_to_source = _cairo_pop_group_to_sourcePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_push_group(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_push_group(
      cr,
    );
  }

  late final _cairo_push_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_push_group');
  late final _cairo_push_group =
      _cairo_push_groupPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_push_group_with_content(
    ffi.Pointer<cairo_t> cr,
    cairo_content content,
  ) {
    return _cairo_push_group_with_content(
      cr,
      content.value,
    );
  }

  late final _cairo_push_group_with_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.UnsignedInt)>>('cairo_push_group_with_content');
  late final _cairo_push_group_with_content = _cairo_push_group_with_contentPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_raster_source_pattern_get_acquire(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<cairo_raster_source_acquire_func_t> acquire,
    ffi.Pointer<cairo_raster_source_release_func_t> release,
  ) {
    return _cairo_raster_source_pattern_get_acquire(
      pattern,
      acquire,
      release,
    );
  }

  late final _cairo_raster_source_pattern_get_acquirePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_pattern_t>,
                  ffi.Pointer<cairo_raster_source_acquire_func_t>,
                  ffi.Pointer<cairo_raster_source_release_func_t>)>>(
      'cairo_raster_source_pattern_get_acquire');
  late final _cairo_raster_source_pattern_get_acquire =
      _cairo_raster_source_pattern_get_acquirePtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>,
              ffi.Pointer<cairo_raster_source_acquire_func_t>,
              ffi.Pointer<cairo_raster_source_release_func_t>)>();

  ffi.Pointer<ffi.Void> cairo_raster_source_pattern_get_callback_data(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_callback_data(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_callback_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_callback_data');
  late final _cairo_raster_source_pattern_get_callback_data =
      _cairo_raster_source_pattern_get_callback_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_pattern_t>)>();

  cairo_raster_source_copy_func_t cairo_raster_source_pattern_get_copy(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_copy(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_copyPtr = _lookup<
          ffi.NativeFunction<
              cairo_raster_source_copy_func_t Function(
                  ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_copy');
  late final _cairo_raster_source_pattern_get_copy =
      _cairo_raster_source_pattern_get_copyPtr.asFunction<
          cairo_raster_source_copy_func_t Function(
              ffi.Pointer<cairo_pattern_t>)>();

  cairo_raster_source_finish_func_t cairo_raster_source_pattern_get_finish(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_finish(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_finishPtr = _lookup<
          ffi.NativeFunction<
              cairo_raster_source_finish_func_t Function(
                  ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_finish');
  late final _cairo_raster_source_pattern_get_finish =
      _cairo_raster_source_pattern_get_finishPtr.asFunction<
          cairo_raster_source_finish_func_t Function(
              ffi.Pointer<cairo_pattern_t>)>();

  cairo_raster_source_snapshot_func_t cairo_raster_source_pattern_get_snapshot(
    ffi.Pointer<cairo_pattern_t> pattern,
  ) {
    return _cairo_raster_source_pattern_get_snapshot(
      pattern,
    );
  }

  late final _cairo_raster_source_pattern_get_snapshotPtr = _lookup<
          ffi.NativeFunction<
              cairo_raster_source_snapshot_func_t Function(
                  ffi.Pointer<cairo_pattern_t>)>>(
      'cairo_raster_source_pattern_get_snapshot');
  late final _cairo_raster_source_pattern_get_snapshot =
      _cairo_raster_source_pattern_get_snapshotPtr.asFunction<
          cairo_raster_source_snapshot_func_t Function(
              ffi.Pointer<cairo_pattern_t>)>();

  void cairo_raster_source_pattern_set_acquire(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_acquire_func_t acquire,
    cairo_raster_source_release_func_t release,
  ) {
    return _cairo_raster_source_pattern_set_acquire(
      pattern,
      acquire,
      release,
    );
  }

  late final _cairo_raster_source_pattern_set_acquirePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_acquire_func_t,
                  cairo_raster_source_release_func_t)>>(
      'cairo_raster_source_pattern_set_acquire');
  late final _cairo_raster_source_pattern_set_acquire =
      _cairo_raster_source_pattern_set_acquirePtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>,
              cairo_raster_source_acquire_func_t,
              cairo_raster_source_release_func_t)>();

  void cairo_raster_source_pattern_set_callback_data(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _cairo_raster_source_pattern_set_callback_data(
      pattern,
      data,
    );
  }

  late final _cairo_raster_source_pattern_set_callback_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>)>>(
      'cairo_raster_source_pattern_set_callback_data');
  late final _cairo_raster_source_pattern_set_callback_data =
      _cairo_raster_source_pattern_set_callback_dataPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>, ffi.Pointer<ffi.Void>)>();

  void cairo_raster_source_pattern_set_copy(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_copy_func_t copy,
  ) {
    return _cairo_raster_source_pattern_set_copy(
      pattern,
      copy,
    );
  }

  late final _cairo_raster_source_pattern_set_copyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_copy_func_t)>>(
      'cairo_raster_source_pattern_set_copy');
  late final _cairo_raster_source_pattern_set_copy =
      _cairo_raster_source_pattern_set_copyPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_pattern_t>, cairo_raster_source_copy_func_t)>();

  void cairo_raster_source_pattern_set_finish(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_finish_func_t finish,
  ) {
    return _cairo_raster_source_pattern_set_finish(
      pattern,
      finish,
    );
  }

  late final _cairo_raster_source_pattern_set_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_finish_func_t)>>(
      'cairo_raster_source_pattern_set_finish');
  late final _cairo_raster_source_pattern_set_finish =
      _cairo_raster_source_pattern_set_finishPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>,
              cairo_raster_source_finish_func_t)>();

  void cairo_raster_source_pattern_set_snapshot(
    ffi.Pointer<cairo_pattern_t> pattern,
    cairo_raster_source_snapshot_func_t snapshot,
  ) {
    return _cairo_raster_source_pattern_set_snapshot(
      pattern,
      snapshot,
    );
  }

  late final _cairo_raster_source_pattern_set_snapshotPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_pattern_t>,
                  cairo_raster_source_snapshot_func_t)>>(
      'cairo_raster_source_pattern_set_snapshot');
  late final _cairo_raster_source_pattern_set_snapshot =
      _cairo_raster_source_pattern_set_snapshotPtr.asFunction<
          void Function(ffi.Pointer<cairo_pattern_t>,
              cairo_raster_source_snapshot_func_t)>();

  /// Recording-surface functions
  ffi.Pointer<cairo_surface_t> cairo_recording_surface_create(
    cairo_content content,
    ffi.Pointer<cairo_rectangle_t> extents,
  ) {
    return _cairo_recording_surface_create(
      content.value,
      extents,
    );
  }

  late final _cairo_recording_surface_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_surface_t> Function(
                  ffi.UnsignedInt, ffi.Pointer<cairo_rectangle_t>)>>(
      'cairo_recording_surface_create');
  late final _cairo_recording_surface_create =
      _cairo_recording_surface_createPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              int, ffi.Pointer<cairo_rectangle_t>)>();

  int cairo_recording_surface_get_extents(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_rectangle_t> extents,
  ) {
    return _cairo_recording_surface_get_extents(
      surface,
      extents,
    );
  }

  late final _cairo_recording_surface_get_extentsPtr = _lookup<
          ffi.NativeFunction<
              cairo_bool_t Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_rectangle_t>)>>(
      'cairo_recording_surface_get_extents');
  late final _cairo_recording_surface_get_extents =
      _cairo_recording_surface_get_extentsPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_surface_t>, ffi.Pointer<cairo_rectangle_t>)>();

  void cairo_recording_surface_ink_extents(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x0,
    ffi.Pointer<ffi.Double> y0,
    ffi.Pointer<ffi.Double> width,
    ffi.Pointer<ffi.Double> height,
  ) {
    return _cairo_recording_surface_ink_extents(
      surface,
      x0,
      y0,
      width,
      height,
    );
  }

  late final _cairo_recording_surface_ink_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_recording_surface_ink_extents');
  late final _cairo_recording_surface_ink_extents =
      _cairo_recording_surface_ink_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_rectangle(
    ffi.Pointer<cairo_t> cr,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _cairo_rectangle(
      cr,
      x,
      y,
      width,
      height,
    );
  }

  late final _cairo_rectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_rectangle');
  late final _cairo_rectangle = _cairo_rectanglePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double)>();

  void cairo_rectangle_list_destroy(
    ffi.Pointer<cairo_rectangle_list_t> rectangle_list,
  ) {
    return _cairo_rectangle_list_destroy(
      rectangle_list,
    );
  }

  late final _cairo_rectangle_list_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_rectangle_list_t>)>>(
      'cairo_rectangle_list_destroy');
  late final _cairo_rectangle_list_destroy = _cairo_rectangle_list_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_rectangle_list_t>)>();

  ffi.Pointer<cairo_t> cairo_reference(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_reference(
      cr,
    );
  }

  late final _cairo_referencePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<cairo_t> Function(ffi.Pointer<cairo_t>)>>(
      'cairo_reference');
  late final _cairo_reference = _cairo_referencePtr
      .asFunction<ffi.Pointer<cairo_t> Function(ffi.Pointer<cairo_t>)>();

  int cairo_region_contains_point(
    ffi.Pointer<cairo_region_t> region,
    int x,
    int y,
  ) {
    return _cairo_region_contains_point(
      region,
      x,
      y,
    );
  }

  late final _cairo_region_contains_pointPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_region_t>, ffi.Int,
              ffi.Int)>>('cairo_region_contains_point');
  late final _cairo_region_contains_point = _cairo_region_contains_pointPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>, int, int)>();

  cairo_region_overlap cairo_region_contains_rectangle(
    ffi.Pointer<cairo_region_t> region,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return cairo_region_overlap.fromValue(_cairo_region_contains_rectangle(
      region,
      rectangle,
    ));
  }

  late final _cairo_region_contains_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_contains_rectangle');
  late final _cairo_region_contains_rectangle =
      _cairo_region_contains_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_copy(
    ffi.Pointer<cairo_region_t> original,
  ) {
    return _cairo_region_copy(
      original,
    );
  }

  late final _cairo_region_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_region_t>)>>('cairo_region_copy');
  late final _cairo_region_copy = _cairo_region_copyPtr.asFunction<
      ffi.Pointer<cairo_region_t> Function(ffi.Pointer<cairo_region_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_create() {
    return _cairo_region_create();
  }

  late final _cairo_region_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_region_t> Function()>>(
          'cairo_region_create');
  late final _cairo_region_create = _cairo_region_createPtr
      .asFunction<ffi.Pointer<cairo_region_t> Function()>();

  ffi.Pointer<cairo_region_t> cairo_region_create_rectangle(
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_create_rectangle(
      rectangle,
    );
  }

  late final _cairo_region_create_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_region_t> Function(
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_create_rectangle');
  late final _cairo_region_create_rectangle =
      _cairo_region_create_rectanglePtr.asFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_rectangle_int_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_create_rectangles(
    ffi.Pointer<cairo_rectangle_int_t> rects,
    int count,
  ) {
    return _cairo_region_create_rectangles(
      rects,
      count,
    );
  }

  late final _cairo_region_create_rectanglesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_rectangle_int_t>,
              ffi.Int)>>('cairo_region_create_rectangles');
  late final _cairo_region_create_rectangles =
      _cairo_region_create_rectanglesPtr.asFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_rectangle_int_t>, int)>();

  void cairo_region_destroy(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_destroy(
      region,
    );
  }

  late final _cairo_region_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_region_t>)>>(
      'cairo_region_destroy');
  late final _cairo_region_destroy = _cairo_region_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_region_t>)>();

  int cairo_region_equal(
    ffi.Pointer<cairo_region_t> a,
    ffi.Pointer<cairo_region_t> b,
  ) {
    return _cairo_region_equal(
      a,
      b,
    );
  }

  late final _cairo_region_equalPtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_equal');
  late final _cairo_region_equal = _cairo_region_equalPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  void cairo_region_get_extents(
    ffi.Pointer<cairo_region_t> region,
    ffi.Pointer<cairo_rectangle_int_t> extents,
  ) {
    return _cairo_region_get_extents(
      region,
      extents,
    );
  }

  late final _cairo_region_get_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>>('cairo_region_get_extents');
  late final _cairo_region_get_extents =
      _cairo_region_get_extentsPtr.asFunction<
          void Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_region_get_rectangle(
    ffi.Pointer<cairo_region_t> region,
    int nth,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return _cairo_region_get_rectangle(
      region,
      nth,
      rectangle,
    );
  }

  late final _cairo_region_get_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_region_t>, ffi.Int,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_get_rectangle');
  late final _cairo_region_get_rectangle =
      _cairo_region_get_rectanglePtr.asFunction<
          void Function(ffi.Pointer<cairo_region_t>, int,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  cairo_status1 cairo_region_intersect(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return cairo_status1.fromValue(_cairo_region_intersect(
      dst,
      other,
    ));
  }

  late final _cairo_region_intersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_intersect');
  late final _cairo_region_intersect = _cairo_region_intersectPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  cairo_status1 cairo_region_intersect_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return cairo_status1.fromValue(_cairo_region_intersect_rectangle(
      dst,
      rectangle,
    ));
  }

  late final _cairo_region_intersect_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_intersect_rectangle');
  late final _cairo_region_intersect_rectangle =
      _cairo_region_intersect_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  int cairo_region_is_empty(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_is_empty(
      region,
    );
  }

  late final _cairo_region_is_emptyPtr = _lookup<
          ffi
          .NativeFunction<cairo_bool_t Function(ffi.Pointer<cairo_region_t>)>>(
      'cairo_region_is_empty');
  late final _cairo_region_is_empty = _cairo_region_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>)>();

  int cairo_region_num_rectangles(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_num_rectangles(
      region,
    );
  }

  late final _cairo_region_num_rectanglesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<cairo_region_t>)>>(
      'cairo_region_num_rectangles');
  late final _cairo_region_num_rectangles = _cairo_region_num_rectanglesPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>)>();

  ffi.Pointer<cairo_region_t> cairo_region_reference(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return _cairo_region_reference(
      region,
    );
  }

  late final _cairo_region_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_region_t> Function(
              ffi.Pointer<cairo_region_t>)>>('cairo_region_reference');
  late final _cairo_region_reference = _cairo_region_referencePtr.asFunction<
      ffi.Pointer<cairo_region_t> Function(ffi.Pointer<cairo_region_t>)>();

  cairo_status1 cairo_region_status(
    ffi.Pointer<cairo_region_t> region,
  ) {
    return cairo_status1.fromValue(_cairo_region_status(
      region,
    ));
  }

  late final _cairo_region_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_region_t>)>>('cairo_region_status');
  late final _cairo_region_status = _cairo_region_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_region_t>)>();

  cairo_status1 cairo_region_subtract(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return cairo_status1.fromValue(_cairo_region_subtract(
      dst,
      other,
    ));
  }

  late final _cairo_region_subtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_subtract');
  late final _cairo_region_subtract = _cairo_region_subtractPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  cairo_status1 cairo_region_subtract_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return cairo_status1.fromValue(_cairo_region_subtract_rectangle(
      dst,
      rectangle,
    ));
  }

  late final _cairo_region_subtract_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_subtract_rectangle');
  late final _cairo_region_subtract_rectangle =
      _cairo_region_subtract_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_region_translate(
    ffi.Pointer<cairo_region_t> region,
    int dx,
    int dy,
  ) {
    return _cairo_region_translate(
      region,
      dx,
      dy,
    );
  }

  late final _cairo_region_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_region_t>, ffi.Int,
              ffi.Int)>>('cairo_region_translate');
  late final _cairo_region_translate = _cairo_region_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_region_t>, int, int)>();

  cairo_status1 cairo_region_union(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return cairo_status1.fromValue(_cairo_region_union(
      dst,
      other,
    ));
  }

  late final _cairo_region_unionPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_union');
  late final _cairo_region_union = _cairo_region_unionPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  cairo_status1 cairo_region_union_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return cairo_status1.fromValue(_cairo_region_union_rectangle(
      dst,
      rectangle,
    ));
  }

  late final _cairo_region_union_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_union_rectangle');
  late final _cairo_region_union_rectangle =
      _cairo_region_union_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  cairo_status1 cairo_region_xor(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_region_t> other,
  ) {
    return cairo_status1.fromValue(_cairo_region_xor(
      dst,
      other,
    ));
  }

  late final _cairo_region_xorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_region_t>)>>('cairo_region_xor');
  late final _cairo_region_xor = _cairo_region_xorPtr.asFunction<
      int Function(ffi.Pointer<cairo_region_t>, ffi.Pointer<cairo_region_t>)>();

  cairo_status1 cairo_region_xor_rectangle(
    ffi.Pointer<cairo_region_t> dst,
    ffi.Pointer<cairo_rectangle_int_t> rectangle,
  ) {
    return cairo_status1.fromValue(_cairo_region_xor_rectangle(
      dst,
      rectangle,
    ));
  }

  late final _cairo_region_xor_rectanglePtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_region_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_region_xor_rectangle');
  late final _cairo_region_xor_rectangle =
      _cairo_region_xor_rectanglePtr.asFunction<
          int Function(ffi.Pointer<cairo_region_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_rel_curve_to(
    ffi.Pointer<cairo_t> cr,
    double dx1,
    double dy1,
    double dx2,
    double dy2,
    double dx3,
    double dy3,
  ) {
    return _cairo_rel_curve_to(
      cr,
      dx1,
      dy1,
      dx2,
      dy2,
      dx3,
      dy3,
    );
  }

  late final _cairo_rel_curve_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_rel_curve_to');
  late final _cairo_rel_curve_to = _cairo_rel_curve_toPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double,
          double, double)>();

  void cairo_rel_line_to(
    ffi.Pointer<cairo_t> cr,
    double dx,
    double dy,
  ) {
    return _cairo_rel_line_to(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_rel_line_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_rel_line_to');
  late final _cairo_rel_line_to = _cairo_rel_line_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// XXX: NYI
  /// cairo_public void
  /// cairo_arc_to (cairo_t *cr,
  /// double x1, double y1,
  /// double x2, double y2,
  /// double radius);
  void cairo_rel_move_to(
    ffi.Pointer<cairo_t> cr,
    double dx,
    double dy,
  ) {
    return _cairo_rel_move_to(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_rel_move_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_rel_move_to');
  late final _cairo_rel_move_to = _cairo_rel_move_toPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Clipping
  void cairo_reset_clip(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_reset_clip(
      cr,
    );
  }

  late final _cairo_reset_clipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_reset_clip');
  late final _cairo_reset_clip =
      _cairo_reset_clipPtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_restore(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_restore(
      cr,
    );
  }

  late final _cairo_restorePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_restore');
  late final _cairo_restore =
      _cairo_restorePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_rotate(
    ffi.Pointer<cairo_t> cr,
    double angle,
  ) {
    return _cairo_rotate(
      cr,
      angle,
    );
  }

  late final _cairo_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double)>>('cairo_rotate');
  late final _cairo_rotate = _cairo_rotatePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_save(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_save(
      cr,
    );
  }

  late final _cairo_savePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_save');
  late final _cairo_save =
      _cairo_savePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_scale(
    ffi.Pointer<cairo_t> cr,
    double sx,
    double sy,
  ) {
    return _cairo_scale(
      cr,
      sx,
      sy,
    );
  }

  late final _cairo_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Double, ffi.Double)>>('cairo_scale');
  late final _cairo_scale = _cairo_scalePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// Portable interface to general font features.
  ffi.Pointer<cairo_scaled_font_t> cairo_scaled_font_create(
    ffi.Pointer<cairo_font_face_t> font_face,
    ffi.Pointer<cairo_matrix_t> font_matrix,
    ffi.Pointer<cairo_matrix_t> ctm,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_scaled_font_create(
      font_face,
      font_matrix,
      ctm,
      options,
    );
  }

  late final _cairo_scaled_font_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_scaled_font_create');
  late final _cairo_scaled_font_create =
      _cairo_scaled_font_createPtr.asFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_font_face_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_matrix_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  void cairo_scaled_font_destroy(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_destroy(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_scaled_font_destroy');
  late final _cairo_scaled_font_destroy = _cairo_scaled_font_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_extents(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_font_extents_t> extents,
  ) {
    return _cairo_scaled_font_extents(
      scaled_font,
      extents,
    );
  }

  late final _cairo_scaled_font_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_font_extents_t>)>>('cairo_scaled_font_extents');
  late final _cairo_scaled_font_extents =
      _cairo_scaled_font_extentsPtr.asFunction<
          void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_font_extents_t>)>();

  void cairo_scaled_font_get_ctm(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_matrix_t> ctm,
  ) {
    return _cairo_scaled_font_get_ctm(
      scaled_font,
      ctm,
    );
  }

  late final _cairo_scaled_font_get_ctmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_scaled_font_get_ctm');
  late final _cairo_scaled_font_get_ctm =
      _cairo_scaled_font_get_ctmPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<cairo_matrix_t>)>();

  ffi.Pointer<cairo_font_face_t> cairo_scaled_font_get_font_face(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_get_font_face(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_get_font_facePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_font_face_t> Function(
                  ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_scaled_font_get_font_face');
  late final _cairo_scaled_font_get_font_face =
      _cairo_scaled_font_get_font_facePtr.asFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_get_font_matrix(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_matrix_t> font_matrix,
  ) {
    return _cairo_scaled_font_get_font_matrix(
      scaled_font,
      font_matrix,
    );
  }

  late final _cairo_scaled_font_get_font_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_matrix_t>)>>(
      'cairo_scaled_font_get_font_matrix');
  late final _cairo_scaled_font_get_font_matrix =
      _cairo_scaled_font_get_font_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_scaled_font_get_font_options(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_scaled_font_get_font_options(
      scaled_font,
      options,
    );
  }

  late final _cairo_scaled_font_get_font_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_scaled_font_get_font_options');
  late final _cairo_scaled_font_get_font_options =
      _cairo_scaled_font_get_font_optionsPtr.asFunction<
          void Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  int cairo_scaled_font_get_reference_count(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_get_reference_count(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_scaled_font_get_reference_count');
  late final _cairo_scaled_font_get_reference_count =
      _cairo_scaled_font_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_get_scale_matrix(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_matrix_t> scale_matrix,
  ) {
    return _cairo_scaled_font_get_scale_matrix(
      scaled_font,
      scale_matrix,
    );
  }

  late final _cairo_scaled_font_get_scale_matrixPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_matrix_t>)>>(
      'cairo_scaled_font_get_scale_matrix');
  late final _cairo_scaled_font_get_scale_matrix =
      _cairo_scaled_font_get_scale_matrixPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<cairo_matrix_t>)>();

  cairo_font_type cairo_scaled_font_get_type(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return cairo_font_type.fromValue(_cairo_scaled_font_get_type(
      scaled_font,
    ));
  }

  late final _cairo_scaled_font_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_scaled_font_t>)>>('cairo_scaled_font_get_type');
  late final _cairo_scaled_font_get_type = _cairo_scaled_font_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_scaled_font_t>)>();

  ffi.Pointer<ffi.Void> cairo_scaled_font_get_user_data(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_scaled_font_get_user_data(
      scaled_font,
      key,
    );
  }

  late final _cairo_scaled_font_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_scaled_font_get_user_data');
  late final _cairo_scaled_font_get_user_data =
      _cairo_scaled_font_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  void cairo_scaled_font_glyph_extents(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_scaled_font_glyph_extents(
      scaled_font,
      glyphs,
      num_glyphs,
      extents,
    );
  }

  late final _cairo_scaled_font_glyph_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<cairo_glyph_t>,
                  ffi.Int,
                  ffi.Pointer<cairo_text_extents_t>)>>(
      'cairo_scaled_font_glyph_extents');
  late final _cairo_scaled_font_glyph_extents =
      _cairo_scaled_font_glyph_extentsPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_glyph_t>,
              int,
              ffi.Pointer<cairo_text_extents_t>)>();

  ffi.Pointer<cairo_scaled_font_t> cairo_scaled_font_reference(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_scaled_font_reference(
      scaled_font,
    );
  }

  late final _cairo_scaled_font_referencePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_scaled_font_t> Function(
                  ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_scaled_font_reference');
  late final _cairo_scaled_font_reference =
      _cairo_scaled_font_referencePtr.asFunction<
          ffi.Pointer<cairo_scaled_font_t> Function(
              ffi.Pointer<cairo_scaled_font_t>)>();

  cairo_status1 cairo_scaled_font_set_user_data(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return cairo_status1.fromValue(_cairo_scaled_font_set_user_data(
      scaled_font,
      key,
      user_data,
      destroy,
    ));
  }

  late final _cairo_scaled_font_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_scaled_font_set_user_data');
  late final _cairo_scaled_font_set_user_data =
      _cairo_scaled_font_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_scaled_font_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  cairo_status1 cairo_scaled_font_status(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return cairo_status1.fromValue(_cairo_scaled_font_status(
      scaled_font,
    ));
  }

  late final _cairo_scaled_font_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_scaled_font_t>)>>('cairo_scaled_font_status');
  late final _cairo_scaled_font_status = _cairo_scaled_font_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_scaled_font_text_extents(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<ffi.Char> utf8,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_scaled_font_text_extents(
      scaled_font,
      utf8,
      extents,
    );
  }

  late final _cairo_scaled_font_text_extentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<cairo_text_extents_t>)>>(
      'cairo_scaled_font_text_extents');
  late final _cairo_scaled_font_text_extents =
      _cairo_scaled_font_text_extentsPtr.asFunction<
          void Function(ffi.Pointer<cairo_scaled_font_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<cairo_text_extents_t>)>();

  cairo_status1 cairo_scaled_font_text_to_glyphs(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    double x,
    double y,
    ffi.Pointer<ffi.Char> utf8,
    int utf8_len,
    ffi.Pointer<ffi.Pointer<cairo_glyph_t>> glyphs,
    ffi.Pointer<ffi.Int> num_glyphs,
    ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>> clusters,
    ffi.Pointer<ffi.Int> num_clusters,
    ffi.Pointer<ffi.UnsignedInt> cluster_flags,
  ) {
    return cairo_status1.fromValue(_cairo_scaled_font_text_to_glyphs(
      scaled_font,
      x,
      y,
      utf8,
      utf8_len,
      glyphs,
      num_glyphs,
      clusters,
      num_clusters,
      cluster_flags,
    ));
  }

  late final _cairo_scaled_font_text_to_glyphsPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<cairo_scaled_font_t>,
                  ffi.Double,
                  ffi.Double,
                  ffi.Pointer<ffi.Char>,
                  ffi.Int,
                  ffi.Pointer<ffi.Pointer<cairo_glyph_t>>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>>,
                  ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.UnsignedInt>)>>(
      'cairo_scaled_font_text_to_glyphs');
  late final _cairo_scaled_font_text_to_glyphs =
      _cairo_scaled_font_text_to_glyphsPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_scaled_font_t>,
              double,
              double,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<ffi.Pointer<cairo_glyph_t>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  /// This interface is for dealing with text as text, not caring about the
  /// font object inside the cairo_t.
  void cairo_select_font_face(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> family,
    cairo_font_slant slant,
    cairo_font_weight weight,
  ) {
    return _cairo_select_font_face(
      cr,
      family,
      slant.value,
      weight.value,
    );
  }

  late final _cairo_select_font_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('cairo_select_font_face');
  late final _cairo_select_font_face = _cairo_select_font_facePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>, int, int)>();

  void cairo_set_antialias(
    ffi.Pointer<cairo_t> cr,
    cairo_antialias antialias,
  ) {
    return _cairo_set_antialias(
      cr,
      antialias.value,
    );
  }

  late final _cairo_set_antialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.UnsignedInt)>>('cairo_set_antialias');
  late final _cairo_set_antialias = _cairo_set_antialiasPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_dash(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dashes,
    int num_dashes,
    double offset,
  ) {
    return _cairo_set_dash(
      cr,
      dashes,
      num_dashes,
      offset,
    );
  }

  late final _cairo_set_dashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Int, ffi.Double)>>('cairo_set_dash');
  late final _cairo_set_dash = _cairo_set_dashPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>, int, double)>();

  void cairo_set_fill_rule(
    ffi.Pointer<cairo_t> cr,
    cairo_fill_rule fill_rule,
  ) {
    return _cairo_set_fill_rule(
      cr,
      fill_rule.value,
    );
  }

  late final _cairo_set_fill_rulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.UnsignedInt)>>('cairo_set_fill_rule');
  late final _cairo_set_fill_rule = _cairo_set_fill_rulePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_font_face(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_set_font_face(
      cr,
      font_face,
    );
  }

  late final _cairo_set_font_facePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_face_t>)>>('cairo_set_font_face');
  late final _cairo_set_font_face = _cairo_set_font_facePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_face_t>)>();

  void cairo_set_font_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_set_font_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_set_font_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_set_font_matrix');
  late final _cairo_set_font_matrix = _cairo_set_font_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_set_font_options(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_set_font_options(
      cr,
      options,
    );
  }

  late final _cairo_set_font_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_font_options_t>)>>('cairo_set_font_options');
  late final _cairo_set_font_options = _cairo_set_font_optionsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_font_options_t>)>();

  void cairo_set_font_size(
    ffi.Pointer<cairo_t> cr,
    double size,
  ) {
    return _cairo_set_font_size(
      cr,
      size,
    );
  }

  late final _cairo_set_font_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double)>>(
      'cairo_set_font_size');
  late final _cairo_set_font_size = _cairo_set_font_sizePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_set_hairline(
    ffi.Pointer<cairo_t> cr,
    int set_hairline,
  ) {
    return _cairo_set_hairline(
      cr,
      set_hairline,
    );
  }

  late final _cairo_set_hairlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, cairo_bool_t)>>('cairo_set_hairline');
  late final _cairo_set_hairline = _cairo_set_hairlinePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_line_cap(
    ffi.Pointer<cairo_t> cr,
    cairo_line_cap line_cap,
  ) {
    return _cairo_set_line_cap(
      cr,
      line_cap.value,
    );
  }

  late final _cairo_set_line_capPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.UnsignedInt)>>('cairo_set_line_cap');
  late final _cairo_set_line_cap = _cairo_set_line_capPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_line_join(
    ffi.Pointer<cairo_t> cr,
    cairo_line_join line_join,
  ) {
    return _cairo_set_line_join(
      cr,
      line_join.value,
    );
  }

  late final _cairo_set_line_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.UnsignedInt)>>('cairo_set_line_join');
  late final _cairo_set_line_join = _cairo_set_line_joinPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_line_width(
    ffi.Pointer<cairo_t> cr,
    double width,
  ) {
    return _cairo_set_line_width(
      cr,
      width,
    );
  }

  late final _cairo_set_line_widthPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double)>>(
      'cairo_set_line_width');
  late final _cairo_set_line_width = _cairo_set_line_widthPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_set_matrix(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_set_matrix(
      cr,
      matrix,
    );
  }

  late final _cairo_set_matrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_set_matrix');
  late final _cairo_set_matrix = _cairo_set_matrixPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_set_miter_limit(
    ffi.Pointer<cairo_t> cr,
    double limit,
  ) {
    return _cairo_set_miter_limit(
      cr,
      limit,
    );
  }

  late final _cairo_set_miter_limitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double)>>(
      'cairo_set_miter_limit');
  late final _cairo_set_miter_limit = _cairo_set_miter_limitPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  void cairo_set_operator(
    ffi.Pointer<cairo_t> cr,
    cairo_operator op,
  ) {
    return _cairo_set_operator(
      cr,
      op.value,
    );
  }

  late final _cairo_set_operatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.UnsignedInt)>>('cairo_set_operator');
  late final _cairo_set_operator = _cairo_set_operatorPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, int)>();

  void cairo_set_scaled_font(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_set_scaled_font(
      cr,
      scaled_font,
    );
  }

  late final _cairo_set_scaled_fontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_scaled_font_t>)>>('cairo_set_scaled_font');
  late final _cairo_set_scaled_font = _cairo_set_scaled_fontPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_set_source(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_pattern_t> source,
  ) {
    return _cairo_set_source(
      cr,
      source,
    );
  }

  late final _cairo_set_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_pattern_t>)>>('cairo_set_source');
  late final _cairo_set_source = _cairo_set_sourcePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_pattern_t>)>();

  void cairo_set_source_rgb(
    ffi.Pointer<cairo_t> cr,
    double red,
    double green,
    double blue,
  ) {
    return _cairo_set_source_rgb(
      cr,
      red,
      green,
      blue,
    );
  }

  late final _cairo_set_source_rgbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double)>>('cairo_set_source_rgb');
  late final _cairo_set_source_rgb = _cairo_set_source_rgbPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double)>();

  void cairo_set_source_rgba(
    ffi.Pointer<cairo_t> cr,
    double red,
    double green,
    double blue,
    double alpha,
  ) {
    return _cairo_set_source_rgba(
      cr,
      red,
      green,
      blue,
      alpha,
    );
  }

  late final _cairo_set_source_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('cairo_set_source_rgba');
  late final _cairo_set_source_rgba = _cairo_set_source_rgbaPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, double, double, double, double)>();

  void cairo_set_source_surface(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_surface_t> surface,
    double x,
    double y,
  ) {
    return _cairo_set_source_surface(
      cr,
      surface,
      x,
      y,
    );
  }

  late final _cairo_set_source_surfacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>,
              ffi.Double, ffi.Double)>>('cairo_set_source_surface');
  late final _cairo_set_source_surface =
      _cairo_set_source_surfacePtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_surface_t>,
              double, double)>();

  void cairo_set_tolerance(
    ffi.Pointer<cairo_t> cr,
    double tolerance,
  ) {
    return _cairo_set_tolerance(
      cr,
      tolerance,
    );
  }

  late final _cairo_set_tolerancePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double)>>(
      'cairo_set_tolerance');
  late final _cairo_set_tolerance = _cairo_set_tolerancePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double)>();

  cairo_status1 cairo_set_user_data(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return cairo_status1.fromValue(_cairo_set_user_data(
      cr,
      key,
      user_data,
      destroy,
    ));
  }

  late final _cairo_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_set_user_data');
  late final _cairo_set_user_data = _cairo_set_user_dataPtr.asFunction<
      int Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_user_data_key_t>,
          ffi.Pointer<ffi.Void>, cairo_destroy_func_t)>();

  void cairo_show_glyphs(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
  ) {
    return _cairo_show_glyphs(
      cr,
      glyphs,
      num_glyphs,
    );
  }

  late final _cairo_show_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>,
              ffi.Int)>>('cairo_show_glyphs');
  late final _cairo_show_glyphs = _cairo_show_glyphsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_glyph_t>, int)>();

  void cairo_show_page(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_show_page(
      cr,
    );
  }

  late final _cairo_show_pagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_show_page');
  late final _cairo_show_page =
      _cairo_show_pagePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_show_text(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> utf8,
  ) {
    return _cairo_show_text(
      cr,
      utf8,
    );
  }

  late final _cairo_show_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>)>>('cairo_show_text');
  late final _cairo_show_text = _cairo_show_textPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>)>();

  void cairo_show_text_glyphs(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> utf8,
    int utf8_len,
    ffi.Pointer<cairo_glyph_t> glyphs,
    int num_glyphs,
    ffi.Pointer<cairo_text_cluster_t> clusters,
    int num_clusters,
    cairo_text_cluster_flags cluster_flags,
  ) {
    return _cairo_show_text_glyphs(
      cr,
      utf8,
      utf8_len,
      glyphs,
      num_glyphs,
      clusters,
      num_clusters,
      cluster_flags.value,
    );
  }

  late final _cairo_show_text_glyphsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<cairo_glyph_t>,
              ffi.Int,
              ffi.Pointer<cairo_text_cluster_t>,
              ffi.Int,
              ffi.UnsignedInt)>>('cairo_show_text_glyphs');
  late final _cairo_show_text_glyphs = _cairo_show_text_glyphsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<cairo_glyph_t>,
          int,
          ffi.Pointer<cairo_text_cluster_t>,
          int,
          int)>();

  /// Error status queries
  cairo_status1 cairo_status(
    ffi.Pointer<cairo_t> cr,
  ) {
    return cairo_status1.fromValue(_cairo_status(
      cr,
    ));
  }

  late final _cairo_statusPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<cairo_t>)>>(
      'cairo_status');
  late final _cairo_status =
      _cairo_statusPtr.asFunction<int Function(ffi.Pointer<cairo_t>)>();

  ffi.Pointer<ffi.Char> cairo_status_to_string(
    cairo_status1 status,
  ) {
    return _cairo_status_to_string(
      status.value,
    );
  }

  late final _cairo_status_to_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'cairo_status_to_string');
  late final _cairo_status_to_string = _cairo_status_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void cairo_stroke(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_stroke(
      cr,
    );
  }

  late final _cairo_strokePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_stroke');
  late final _cairo_stroke =
      _cairo_strokePtr.asFunction<void Function(ffi.Pointer<cairo_t>)>();

  /// Rectangular extents
  void cairo_stroke_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x1,
    ffi.Pointer<ffi.Double> y1,
    ffi.Pointer<ffi.Double> x2,
    ffi.Pointer<ffi.Double> y2,
  ) {
    return _cairo_stroke_extents(
      cr,
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _cairo_stroke_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_stroke_extents');
  late final _cairo_stroke_extents = _cairo_stroke_extentsPtr.asFunction<
      void Function(
          ffi.Pointer<cairo_t>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_stroke_preserve(
    ffi.Pointer<cairo_t> cr,
  ) {
    return _cairo_stroke_preserve(
      cr,
    );
  }

  late final _cairo_stroke_preservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_t>)>>(
          'cairo_stroke_preserve');
  late final _cairo_stroke_preserve = _cairo_stroke_preservePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>)>();

  void cairo_surface_copy_page(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_copy_page(
      surface,
    );
  }

  late final _cairo_surface_copy_pagePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_copy_page');
  late final _cairo_surface_copy_page = _cairo_surface_copy_pagePtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_create_for_rectangle(
    ffi.Pointer<cairo_surface_t> target,
    double x,
    double y,
    double width,
    double height,
  ) {
    return _cairo_surface_create_for_rectangle(
      target,
      x,
      y,
      width,
      height,
    );
  }

  late final _cairo_surface_create_for_rectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('cairo_surface_create_for_rectangle');
  late final _cairo_surface_create_for_rectangle =
      _cairo_surface_create_for_rectanglePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, double, double, double, double)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_create_observer(
    ffi.Pointer<cairo_surface_t> target,
    cairo_surface_observer_mode_t mode,
  ) {
    return _cairo_surface_create_observer(
      target,
      mode.value,
    );
  }

  late final _cairo_surface_create_observerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_surface_t>,
              ffi.UnsignedInt)>>('cairo_surface_create_observer');
  late final _cairo_surface_create_observer =
      _cairo_surface_create_observerPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, int)>();

  /// Surface manipulation
  ffi.Pointer<cairo_surface_t> cairo_surface_create_similar(
    ffi.Pointer<cairo_surface_t> other,
    cairo_content content,
    int width,
    int height,
  ) {
    return _cairo_surface_create_similar(
      other,
      content.value,
      width,
      height,
    );
  }

  late final _cairo_surface_create_similarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Int)>>('cairo_surface_create_similar');
  late final _cairo_surface_create_similar =
      _cairo_surface_create_similarPtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, int, int, int)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_create_similar_image(
    ffi.Pointer<cairo_surface_t> other,
    cairo_format format,
    int width,
    int height,
  ) {
    return _cairo_surface_create_similar_image(
      other,
      format.value,
      width,
      height,
    );
  }

  late final _cairo_surface_create_similar_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('cairo_surface_create_similar_image');
  late final _cairo_surface_create_similar_image =
      _cairo_surface_create_similar_imagePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>, int, int, int)>();

  void cairo_surface_destroy(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_destroy(
      surface,
    );
  }

  late final _cairo_surface_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_destroy');
  late final _cairo_surface_destroy = _cairo_surface_destroyPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_finish(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_finish(
      surface,
    );
  }

  late final _cairo_surface_finishPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_finish');
  late final _cairo_surface_finish = _cairo_surface_finishPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_flush(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_flush(
      surface,
    );
  }

  late final _cairo_surface_flushPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_flush');
  late final _cairo_surface_flush = _cairo_surface_flushPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  cairo_content cairo_surface_get_content(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return cairo_content.fromValue(_cairo_surface_get_content(
      surface,
    ));
  }

  late final _cairo_surface_get_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_get_content');
  late final _cairo_surface_get_content = _cairo_surface_get_contentPtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_device_t> cairo_surface_get_device(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_get_device(
      surface,
    );
  }

  late final _cairo_surface_get_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_device_t> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_get_device');
  late final _cairo_surface_get_device =
      _cairo_surface_get_devicePtr.asFunction<
          ffi.Pointer<cairo_device_t> Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_get_device_offset(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x_offset,
    ffi.Pointer<ffi.Double> y_offset,
  ) {
    return _cairo_surface_get_device_offset(
      surface,
      x_offset,
      y_offset,
    );
  }

  late final _cairo_surface_get_device_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_surface_get_device_offset');
  late final _cairo_surface_get_device_offset =
      _cairo_surface_get_device_offsetPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_surface_get_device_scale(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x_scale,
    ffi.Pointer<ffi.Double> y_scale,
  ) {
    return _cairo_surface_get_device_scale(
      surface,
      x_scale,
      y_scale,
    );
  }

  late final _cairo_surface_get_device_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_surface_get_device_scale');
  late final _cairo_surface_get_device_scale =
      _cairo_surface_get_device_scalePtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_surface_get_fallback_resolution(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Double> x_pixels_per_inch,
    ffi.Pointer<ffi.Double> y_pixels_per_inch,
  ) {
    return _cairo_surface_get_fallback_resolution(
      surface,
      x_pixels_per_inch,
      y_pixels_per_inch,
    );
  }

  late final _cairo_surface_get_fallback_resolutionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>>(
      'cairo_surface_get_fallback_resolution');
  late final _cairo_surface_get_fallback_resolution =
      _cairo_surface_get_fallback_resolutionPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  void cairo_surface_get_font_options(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_font_options_t> options,
  ) {
    return _cairo_surface_get_font_options(
      surface,
      options,
    );
  }

  late final _cairo_surface_get_font_optionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_font_options_t>)>>(
      'cairo_surface_get_font_options');
  late final _cairo_surface_get_font_options =
      _cairo_surface_get_font_optionsPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_font_options_t>)>();

  void cairo_surface_get_mime_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Char> mime_type,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> data,
    ffi.Pointer<ffi.UnsignedLong> length,
  ) {
    return _cairo_surface_get_mime_data(
      surface,
      mime_type,
      data,
      length,
    );
  }

  late final _cairo_surface_get_mime_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedLong>)>>('cairo_surface_get_mime_data');
  late final _cairo_surface_get_mime_data =
      _cairo_surface_get_mime_dataPtr.asFunction<
          void Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.UnsignedLong>)>();

  int cairo_surface_get_reference_count(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_get_reference_count(
      surface,
    );
  }

  late final _cairo_surface_get_reference_countPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_get_reference_count');
  late final _cairo_surface_get_reference_count =
      _cairo_surface_get_reference_countPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  cairo_surface_type cairo_surface_get_type(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return cairo_surface_type.fromValue(_cairo_surface_get_type(
      surface,
    ));
  }

  late final _cairo_surface_get_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_get_type');
  late final _cairo_surface_get_type = _cairo_surface_get_typePtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<ffi.Void> cairo_surface_get_user_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_user_data_key_t> key,
  ) {
    return _cairo_surface_get_user_data(
      surface,
      key,
    );
  }

  late final _cairo_surface_get_user_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_user_data_key_t>)>>(
      'cairo_surface_get_user_data');
  late final _cairo_surface_get_user_data =
      _cairo_surface_get_user_dataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_user_data_key_t>)>();

  int cairo_surface_has_show_text_glyphs(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_has_show_text_glyphs(
      surface,
    );
  }

  late final _cairo_surface_has_show_text_glyphsPtr = _lookup<
          ffi
          .NativeFunction<cairo_bool_t Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_has_show_text_glyphs');
  late final _cairo_surface_has_show_text_glyphs =
      _cairo_surface_has_show_text_glyphsPtr
          .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_map_to_image(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_rectangle_int_t> extents,
  ) {
    return _cairo_surface_map_to_image(
      surface,
      extents,
    );
  }

  late final _cairo_surface_map_to_imagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_surface_t> Function(
                  ffi.Pointer<cairo_surface_t>,
                  ffi.Pointer<cairo_rectangle_int_t>)>>(
      'cairo_surface_map_to_image');
  late final _cairo_surface_map_to_image =
      _cairo_surface_map_to_imagePtr.asFunction<
          ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_rectangle_int_t>)>();

  void cairo_surface_mark_dirty(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_mark_dirty(
      surface,
    );
  }

  late final _cairo_surface_mark_dirtyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_mark_dirty');
  late final _cairo_surface_mark_dirty = _cairo_surface_mark_dirtyPtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_mark_dirty_rectangle(
    ffi.Pointer<cairo_surface_t> surface,
    int x,
    int y,
    int width,
    int height,
  ) {
    return _cairo_surface_mark_dirty_rectangle(
      surface,
      x,
      y,
      width,
      height,
    );
  }

  late final _cairo_surface_mark_dirty_rectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('cairo_surface_mark_dirty_rectangle');
  late final _cairo_surface_mark_dirty_rectangle =
      _cairo_surface_mark_dirty_rectanglePtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, int, int, int, int)>();

  cairo_status1 cairo_surface_observer_add_fill_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_add_fill_callback(
      abstract_surface,
      func,
      data,
    ));
  }

  late final _cairo_surface_observer_add_fill_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_fill_callback');
  late final _cairo_surface_observer_add_fill_callback =
      _cairo_surface_observer_add_fill_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  cairo_status1 cairo_surface_observer_add_finish_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_add_finish_callback(
      abstract_surface,
      func,
      data,
    ));
  }

  late final _cairo_surface_observer_add_finish_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_finish_callback');
  late final _cairo_surface_observer_add_finish_callback =
      _cairo_surface_observer_add_finish_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  cairo_status1 cairo_surface_observer_add_flush_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_add_flush_callback(
      abstract_surface,
      func,
      data,
    ));
  }

  late final _cairo_surface_observer_add_flush_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_flush_callback');
  late final _cairo_surface_observer_add_flush_callback =
      _cairo_surface_observer_add_flush_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  cairo_status1 cairo_surface_observer_add_glyphs_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_add_glyphs_callback(
      abstract_surface,
      func,
      data,
    ));
  }

  late final _cairo_surface_observer_add_glyphs_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_glyphs_callback');
  late final _cairo_surface_observer_add_glyphs_callback =
      _cairo_surface_observer_add_glyphs_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  cairo_status1 cairo_surface_observer_add_mask_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_add_mask_callback(
      abstract_surface,
      func,
      data,
    ));
  }

  late final _cairo_surface_observer_add_mask_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_mask_callback');
  late final _cairo_surface_observer_add_mask_callback =
      _cairo_surface_observer_add_mask_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  cairo_status1 cairo_surface_observer_add_paint_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_add_paint_callback(
      abstract_surface,
      func,
      data,
    ));
  }

  late final _cairo_surface_observer_add_paint_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_paint_callback');
  late final _cairo_surface_observer_add_paint_callback =
      _cairo_surface_observer_add_paint_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  cairo_status1 cairo_surface_observer_add_stroke_callback(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_surface_observer_callback_t func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_add_stroke_callback(
      abstract_surface,
      func,
      data,
    ));
  }

  late final _cairo_surface_observer_add_stroke_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
                  cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>>(
      'cairo_surface_observer_add_stroke_callback');
  late final _cairo_surface_observer_add_stroke_callback =
      _cairo_surface_observer_add_stroke_callbackPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>,
              cairo_surface_observer_callback_t, ffi.Pointer<ffi.Void>)>();

  double cairo_surface_observer_elapsed(
    ffi.Pointer<cairo_surface_t> abstract_surface,
  ) {
    return _cairo_surface_observer_elapsed(
      abstract_surface,
    );
  }

  late final _cairo_surface_observer_elapsedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Double Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_observer_elapsed');
  late final _cairo_surface_observer_elapsed =
      _cairo_surface_observer_elapsedPtr
          .asFunction<double Function(ffi.Pointer<cairo_surface_t>)>();

  cairo_status1 cairo_surface_observer_print(
    ffi.Pointer<cairo_surface_t> abstract_surface,
    cairo_write_func_t write_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return cairo_status1.fromValue(_cairo_surface_observer_print(
      abstract_surface,
      write_func,
      closure,
    ));
  }

  late final _cairo_surface_observer_printPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_surface_t>,
              cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_surface_observer_print');
  late final _cairo_surface_observer_print =
      _cairo_surface_observer_printPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<cairo_surface_t> cairo_surface_reference(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_reference(
      surface,
    );
  }

  late final _cairo_surface_referencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_surface_t> Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_reference');
  late final _cairo_surface_reference = _cairo_surface_referencePtr.asFunction<
      ffi.Pointer<cairo_surface_t> Function(ffi.Pointer<cairo_surface_t>)>();

  void cairo_surface_set_device_offset(
    ffi.Pointer<cairo_surface_t> surface,
    double x_offset,
    double y_offset,
  ) {
    return _cairo_surface_set_device_offset(
      surface,
      x_offset,
      y_offset,
    );
  }

  late final _cairo_surface_set_device_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Double,
              ffi.Double)>>('cairo_surface_set_device_offset');
  late final _cairo_surface_set_device_offset =
      _cairo_surface_set_device_offsetPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, double, double)>();

  void cairo_surface_set_device_scale(
    ffi.Pointer<cairo_surface_t> surface,
    double x_scale,
    double y_scale,
  ) {
    return _cairo_surface_set_device_scale(
      surface,
      x_scale,
      y_scale,
    );
  }

  late final _cairo_surface_set_device_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Double,
              ffi.Double)>>('cairo_surface_set_device_scale');
  late final _cairo_surface_set_device_scale =
      _cairo_surface_set_device_scalePtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, double, double)>();

  void cairo_surface_set_fallback_resolution(
    ffi.Pointer<cairo_surface_t> surface,
    double x_pixels_per_inch,
    double y_pixels_per_inch,
  ) {
    return _cairo_surface_set_fallback_resolution(
      surface,
      x_pixels_per_inch,
      y_pixels_per_inch,
    );
  }

  late final _cairo_surface_set_fallback_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>, ffi.Double,
              ffi.Double)>>('cairo_surface_set_fallback_resolution');
  late final _cairo_surface_set_fallback_resolution =
      _cairo_surface_set_fallback_resolutionPtr.asFunction<
          void Function(ffi.Pointer<cairo_surface_t>, double, double)>();

  cairo_status1 cairo_surface_set_mime_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Char> mime_type,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length,
    cairo_destroy_func_t destroy,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return cairo_status1.fromValue(_cairo_surface_set_mime_data(
      surface,
      mime_type,
      data,
      length,
      destroy,
      closure,
    ));
  }

  late final _cairo_surface_set_mime_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.UnsignedLong,
              cairo_destroy_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_surface_set_mime_data');
  late final _cairo_surface_set_mime_data =
      _cairo_surface_set_mime_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              int,
              cairo_destroy_func_t,
              ffi.Pointer<ffi.Void>)>();

  cairo_status1 cairo_surface_set_user_data(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_user_data_key_t> key,
    ffi.Pointer<ffi.Void> user_data,
    cairo_destroy_func_t destroy,
  ) {
    return cairo_status1.fromValue(_cairo_surface_set_user_data(
      surface,
      key,
      user_data,
      destroy,
    ));
  }

  late final _cairo_surface_set_user_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>>('cairo_surface_set_user_data');
  late final _cairo_surface_set_user_data =
      _cairo_surface_set_user_dataPtr.asFunction<
          int Function(
              ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_user_data_key_t>,
              ffi.Pointer<ffi.Void>,
              cairo_destroy_func_t)>();

  void cairo_surface_show_page(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return _cairo_surface_show_page(
      surface,
    );
  }

  late final _cairo_surface_show_pagePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cairo_surface_t>)>>(
      'cairo_surface_show_page');
  late final _cairo_surface_show_page = _cairo_surface_show_pagePtr
      .asFunction<void Function(ffi.Pointer<cairo_surface_t>)>();

  cairo_status1 cairo_surface_status(
    ffi.Pointer<cairo_surface_t> surface,
  ) {
    return cairo_status1.fromValue(_cairo_surface_status(
      surface,
    ));
  }

  late final _cairo_surface_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_status');
  late final _cairo_surface_status = _cairo_surface_statusPtr
      .asFunction<int Function(ffi.Pointer<cairo_surface_t>)>();

  int cairo_surface_supports_mime_type(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Char> mime_type,
  ) {
    return _cairo_surface_supports_mime_type(
      surface,
      mime_type,
    );
  }

  late final _cairo_surface_supports_mime_typePtr = _lookup<
      ffi.NativeFunction<
          cairo_bool_t Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Char>)>>('cairo_surface_supports_mime_type');
  late final _cairo_surface_supports_mime_type =
      _cairo_surface_supports_mime_typePtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Char>)>();

  void cairo_surface_unmap_image(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<cairo_surface_t> image,
  ) {
    return _cairo_surface_unmap_image(
      surface,
      image,
    );
  }

  late final _cairo_surface_unmap_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<cairo_surface_t>)>>('cairo_surface_unmap_image');
  late final _cairo_surface_unmap_image =
      _cairo_surface_unmap_imagePtr.asFunction<
          void Function(
              ffi.Pointer<cairo_surface_t>, ffi.Pointer<cairo_surface_t>)>();

  cairo_status1 cairo_surface_write_to_png(
    ffi.Pointer<cairo_surface_t> surface,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return cairo_status1.fromValue(_cairo_surface_write_to_png(
      surface,
      filename,
    ));
  }

  late final _cairo_surface_write_to_pngPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<cairo_surface_t>,
              ffi.Pointer<ffi.Char>)>>('cairo_surface_write_to_png');
  late final _cairo_surface_write_to_png =
      _cairo_surface_write_to_pngPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, ffi.Pointer<ffi.Char>)>();

  cairo_status1 cairo_surface_write_to_png_stream(
    ffi.Pointer<cairo_surface_t> surface,
    cairo_write_func_t write_func,
    ffi.Pointer<ffi.Void> closure,
  ) {
    return cairo_status1.fromValue(_cairo_surface_write_to_png_stream(
      surface,
      write_func,
      closure,
    ));
  }

  late final _cairo_surface_write_to_png_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<cairo_surface_t>,
              cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>>('cairo_surface_write_to_png_stream');
  late final _cairo_surface_write_to_png_stream =
      _cairo_surface_write_to_png_streamPtr.asFunction<
          int Function(ffi.Pointer<cairo_surface_t>, cairo_write_func_t,
              ffi.Pointer<ffi.Void>)>();

  void cairo_tag_begin(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> tag_name,
    ffi.Pointer<ffi.Char> attributes,
  ) {
    return _cairo_tag_begin(
      cr,
      tag_name,
      attributes,
    );
  }

  late final _cairo_tag_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cairo_tag_begin');
  late final _cairo_tag_begin = _cairo_tag_beginPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void cairo_tag_end(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> tag_name,
  ) {
    return _cairo_tag_end(
      cr,
      tag_name,
    );
  }

  late final _cairo_tag_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>)>>('cairo_tag_end');
  late final _cairo_tag_end = _cairo_tag_endPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<cairo_text_cluster_t> cairo_text_cluster_allocate(
    int num_clusters,
  ) {
    return _cairo_text_cluster_allocate(
      num_clusters,
    );
  }

  late final _cairo_text_cluster_allocatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<cairo_text_cluster_t> Function(ffi.Int)>>(
      'cairo_text_cluster_allocate');
  late final _cairo_text_cluster_allocate = _cairo_text_cluster_allocatePtr
      .asFunction<ffi.Pointer<cairo_text_cluster_t> Function(int)>();

  void cairo_text_cluster_free(
    ffi.Pointer<cairo_text_cluster_t> clusters,
  ) {
    return _cairo_text_cluster_free(
      clusters,
    );
  }

  late final _cairo_text_cluster_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_text_cluster_t>)>>('cairo_text_cluster_free');
  late final _cairo_text_cluster_free = _cairo_text_cluster_freePtr
      .asFunction<void Function(ffi.Pointer<cairo_text_cluster_t>)>();

  void cairo_text_extents(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> utf8,
    ffi.Pointer<cairo_text_extents_t> extents,
  ) {
    return _cairo_text_extents(
      cr,
      utf8,
      extents,
    );
  }

  late final _cairo_text_extentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<cairo_text_extents_t>)>>('cairo_text_extents');
  late final _cairo_text_extents = _cairo_text_extentsPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cairo_text_extents_t>)>();

  void cairo_text_path(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Char> utf8,
  ) {
    return _cairo_text_path(
      cr,
      utf8,
    );
  }

  late final _cairo_text_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>)>>('cairo_text_path');
  late final _cairo_text_path = _cairo_text_pathPtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Char>)>();

  /// Toy fonts
  ffi.Pointer<cairo_font_face_t> cairo_toy_font_face_create(
    ffi.Pointer<ffi.Char> family,
    cairo_font_slant slant,
    cairo_font_weight weight,
  ) {
    return _cairo_toy_font_face_create(
      family,
      slant.value,
      weight.value,
    );
  }

  late final _cairo_toy_font_face_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<cairo_font_face_t> Function(ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('cairo_toy_font_face_create');
  late final _cairo_toy_font_face_create =
      _cairo_toy_font_face_createPtr.asFunction<
          ffi.Pointer<cairo_font_face_t> Function(
              ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> cairo_toy_font_face_get_family(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_toy_font_face_get_family(
      font_face,
    );
  }

  late final _cairo_toy_font_face_get_familyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_toy_font_face_get_family');
  late final _cairo_toy_font_face_get_family =
      _cairo_toy_font_face_get_familyPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<cairo_font_face_t>)>();

  cairo_font_slant cairo_toy_font_face_get_slant(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return cairo_font_slant.fromValue(_cairo_toy_font_face_get_slant(
      font_face,
    ));
  }

  late final _cairo_toy_font_face_get_slantPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_toy_font_face_get_slant');
  late final _cairo_toy_font_face_get_slant = _cairo_toy_font_face_get_slantPtr
      .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  cairo_font_weight cairo_toy_font_face_get_weight(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return cairo_font_weight.fromValue(_cairo_toy_font_face_get_weight(
      font_face,
    ));
  }

  late final _cairo_toy_font_face_get_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_toy_font_face_get_weight');
  late final _cairo_toy_font_face_get_weight =
      _cairo_toy_font_face_get_weightPtr
          .asFunction<int Function(ffi.Pointer<cairo_font_face_t>)>();

  void cairo_transform(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_matrix_t> matrix,
  ) {
    return _cairo_transform(
      cr,
      matrix,
    );
  }

  late final _cairo_transformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>,
              ffi.Pointer<cairo_matrix_t>)>>('cairo_transform');
  late final _cairo_transform = _cairo_transformPtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<cairo_matrix_t>)>();

  void cairo_translate(
    ffi.Pointer<cairo_t> cr,
    double tx,
    double ty,
  ) {
    return _cairo_translate(
      cr,
      tx,
      ty,
    );
  }

  late final _cairo_translatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Double,
              ffi.Double)>>('cairo_translate');
  late final _cairo_translate = _cairo_translatePtr
      .asFunction<void Function(ffi.Pointer<cairo_t>, double, double)>();

  /// User fonts
  ffi.Pointer<cairo_font_face_t> cairo_user_font_face_create() {
    return _cairo_user_font_face_create();
  }

  late final _cairo_user_font_face_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cairo_font_face_t> Function()>>(
          'cairo_user_font_face_create');
  late final _cairo_user_font_face_create = _cairo_user_font_face_createPtr
      .asFunction<ffi.Pointer<cairo_font_face_t> Function()>();

  /// User-font method getters
  cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_init_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_init_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_init_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_init_func');
  late final _cairo_user_font_face_get_init_func =
      _cairo_user_font_face_get_init_funcPtr.asFunction<
          cairo_user_scaled_font_init_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_render_glyph_func_t
      cairo_user_font_face_get_render_color_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_render_color_glyph_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_render_color_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_render_glyph_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_render_color_glyph_func');
  late final _cairo_user_font_face_get_render_color_glyph_func =
      _cairo_user_font_face_get_render_color_glyph_funcPtr.asFunction<
          cairo_user_scaled_font_render_glyph_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_render_glyph_func_t
      cairo_user_font_face_get_render_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_render_glyph_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_render_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_render_glyph_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_render_glyph_func');
  late final _cairo_user_font_face_get_render_glyph_func =
      _cairo_user_font_face_get_render_glyph_funcPtr.asFunction<
          cairo_user_scaled_font_render_glyph_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_text_to_glyphs_func_t
      cairo_user_font_face_get_text_to_glyphs_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_text_to_glyphs_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_text_to_glyphs_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_text_to_glyphs_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_text_to_glyphs_func');
  late final _cairo_user_font_face_get_text_to_glyphs_func =
      _cairo_user_font_face_get_text_to_glyphs_funcPtr.asFunction<
          cairo_user_scaled_font_text_to_glyphs_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  cairo_user_scaled_font_unicode_to_glyph_func_t
      cairo_user_font_face_get_unicode_to_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
  ) {
    return _cairo_user_font_face_get_unicode_to_glyph_func(
      font_face,
    );
  }

  late final _cairo_user_font_face_get_unicode_to_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              cairo_user_scaled_font_unicode_to_glyph_func_t Function(
                  ffi.Pointer<cairo_font_face_t>)>>(
      'cairo_user_font_face_get_unicode_to_glyph_func');
  late final _cairo_user_font_face_get_unicode_to_glyph_func =
      _cairo_user_font_face_get_unicode_to_glyph_funcPtr.asFunction<
          cairo_user_scaled_font_unicode_to_glyph_func_t Function(
              ffi.Pointer<cairo_font_face_t>)>();

  /// User-font method setters
  void cairo_user_font_face_set_init_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_init_func_t init_func,
  ) {
    return _cairo_user_font_face_set_init_func(
      font_face,
      init_func,
    );
  }

  late final _cairo_user_font_face_set_init_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_init_func_t)>>(
      'cairo_user_font_face_set_init_func');
  late final _cairo_user_font_face_set_init_func =
      _cairo_user_font_face_set_init_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_init_func_t)>();

  void cairo_user_font_face_set_render_color_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_render_glyph_func_t render_glyph_func,
  ) {
    return _cairo_user_font_face_set_render_color_glyph_func(
      font_face,
      render_glyph_func,
    );
  }

  late final _cairo_user_font_face_set_render_color_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_render_glyph_func_t)>>(
      'cairo_user_font_face_set_render_color_glyph_func');
  late final _cairo_user_font_face_set_render_color_glyph_func =
      _cairo_user_font_face_set_render_color_glyph_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_render_glyph_func_t)>();

  void cairo_user_font_face_set_render_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_render_glyph_func_t render_glyph_func,
  ) {
    return _cairo_user_font_face_set_render_glyph_func(
      font_face,
      render_glyph_func,
    );
  }

  late final _cairo_user_font_face_set_render_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_render_glyph_func_t)>>(
      'cairo_user_font_face_set_render_glyph_func');
  late final _cairo_user_font_face_set_render_glyph_func =
      _cairo_user_font_face_set_render_glyph_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_render_glyph_func_t)>();

  void cairo_user_font_face_set_text_to_glyphs_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func,
  ) {
    return _cairo_user_font_face_set_text_to_glyphs_func(
      font_face,
      text_to_glyphs_func,
    );
  }

  late final _cairo_user_font_face_set_text_to_glyphs_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_text_to_glyphs_func_t)>>(
      'cairo_user_font_face_set_text_to_glyphs_func');
  late final _cairo_user_font_face_set_text_to_glyphs_func =
      _cairo_user_font_face_set_text_to_glyphs_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_text_to_glyphs_func_t)>();

  void cairo_user_font_face_set_unicode_to_glyph_func(
    ffi.Pointer<cairo_font_face_t> font_face,
    cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func,
  ) {
    return _cairo_user_font_face_set_unicode_to_glyph_func(
      font_face,
      unicode_to_glyph_func,
    );
  }

  late final _cairo_user_font_face_set_unicode_to_glyph_funcPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<cairo_font_face_t>,
                  cairo_user_scaled_font_unicode_to_glyph_func_t)>>(
      'cairo_user_font_face_set_unicode_to_glyph_func');
  late final _cairo_user_font_face_set_unicode_to_glyph_func =
      _cairo_user_font_face_set_unicode_to_glyph_funcPtr.asFunction<
          void Function(ffi.Pointer<cairo_font_face_t>,
              cairo_user_scaled_font_unicode_to_glyph_func_t)>();

  ffi.Pointer<cairo_pattern_t> cairo_user_scaled_font_get_foreground_marker(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_user_scaled_font_get_foreground_marker(
      scaled_font,
    );
  }

  late final _cairo_user_scaled_font_get_foreground_markerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_pattern_t> Function(
                  ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_user_scaled_font_get_foreground_marker');
  late final _cairo_user_scaled_font_get_foreground_marker =
      _cairo_user_scaled_font_get_foreground_markerPtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_scaled_font_t>)>();

  ffi.Pointer<cairo_pattern_t> cairo_user_scaled_font_get_foreground_source(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
  ) {
    return _cairo_user_scaled_font_get_foreground_source(
      scaled_font,
    );
  }

  late final _cairo_user_scaled_font_get_foreground_sourcePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<cairo_pattern_t> Function(
                  ffi.Pointer<cairo_scaled_font_t>)>>(
      'cairo_user_scaled_font_get_foreground_source');
  late final _cairo_user_scaled_font_get_foreground_source =
      _cairo_user_scaled_font_get_foreground_sourcePtr.asFunction<
          ffi.Pointer<cairo_pattern_t> Function(
              ffi.Pointer<cairo_scaled_font_t>)>();

  void cairo_user_to_device(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
  ) {
    return _cairo_user_to_device(
      cr,
      x,
      y,
    );
  }

  late final _cairo_user_to_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_user_to_device');
  late final _cairo_user_to_device = _cairo_user_to_devicePtr.asFunction<
      void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  void cairo_user_to_device_distance(
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<ffi.Double> dx,
    ffi.Pointer<ffi.Double> dy,
  ) {
    return _cairo_user_to_device_distance(
      cr,
      dx,
      dy,
    );
  }

  late final _cairo_user_to_device_distancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('cairo_user_to_device_distance');
  late final _cairo_user_to_device_distance =
      _cairo_user_to_device_distancePtr.asFunction<
          void Function(ffi.Pointer<cairo_t>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int cairo_version() {
    return _cairo_version();
  }

  late final _cairo_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('cairo_version');
  late final _cairo_version = _cairo_versionPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> cairo_version_string() {
    return _cairo_version_string();
  }

  late final _cairo_version_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'cairo_version_string');
  late final _cairo_version_string =
      _cairo_version_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}

const int CAIRO_COLOR_PALETTE_DEFAULT = 0;

const int CAIRO_FONT_TYPE_ATSUI = 3;

const int CAIRO_HAS_FC_FONT = 1;

const int CAIRO_HAS_FT_FONT = 1;

const int CAIRO_HAS_GOBJECT_FUNCTIONS = 1;

const int CAIRO_HAS_IMAGE_SURFACE = 1;

const int CAIRO_HAS_MIME_SURFACE = 1;

const int CAIRO_HAS_OBSERVER_SURFACE = 1;

const int CAIRO_HAS_PDF_SURFACE = 1;

const int CAIRO_HAS_PNG_FUNCTIONS = 1;

const int CAIRO_HAS_PS_SURFACE = 1;

const int CAIRO_HAS_RECORDING_SURFACE = 1;

const int CAIRO_HAS_SCRIPT_SURFACE = 1;

const int CAIRO_HAS_SVG_SURFACE = 1;

const int CAIRO_HAS_TEE_SURFACE = 1;

const int CAIRO_HAS_USER_FONT = 1;

const int CAIRO_HAS_XCB_SHM_FUNCTIONS = 1;

const int CAIRO_HAS_XCB_SURFACE = 1;

const int CAIRO_HAS_XLIB_SURFACE = 1;

const int CAIRO_HAS_XLIB_XRENDER_SURFACE = 1;

const String CAIRO_MIME_TYPE_CCITT_FAX = 'image/g3fax';

const String CAIRO_MIME_TYPE_CCITT_FAX_PARAMS =
    'application/x-cairo.ccitt.params';

const String CAIRO_MIME_TYPE_EPS = 'application/postscript';

const String CAIRO_MIME_TYPE_EPS_PARAMS = 'application/x-cairo.eps.params';

const String CAIRO_MIME_TYPE_JBIG2 = 'application/x-cairo.jbig2';

const String CAIRO_MIME_TYPE_JBIG2_GLOBAL = 'application/x-cairo.jbig2-global';

const String CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID =
    'application/x-cairo.jbig2-global-id';

const String CAIRO_MIME_TYPE_JP2 = 'image/jp2';

const String CAIRO_MIME_TYPE_JPEG = 'image/jpeg';

const String CAIRO_MIME_TYPE_PNG = 'image/png';

const String CAIRO_MIME_TYPE_UNIQUE_ID = 'application/x-cairo.uuid';

const String CAIRO_MIME_TYPE_URI = 'text/x-uri';

const String CAIRO_TAG_CONTENT = 'cairo.content';

const String CAIRO_TAG_CONTENT_REF = 'cairo.content_ref';

const String CAIRO_TAG_DEST = 'cairo.dest';

const String CAIRO_TAG_LINK = 'Link';

const int CAIRO_VERSION = 11800;

const int CAIRO_VERSION_MAJOR = 1;

const int CAIRO_VERSION_MICRO = 0;

const int CAIRO_VERSION_MINOR = 18;

const String CAIRO_VERSION_STRING = '1.18.0';

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int typeAsInt;

  cairo_path_data_type get type => cairo_path_data_type.fromValue(typeAsInt);

  @ffi.Int()
  external int length;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class _cairo extends ffi.Opaque {}

final class _cairo_device extends ffi.Opaque {}

final class _cairo_font_face extends ffi.Opaque {}

final class _cairo_font_options extends ffi.Opaque {}

/// cairo_matrix_t:
/// @xx: xx component of the affine transformation
/// @yx: yx component of the affine transformation
/// @xy: xy component of the affine transformation
/// @yy: yy component of the affine transformation
/// @x0: X translation component of the affine transformation
/// @y0: Y translation component of the affine transformation
///
/// A #cairo_matrix_t holds an affine transformation, such as a scale,
/// rotation, shear, or a combination of those. The transformation of
/// a point (x, y) is given by:
/// <programlisting>
/// x_new = xx * x + xy * y + x0;
/// y_new = yx * x + yy * y + y0;
/// </programlisting>
///
/// Since: 1.0
final class _cairo_matrix extends ffi.Struct {
  @ffi.Double()
  external double xx;

  @ffi.Double()
  external double yx;

  @ffi.Double()
  external double xy;

  @ffi.Double()
  external double yy;

  @ffi.Double()
  external double x0;

  @ffi.Double()
  external double y0;
}

final class _cairo_path_data_t extends ffi.Union {
  external UnnamedStruct1 header;

  external UnnamedStruct2 point;
}

final class _cairo_pattern extends ffi.Opaque {}

/// cairo_rectangle_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle.
///
/// Since: 1.4
final class _cairo_rectangle extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

/// cairo_rectangle_int_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle with integer coordinates.
///
/// Since: 1.10
final class _cairo_rectangle_int extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

/// cairo_rectangle_list_t:
/// @status: Error status of the rectangle list
/// @rectangles: Array containing the rectangles
/// @num_rectangles: Number of rectangles in this list
///
/// A data structure for holding a dynamically allocated
/// array of rectangles.
///
/// Since: 1.4
final class _cairo_rectangle_list extends ffi.Struct {
  @ffi.UnsignedInt()
  external int statusAsInt;

  cairo_status1 get status => cairo_status1.fromValue(statusAsInt);

  external ffi.Pointer<cairo_rectangle_t> rectangles;

  @ffi.Int()
  external int num_rectangles;
}

final class _cairo_region extends ffi.Opaque {}

final class _cairo_scaled_font extends ffi.Opaque {}

final class _cairo_surface extends ffi.Opaque {}

/// cairo_user_data_key_t:
/// @unused: not used; ignore.
///
/// #cairo_user_data_key_t is used for attaching user data to cairo
/// data structures.  The actual contents of the struct is never used,
/// and there is no need to initialize the object; only the unique
/// address of a #cairo_data_key_t object is used.  Typically, you
/// would just use the address of a static #cairo_data_key_t object.
///
/// Since: 1.0
final class _cairo_user_data_key extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

/// cairo_antialias_t:
/// @CAIRO_ANTIALIAS_DEFAULT: Use the default antialiasing for
/// the subsystem and target device, since 1.0
/// @CAIRO_ANTIALIAS_NONE: Use a bilevel alpha mask, since 1.0
/// @CAIRO_ANTIALIAS_GRAY: Perform single-color antialiasing (using
/// shades of gray for black text on a white background, for example), since 1.0
/// @CAIRO_ANTIALIAS_SUBPIXEL: Perform antialiasing by taking
/// advantage of the order of subpixel elements on devices
/// such as LCD panels, since 1.0
/// @CAIRO_ANTIALIAS_FAST: Hint that the backend should perform some
/// antialiasing but prefer speed over quality, since 1.12
/// @CAIRO_ANTIALIAS_GOOD: The backend should balance quality against
/// performance, since 1.12
/// @CAIRO_ANTIALIAS_BEST: Hint that the backend should render at the highest
/// quality, sacrificing speed if necessary, since 1.12
///
/// Specifies the type of antialiasing to do when rendering text or shapes.
///
/// As it is not necessarily clear from the above what advantages a particular
/// antialias method provides, since 1.12, there is also a set of hints:
/// @CAIRO_ANTIALIAS_FAST: Allow the backend to degrade raster quality for speed
/// @CAIRO_ANTIALIAS_GOOD: A balance between speed and quality
/// @CAIRO_ANTIALIAS_BEST: A high-fidelity, but potentially slow, raster mode
///
/// These make no guarantee on how the backend will perform its rasterisation
/// (if it even rasterises!), nor that they have any differing effect other
/// than to enable some form of antialiasing. In the case of glyph rendering,
/// @CAIRO_ANTIALIAS_FAST and @CAIRO_ANTIALIAS_GOOD will be mapped to
/// @CAIRO_ANTIALIAS_GRAY, with @CAIRO_ANTALIAS_BEST being equivalent to
/// @CAIRO_ANTIALIAS_SUBPIXEL.
///
/// The interpretation of @CAIRO_ANTIALIAS_DEFAULT is left entirely up to
/// the backend, typically this will be similar to @CAIRO_ANTIALIAS_GOOD.
///
/// Since: 1.0
enum cairo_antialias {
  CAIRO_ANTIALIAS_DEFAULT(0),

  /// method
  CAIRO_ANTIALIAS_NONE(1),
  CAIRO_ANTIALIAS_GRAY(2),
  CAIRO_ANTIALIAS_SUBPIXEL(3),

  /// hints
  CAIRO_ANTIALIAS_FAST(4),
  CAIRO_ANTIALIAS_GOOD(5),
  CAIRO_ANTIALIAS_BEST(6);

  final int value;
  const cairo_antialias(this.value);

  static cairo_antialias fromValue(int value) => switch (value) {
        0 => CAIRO_ANTIALIAS_DEFAULT,
        1 => CAIRO_ANTIALIAS_NONE,
        2 => CAIRO_ANTIALIAS_GRAY,
        3 => CAIRO_ANTIALIAS_SUBPIXEL,
        4 => CAIRO_ANTIALIAS_FAST,
        5 => CAIRO_ANTIALIAS_GOOD,
        6 => CAIRO_ANTIALIAS_BEST,
        _ => throw ArgumentError("Unknown value for cairo_antialias: $value"),
      };
}

/// cairo_bool_t:
///
/// #cairo_bool_t is used for boolean values. Returns of type
/// #cairo_bool_t will always be either 0 or 1, but testing against
/// these values explicitly is not encouraged; just use the
/// value as a boolean condition.
///
/// <informalexample><programlisting>
/// if (cairo_in_stroke (cr, x, y)) {
/// /<!-- -->* do something *<!-- -->/
/// }
/// </programlisting></informalexample>
///
/// Since: 1.0
typedef cairo_bool_t = ffi.Int;
typedef Dartcairo_bool_t = int;

/// cairo_color_mode_t:
/// @CAIRO_COLOR_MODE_DEFAULT: Use the default color mode for
/// font backend and target device, since 1.18.
/// @CAIRO_COLOR_MODE_NO_COLOR: Disable rendering color glyphs. Glyphs are
/// always rendered as outline glyphs, since 1.18.
/// @CAIRO_COLOR_MODE_COLOR: Enable rendering color glyphs. If the font
/// contains a color presentation for a glyph, and when supported by
/// the font backend, the glyph will be rendered in color, since 1.18.
///
/// Specifies if color fonts are to be rendered using the color
/// glyphs or outline glyphs. Glyphs that do not have a color
/// presentation, and non-color fonts are not affected by this font
/// option.
///
/// Since: 1.18
enum cairo_color_mode {
  CAIRO_COLOR_MODE_DEFAULT(0),
  CAIRO_COLOR_MODE_NO_COLOR(1),
  CAIRO_COLOR_MODE_COLOR(2);

  final int value;
  const cairo_color_mode(this.value);

  static cairo_color_mode fromValue(int value) => switch (value) {
        0 => CAIRO_COLOR_MODE_DEFAULT,
        1 => CAIRO_COLOR_MODE_NO_COLOR,
        2 => CAIRO_COLOR_MODE_COLOR,
        _ => throw ArgumentError("Unknown value for cairo_color_mode: $value"),
      };
}

/// cairo_content_t:
/// @CAIRO_CONTENT_COLOR: The surface will hold color content only. (Since 1.0)
/// @CAIRO_CONTENT_ALPHA: The surface will hold alpha content only. (Since 1.0)
/// @CAIRO_CONTENT_COLOR_ALPHA: The surface will hold color and alpha content. (Since 1.0)
///
/// #cairo_content_t is used to describe the content that a surface will
/// contain, whether color information, alpha information (translucence
/// vs. opacity), or both.
///
/// Note: The large values here are designed to keep #cairo_content_t
/// values distinct from #cairo_format_t values so that the
/// implementation can detect the error if users confuse the two types.
///
/// Since: 1.0
enum cairo_content {
  CAIRO_CONTENT_COLOR(4096),
  CAIRO_CONTENT_ALPHA(8192),
  CAIRO_CONTENT_COLOR_ALPHA(12288);

  final int value;
  const cairo_content(this.value);

  static cairo_content fromValue(int value) => switch (value) {
        4096 => CAIRO_CONTENT_COLOR,
        8192 => CAIRO_CONTENT_ALPHA,
        12288 => CAIRO_CONTENT_COLOR_ALPHA,
        _ => throw ArgumentError("Unknown value for cairo_content: $value"),
      };
}

/// cairo_destroy_func_t:
/// @data: The data element being destroyed.
///
/// #cairo_destroy_func_t the type of function which is called when a
/// data element is destroyed. It is passed the pointer to the data
/// element and should free any memory and resources allocated for it.
///
/// Since: 1.0
typedef cairo_destroy_func_t
    = ffi.Pointer<ffi.NativeFunction<cairo_destroy_func_tFunction>>;
typedef cairo_destroy_func_tFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> data);
typedef Dartcairo_destroy_func_tFunction = void Function(
    ffi.Pointer<ffi.Void> data);

/// cairo_device_t:
///
/// A #cairo_device_t represents the driver interface for drawing
/// operations to a #cairo_surface_t.  There are different subtypes of
/// #cairo_device_t for different drawing backends.
///
/// The type of a device can be queried with cairo_device_get_type().
///
/// Memory management of #cairo_device_t is done with
/// cairo_device_reference() and cairo_device_destroy().
///
/// Since: 1.10
typedef cairo_device_t = _cairo_device;

/// cairo_device_type_t:
/// @CAIRO_DEVICE_TYPE_DRM: The device is of type Direct Render Manager, since 1.10
/// @CAIRO_DEVICE_TYPE_GL: The device is of type OpenGL, since 1.10
/// @CAIRO_DEVICE_TYPE_SCRIPT: The device is of type script, since 1.10
/// @CAIRO_DEVICE_TYPE_XCB: The device is of type xcb, since 1.10
/// @CAIRO_DEVICE_TYPE_XLIB: The device is of type xlib, since 1.10
/// @CAIRO_DEVICE_TYPE_XML: The device is of type XML, since 1.10
/// @CAIRO_DEVICE_TYPE_COGL: The device is of type cogl, since 1.12
/// @CAIRO_DEVICE_TYPE_WIN32: The device is of type win32, since 1.12
/// @CAIRO_DEVICE_TYPE_INVALID: The device is invalid, since 1.10
///
/// #cairo_device_type_t is used to describe the type of a given
/// device. The devices types are also known as "backends" within cairo.
///
/// The device type can be queried with cairo_device_get_type()
///
/// The various #cairo_device_t functions can be used with devices of
/// any type, but some backends also provide type-specific functions
/// that must only be called with a device of the appropriate
/// type. These functions have names that begin with
/// <literal>cairo_<emphasis>type</emphasis>_device</literal> such as
/// cairo_xcb_device_debug_cap_xrender_version().
///
/// The behavior of calling a type-specific function with a device of
/// the wrong type is undefined.
///
/// New entries may be added in future versions.
///
/// Since: 1.10
enum cairo_device_type {
  CAIRO_DEVICE_TYPE_DRM(0),
  CAIRO_DEVICE_TYPE_GL(1),
  CAIRO_DEVICE_TYPE_SCRIPT(2),
  CAIRO_DEVICE_TYPE_XCB(3),
  CAIRO_DEVICE_TYPE_XLIB(4),
  CAIRO_DEVICE_TYPE_XML(5),
  CAIRO_DEVICE_TYPE_COGL(6),
  CAIRO_DEVICE_TYPE_WIN32(7),
  CAIRO_DEVICE_TYPE_INVALID(-1);

  final int value;
  const cairo_device_type(this.value);

  static cairo_device_type fromValue(int value) => switch (value) {
        0 => CAIRO_DEVICE_TYPE_DRM,
        1 => CAIRO_DEVICE_TYPE_GL,
        2 => CAIRO_DEVICE_TYPE_SCRIPT,
        3 => CAIRO_DEVICE_TYPE_XCB,
        4 => CAIRO_DEVICE_TYPE_XLIB,
        5 => CAIRO_DEVICE_TYPE_XML,
        6 => CAIRO_DEVICE_TYPE_COGL,
        7 => CAIRO_DEVICE_TYPE_WIN32,
        -1 => CAIRO_DEVICE_TYPE_INVALID,
        _ => throw ArgumentError("Unknown value for cairo_device_type: $value"),
      };
}

/// cairo_dither_t:
/// @CAIRO_DITHER_NONE: No dithering.
/// @CAIRO_DITHER_DEFAULT: Default choice at cairo compile time. Currently NONE.
/// @CAIRO_DITHER_FAST: Fastest dithering algorithm supported by the backend
/// @CAIRO_DITHER_GOOD: An algorithm with smoother dithering than FAST
/// @CAIRO_DITHER_BEST: Best algorithm available in the backend
///
/// Dither is an intentionally applied form of noise used to randomize
/// quantization error, preventing large-scale patterns such as color banding
/// in images (e.g. for gradients). Ordered dithering applies a precomputed
/// threshold matrix to spread the errors smoothly.
///
/// #cairo_dither_t is modeled on pixman dithering algorithm choice.
/// As of Pixman 0.40, FAST corresponds to a 8x8 ordered bayer noise and GOOD
/// and BEST use an ordered 64x64 precomputed blue noise.
///
/// Since: 1.18
enum cairo_dither {
  CAIRO_DITHER_NONE(0),
  CAIRO_DITHER_DEFAULT(1),
  CAIRO_DITHER_FAST(2),
  CAIRO_DITHER_GOOD(3),
  CAIRO_DITHER_BEST(4);

  final int value;
  const cairo_dither(this.value);

  static cairo_dither fromValue(int value) => switch (value) {
        0 => CAIRO_DITHER_NONE,
        1 => CAIRO_DITHER_DEFAULT,
        2 => CAIRO_DITHER_FAST,
        3 => CAIRO_DITHER_GOOD,
        4 => CAIRO_DITHER_BEST,
        _ => throw ArgumentError("Unknown value for cairo_dither: $value"),
      };
}

/// cairo_extend_t:
/// @CAIRO_EXTEND_NONE: pixels outside of the source pattern
/// are fully transparent (Since 1.0)
/// @CAIRO_EXTEND_REPEAT: the pattern is tiled by repeating (Since 1.0)
/// @CAIRO_EXTEND_REFLECT: the pattern is tiled by reflecting
/// at the edges (Since 1.0; but only implemented for surface patterns since 1.6)
/// @CAIRO_EXTEND_PAD: pixels outside of the pattern copy
/// the closest pixel from the source (Since 1.2; but only
/// implemented for surface patterns since 1.6)
///
/// #cairo_extend_t is used to describe how pattern color/alpha will be
/// determined for areas "outside" the pattern's natural area, (for
/// example, outside the surface bounds or outside the gradient
/// geometry).
///
/// Mesh patterns are not affected by the extend mode.
///
/// The default extend mode is %CAIRO_EXTEND_NONE for surface patterns
/// and %CAIRO_EXTEND_PAD for gradient patterns.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
enum cairo_extend {
  CAIRO_EXTEND_NONE(0),
  CAIRO_EXTEND_REPEAT(1),
  CAIRO_EXTEND_REFLECT(2),
  CAIRO_EXTEND_PAD(3);

  final int value;
  const cairo_extend(this.value);

  static cairo_extend fromValue(int value) => switch (value) {
        0 => CAIRO_EXTEND_NONE,
        1 => CAIRO_EXTEND_REPEAT,
        2 => CAIRO_EXTEND_REFLECT,
        3 => CAIRO_EXTEND_PAD,
        _ => throw ArgumentError("Unknown value for cairo_extend: $value"),
      };
}

/// cairo_fill_rule_t:
/// @CAIRO_FILL_RULE_WINDING: If the path crosses the ray from
/// left-to-right, counts +1. If the path crosses the ray
/// from right to left, counts -1. (Left and right are determined
/// from the perspective of looking along the ray from the starting
/// point.) If the total count is non-zero, the point will be filled. (Since 1.0)
/// @CAIRO_FILL_RULE_EVEN_ODD: Counts the total number of
/// intersections, without regard to the orientation of the contour. If
/// the total number of intersections is odd, the point will be
/// filled. (Since 1.0)
///
/// #cairo_fill_rule_t is used to select how paths are filled. For both
/// fill rules, whether or not a point is included in the fill is
/// determined by taking a ray from that point to infinity and looking
/// at intersections with the path. The ray can be in any direction,
/// as long as it doesn't pass through the end point of a segment
/// or have a tricky intersection such as intersecting tangent to the path.
/// (Note that filling is not actually implemented in this way. This
/// is just a description of the rule that is applied.)
///
/// The default fill rule is %CAIRO_FILL_RULE_WINDING.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
enum cairo_fill_rule {
  CAIRO_FILL_RULE_WINDING(0),
  CAIRO_FILL_RULE_EVEN_ODD(1);

  final int value;
  const cairo_fill_rule(this.value);

  static cairo_fill_rule fromValue(int value) => switch (value) {
        0 => CAIRO_FILL_RULE_WINDING,
        1 => CAIRO_FILL_RULE_EVEN_ODD,
        _ => throw ArgumentError("Unknown value for cairo_fill_rule: $value"),
      };
}

/// cairo_filter_t:
/// @CAIRO_FILTER_FAST: A high-performance filter, with quality similar
/// to %CAIRO_FILTER_NEAREST (Since 1.0)
/// @CAIRO_FILTER_GOOD: A reasonable-performance filter, with quality
/// similar to %CAIRO_FILTER_BILINEAR (Since 1.0)
/// @CAIRO_FILTER_BEST: The highest-quality available, performance may
/// not be suitable for interactive use. (Since 1.0)
/// @CAIRO_FILTER_NEAREST: Nearest-neighbor filtering (Since 1.0)
/// @CAIRO_FILTER_BILINEAR: Linear interpolation in two dimensions (Since 1.0)
/// @CAIRO_FILTER_GAUSSIAN: This filter value is currently
/// unimplemented, and should not be used in current code. (Since 1.0)
///
/// #cairo_filter_t is used to indicate what filtering should be
/// applied when reading pixel values from patterns. See
/// cairo_pattern_set_filter() for indicating the desired filter to be
/// used with a particular pattern.
///
/// Since: 1.0
enum cairo_filter {
  CAIRO_FILTER_FAST(0),
  CAIRO_FILTER_GOOD(1),
  CAIRO_FILTER_BEST(2),
  CAIRO_FILTER_NEAREST(3),
  CAIRO_FILTER_BILINEAR(4),
  CAIRO_FILTER_GAUSSIAN(5);

  final int value;
  const cairo_filter(this.value);

  static cairo_filter fromValue(int value) => switch (value) {
        0 => CAIRO_FILTER_FAST,
        1 => CAIRO_FILTER_GOOD,
        2 => CAIRO_FILTER_BEST,
        3 => CAIRO_FILTER_NEAREST,
        4 => CAIRO_FILTER_BILINEAR,
        5 => CAIRO_FILTER_GAUSSIAN,
        _ => throw ArgumentError("Unknown value for cairo_filter: $value"),
      };
}

/// cairo_font_extents_t:
/// @ascent: the distance that the font extends above the baseline.
/// Note that this is not always exactly equal to the maximum
/// of the extents of all the glyphs in the font, but rather
/// is picked to express the font designer's intent as to
/// how the font should align with elements above it.
/// @descent: the distance that the font extends below the baseline.
/// This value is positive for typical fonts that include
/// portions below the baseline. Note that this is not always
/// exactly equal to the maximum of the extents of all the
/// glyphs in the font, but rather is picked to express the
/// font designer's intent as to how the font should
/// align with elements below it.
/// @height: the recommended vertical distance between baselines when
/// setting consecutive lines of text with the font. This
/// is greater than @ascent+@descent by a
/// quantity known as the <firstterm>line spacing</firstterm>
/// or <firstterm>external leading</firstterm>. When space
/// is at a premium, most fonts can be set with only
/// a distance of @ascent+@descent between lines.
/// @max_x_advance: the maximum distance in the X direction that
/// the origin is advanced for any glyph in the font.
/// @max_y_advance: the maximum distance in the Y direction that
/// the origin is advanced for any glyph in the font.
/// This will be zero for normal fonts used for horizontal
/// writing. (The scripts of East Asia are sometimes written
/// vertically.)
///
/// The #cairo_font_extents_t structure stores metric information for
/// a font. Values are given in the current user-space coordinate
/// system.
///
/// Because font metrics are in user-space coordinates, they are
/// mostly, but not entirely, independent of the current transformation
/// matrix. If you call <literal>cairo_scale(cr, 2.0, 2.0)</literal>,
/// text will be drawn twice as big, but the reported text extents will
/// not be doubled. They will change slightly due to hinting (so you
/// can't assume that metrics are independent of the transformation
/// matrix), but otherwise will remain unchanged.
///
/// Since: 1.0
final class cairo_font_extents_t extends ffi.Struct {
  @ffi.Double()
  external double ascent;

  @ffi.Double()
  external double descent;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double max_x_advance;

  @ffi.Double()
  external double max_y_advance;
}

/// cairo_font_face_t:
///
/// A #cairo_font_face_t specifies all aspects of a font other
/// than the size or font matrix (a font matrix is used to distort
/// a font by shearing it or scaling it unequally in the two
/// directions) . A font face can be set on a #cairo_t by using
/// cairo_set_font_face(); the size and font matrix are set with
/// cairo_set_font_size() and cairo_set_font_matrix().
///
/// There are various types of font faces, depending on the
/// <firstterm>font backend</firstterm> they use. The type of a
/// font face can be queried using cairo_font_face_get_type().
///
/// Memory management of #cairo_font_face_t is done with
/// cairo_font_face_reference() and cairo_font_face_destroy().
///
/// Since: 1.0
typedef cairo_font_face_t = _cairo_font_face;

/// cairo_font_options_t:
///
/// An opaque structure holding all options that are used when
/// rendering fonts.
///
/// Individual features of a #cairo_font_options_t can be set or
/// accessed using functions named
/// <function>cairo_font_options_set_<emphasis>feature_name</emphasis>()</function> and
/// <function>cairo_font_options_get_<emphasis>feature_name</emphasis>()</function>, like
/// cairo_font_options_set_antialias() and
/// cairo_font_options_get_antialias().
///
/// New features may be added to a #cairo_font_options_t in the
/// future.  For this reason, cairo_font_options_copy(),
/// cairo_font_options_equal(), cairo_font_options_merge(), and
/// cairo_font_options_hash() should be used to copy, check
/// for equality, merge, or compute a hash value of
/// #cairo_font_options_t objects.
///
/// Since: 1.0
typedef cairo_font_options_t = _cairo_font_options;

/// cairo_font_slant_t:
/// @CAIRO_FONT_SLANT_NORMAL: Upright font style, since 1.0
/// @CAIRO_FONT_SLANT_ITALIC: Italic font style, since 1.0
/// @CAIRO_FONT_SLANT_OBLIQUE: Oblique font style, since 1.0
///
/// Specifies variants of a font face based on their slant.
///
/// Since: 1.0
enum cairo_font_slant {
  CAIRO_FONT_SLANT_NORMAL(0),
  CAIRO_FONT_SLANT_ITALIC(1),
  CAIRO_FONT_SLANT_OBLIQUE(2);

  final int value;
  const cairo_font_slant(this.value);

  static cairo_font_slant fromValue(int value) => switch (value) {
        0 => CAIRO_FONT_SLANT_NORMAL,
        1 => CAIRO_FONT_SLANT_ITALIC,
        2 => CAIRO_FONT_SLANT_OBLIQUE,
        _ => throw ArgumentError("Unknown value for cairo_font_slant: $value"),
      };
}

/// cairo_font_type_t:
/// @CAIRO_FONT_TYPE_TOY: The font was created using cairo's toy font api (Since: 1.2)
/// @CAIRO_FONT_TYPE_FT: The font is of type FreeType (Since: 1.2)
/// @CAIRO_FONT_TYPE_WIN32: The font is of type Win32 (Since: 1.2)
/// @CAIRO_FONT_TYPE_QUARTZ: The font is of type Quartz (Since: 1.6, in 1.2 and
/// 1.4 it was named CAIRO_FONT_TYPE_ATSUI)
/// @CAIRO_FONT_TYPE_USER: The font was create using cairo's user font api (Since: 1.8)
/// @CAIRO_FONT_TYPE_DWRITE: The font is of type Win32 DWrite (Since: 1.18)
///
/// #cairo_font_type_t is used to describe the type of a given font
/// face or scaled font. The font types are also known as "font
/// backends" within cairo.
///
/// The type of a font face is determined by the function used to
/// create it, which will generally be of the form
/// <function>cairo_<emphasis>type</emphasis>_font_face_create(<!-- -->)</function>.
/// The font face type can be queried with cairo_font_face_get_type()
///
/// The various #cairo_font_face_t functions can be used with a font face
/// of any type.
///
/// The type of a scaled font is determined by the type of the font
/// face passed to cairo_scaled_font_create(). The scaled font type can
/// be queried with cairo_scaled_font_get_type()
///
/// The various #cairo_scaled_font_t functions can be used with scaled
/// fonts of any type, but some font backends also provide
/// type-specific functions that must only be called with a scaled font
/// of the appropriate type. These functions have names that begin with
/// <function>cairo_<emphasis>type</emphasis>_scaled_font(<!-- -->)</function>
/// such as cairo_ft_scaled_font_lock_face().
///
/// The behavior of calling a type-specific function with a scaled font
/// of the wrong type is undefined.
///
/// New entries may be added in future versions.
///
/// Since: 1.2
enum cairo_font_type {
  CAIRO_FONT_TYPE_TOY(0),
  CAIRO_FONT_TYPE_FT(1),
  CAIRO_FONT_TYPE_WIN32(2),
  CAIRO_FONT_TYPE_QUARTZ(3),
  CAIRO_FONT_TYPE_USER(4),
  CAIRO_FONT_TYPE_DWRITE(5);

  final int value;
  const cairo_font_type(this.value);

  static cairo_font_type fromValue(int value) => switch (value) {
        0 => CAIRO_FONT_TYPE_TOY,
        1 => CAIRO_FONT_TYPE_FT,
        2 => CAIRO_FONT_TYPE_WIN32,
        3 => CAIRO_FONT_TYPE_QUARTZ,
        4 => CAIRO_FONT_TYPE_USER,
        5 => CAIRO_FONT_TYPE_DWRITE,
        _ => throw ArgumentError("Unknown value for cairo_font_type: $value"),
      };
}

/// cairo_font_weight_t:
/// @CAIRO_FONT_WEIGHT_NORMAL: Normal font weight, since 1.0
/// @CAIRO_FONT_WEIGHT_BOLD: Bold font weight, since 1.0
///
/// Specifies variants of a font face based on their weight.
///
/// Since: 1.0
enum cairo_font_weight {
  CAIRO_FONT_WEIGHT_NORMAL(0),
  CAIRO_FONT_WEIGHT_BOLD(1);

  final int value;
  const cairo_font_weight(this.value);

  static cairo_font_weight fromValue(int value) => switch (value) {
        0 => CAIRO_FONT_WEIGHT_NORMAL,
        1 => CAIRO_FONT_WEIGHT_BOLD,
        _ => throw ArgumentError("Unknown value for cairo_font_weight: $value"),
      };
}

/// cairo_format_t:
/// @CAIRO_FORMAT_INVALID: no such format exists or is supported.
/// @CAIRO_FORMAT_ARGB32: each pixel is a 32-bit quantity, with
/// alpha in the upper 8 bits, then red, then green, then blue.
/// The 32-bit quantities are stored native-endian. Pre-multiplied
/// alpha is used. (That is, 50% transparent red is 0x80800000,
/// not 0x80ff0000.) (Since 1.0)
/// @CAIRO_FORMAT_RGB24: each pixel is a 32-bit quantity, with
/// the upper 8 bits unused. Red, Green, and Blue are stored
/// in the remaining 24 bits in that order. (Since 1.0)
/// @CAIRO_FORMAT_A8: each pixel is a 8-bit quantity holding
/// an alpha value. (Since 1.0)
/// @CAIRO_FORMAT_A1: each pixel is a 1-bit quantity holding
/// an alpha value. Pixels are packed together into 32-bit
/// quantities. The ordering of the bits matches the
/// endianness of the platform. On a big-endian machine, the
/// first pixel is in the uppermost bit, on a little-endian
/// machine the first pixel is in the least-significant bit. (Since 1.0)
/// @CAIRO_FORMAT_RGB16_565: each pixel is a 16-bit quantity
/// with red in the upper 5 bits, then green in the middle
/// 6 bits, and blue in the lower 5 bits. (Since 1.2)
/// @CAIRO_FORMAT_RGB30: like RGB24 but with 10bpc. (Since 1.12)
/// @CAIRO_FORMAT_RGB96F: 3 floats, R, G, B. (Since 1.17.2)
/// @CAIRO_FORMAT_RGBA128F: 4 floats, R, G, B, A. (Since 1.17.2)
///
/// #cairo_format_t is used to identify the memory format of
/// image data.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
enum cairo_format {
  CAIRO_FORMAT_INVALID(-1),
  CAIRO_FORMAT_ARGB32(0),
  CAIRO_FORMAT_RGB24(1),
  CAIRO_FORMAT_A8(2),
  CAIRO_FORMAT_A1(3),
  CAIRO_FORMAT_RGB16_565(4),
  CAIRO_FORMAT_RGB30(5),
  CAIRO_FORMAT_RGB96F(6),
  CAIRO_FORMAT_RGBA128F(7);

  final int value;
  const cairo_format(this.value);

  static cairo_format fromValue(int value) => switch (value) {
        -1 => CAIRO_FORMAT_INVALID,
        0 => CAIRO_FORMAT_ARGB32,
        1 => CAIRO_FORMAT_RGB24,
        2 => CAIRO_FORMAT_A8,
        3 => CAIRO_FORMAT_A1,
        4 => CAIRO_FORMAT_RGB16_565,
        5 => CAIRO_FORMAT_RGB30,
        6 => CAIRO_FORMAT_RGB96F,
        7 => CAIRO_FORMAT_RGBA128F,
        _ => throw ArgumentError("Unknown value for cairo_format: $value"),
      };
}

/// cairo_glyph_t:
/// @index: glyph index in the font. The exact interpretation of the
/// glyph index depends on the font technology being used.
/// @x: the offset in the X direction between the origin used for
/// drawing or measuring the string and the origin of this glyph.
/// @y: the offset in the Y direction between the origin used for
/// drawing or measuring the string and the origin of this glyph.
///
/// The #cairo_glyph_t structure holds information about a single glyph
/// when drawing or measuring text. A font is (in simple terms) a
/// collection of shapes used to draw text. A glyph is one of these
/// shapes. There can be multiple glyphs for a single character
/// (alternates to be used in different contexts, for example), or a
/// glyph can be a <firstterm>ligature</firstterm> of multiple
/// characters. Cairo doesn't expose any way of converting input text
/// into glyphs, so in order to use the Cairo interfaces that take
/// arrays of glyphs, you must directly access the appropriate
/// underlying font system.
///
/// Note that the offsets given by @x and @y are not cumulative. When
/// drawing or measuring text, each glyph is individually positioned
/// with respect to the overall origin
///
/// Since: 1.0
final class cairo_glyph_t extends ffi.Struct {
  @ffi.UnsignedLong()
  external int index;

  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

/// cairo_hint_metrics_t:
/// @CAIRO_HINT_METRICS_DEFAULT: Hint metrics in the default
/// manner for the font backend and target device, since 1.0
/// @CAIRO_HINT_METRICS_OFF: Do not hint font metrics, since 1.0
/// @CAIRO_HINT_METRICS_ON: Hint font metrics, since 1.0
///
/// Specifies whether to hint font metrics; hinting font metrics
/// means quantizing them so that they are integer values in
/// device space. Doing this improves the consistency of
/// letter and line spacing, however it also means that text
/// will be laid out differently at different zoom factors.
///
/// Since: 1.0
enum cairo_hint_metrics {
  CAIRO_HINT_METRICS_DEFAULT(0),
  CAIRO_HINT_METRICS_OFF(1),
  CAIRO_HINT_METRICS_ON(2);

  final int value;
  const cairo_hint_metrics(this.value);

  static cairo_hint_metrics fromValue(int value) => switch (value) {
        0 => CAIRO_HINT_METRICS_DEFAULT,
        1 => CAIRO_HINT_METRICS_OFF,
        2 => CAIRO_HINT_METRICS_ON,
        _ =>
          throw ArgumentError("Unknown value for cairo_hint_metrics: $value"),
      };
}

/// cairo_hint_style_t:
/// @CAIRO_HINT_STYLE_DEFAULT: Use the default hint style for
/// font backend and target device, since 1.0
/// @CAIRO_HINT_STYLE_NONE: Do not hint outlines, since 1.0
/// @CAIRO_HINT_STYLE_SLIGHT: Hint outlines slightly to improve
/// contrast while retaining good fidelity to the original
/// shapes, since 1.0
/// @CAIRO_HINT_STYLE_MEDIUM: Hint outlines with medium strength
/// giving a compromise between fidelity to the original shapes
/// and contrast, since 1.0
/// @CAIRO_HINT_STYLE_FULL: Hint outlines to maximize contrast, since 1.0
///
/// Specifies the type of hinting to do on font outlines. Hinting
/// is the process of fitting outlines to the pixel grid in order
/// to improve the appearance of the result. Since hinting outlines
/// involves distorting them, it also reduces the faithfulness
/// to the original outline shapes. Not all of the outline hinting
/// styles are supported by all font backends.
///
/// New entries may be added in future versions.
///
/// Since: 1.0
enum cairo_hint_style {
  CAIRO_HINT_STYLE_DEFAULT(0),
  CAIRO_HINT_STYLE_NONE(1),
  CAIRO_HINT_STYLE_SLIGHT(2),
  CAIRO_HINT_STYLE_MEDIUM(3),
  CAIRO_HINT_STYLE_FULL(4);

  final int value;
  const cairo_hint_style(this.value);

  static cairo_hint_style fromValue(int value) => switch (value) {
        0 => CAIRO_HINT_STYLE_DEFAULT,
        1 => CAIRO_HINT_STYLE_NONE,
        2 => CAIRO_HINT_STYLE_SLIGHT,
        3 => CAIRO_HINT_STYLE_MEDIUM,
        4 => CAIRO_HINT_STYLE_FULL,
        _ => throw ArgumentError("Unknown value for cairo_hint_style: $value"),
      };
}

/// cairo_line_cap_t:
/// @CAIRO_LINE_CAP_BUTT: start(stop) the line exactly at the start(end) point (Since 1.0)
/// @CAIRO_LINE_CAP_ROUND: use a round ending, the center of the circle is the end point (Since 1.0)
/// @CAIRO_LINE_CAP_SQUARE: use squared ending, the center of the square is the end point (Since 1.0)
///
/// Specifies how to render the endpoints of the path when stroking.
///
/// The default line cap style is %CAIRO_LINE_CAP_BUTT.
///
/// Since: 1.0
enum cairo_line_cap {
  CAIRO_LINE_CAP_BUTT(0),
  CAIRO_LINE_CAP_ROUND(1),
  CAIRO_LINE_CAP_SQUARE(2);

  final int value;
  const cairo_line_cap(this.value);

  static cairo_line_cap fromValue(int value) => switch (value) {
        0 => CAIRO_LINE_CAP_BUTT,
        1 => CAIRO_LINE_CAP_ROUND,
        2 => CAIRO_LINE_CAP_SQUARE,
        _ => throw ArgumentError("Unknown value for cairo_line_cap: $value"),
      };
}

/// cairo_line_join_t:
/// @CAIRO_LINE_JOIN_MITER: use a sharp (angled) corner, see
/// cairo_set_miter_limit() (Since 1.0)
/// @CAIRO_LINE_JOIN_ROUND: use a rounded join, the center of the circle is the
/// joint point (Since 1.0)
/// @CAIRO_LINE_JOIN_BEVEL: use a cut-off join, the join is cut off at half
/// the line width from the joint point (Since 1.0)
///
/// Specifies how to render the junction of two lines when stroking.
///
/// The default line join style is %CAIRO_LINE_JOIN_MITER.
///
/// Since: 1.0
enum cairo_line_join {
  CAIRO_LINE_JOIN_MITER(0),
  CAIRO_LINE_JOIN_ROUND(1),
  CAIRO_LINE_JOIN_BEVEL(2);

  final int value;
  const cairo_line_join(this.value);

  static cairo_line_join fromValue(int value) => switch (value) {
        0 => CAIRO_LINE_JOIN_MITER,
        1 => CAIRO_LINE_JOIN_ROUND,
        2 => CAIRO_LINE_JOIN_BEVEL,
        _ => throw ArgumentError("Unknown value for cairo_line_join: $value"),
      };
}

/// cairo_matrix_t:
/// @xx: xx component of the affine transformation
/// @yx: yx component of the affine transformation
/// @xy: xy component of the affine transformation
/// @yy: yy component of the affine transformation
/// @x0: X translation component of the affine transformation
/// @y0: Y translation component of the affine transformation
///
/// A #cairo_matrix_t holds an affine transformation, such as a scale,
/// rotation, shear, or a combination of those. The transformation of
/// a point (x, y) is given by:
/// <programlisting>
/// x_new = xx * x + xy * y + x0;
/// y_new = yx * x + yy * y + y0;
/// </programlisting>
///
/// Since: 1.0
typedef cairo_matrix_t = _cairo_matrix;

/// cairo_operator_t:
/// @CAIRO_OPERATOR_CLEAR: clear destination layer (bounded) (Since 1.0)
/// @CAIRO_OPERATOR_SOURCE: replace destination layer (bounded) (Since 1.0)
/// @CAIRO_OPERATOR_OVER: draw source layer on top of destination layer
/// (bounded) (Since 1.0)
/// @CAIRO_OPERATOR_IN: draw source where there was destination content
/// (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_OUT: draw source where there was no destination
/// content (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_ATOP: draw source on top of destination content and
/// only there (Since 1.0)
/// @CAIRO_OPERATOR_DEST: ignore the source (Since 1.0)
/// @CAIRO_OPERATOR_DEST_OVER: draw destination on top of source (Since 1.0)
/// @CAIRO_OPERATOR_DEST_IN: leave destination only where there was
/// source content (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_DEST_OUT: leave destination only where there was no
/// source content (Since 1.0)
/// @CAIRO_OPERATOR_DEST_ATOP: leave destination on top of source content
/// and only there (unbounded) (Since 1.0)
/// @CAIRO_OPERATOR_XOR: source and destination are shown where there is only
/// one of them (Since 1.0)
/// @CAIRO_OPERATOR_ADD: source and destination layers are accumulated (Since 1.0)
/// @CAIRO_OPERATOR_SATURATE: like over, but assuming source and dest are
/// disjoint geometries (Since 1.0)
/// @CAIRO_OPERATOR_MULTIPLY: source and destination layers are multiplied.
/// This causes the result to be at least as dark as the darker inputs. (Since 1.10)
/// @CAIRO_OPERATOR_SCREEN: source and destination are complemented and
/// multiplied. This causes the result to be at least as light as the lighter
/// inputs. (Since 1.10)
/// @CAIRO_OPERATOR_OVERLAY: multiplies or screens, depending on the
/// lightness of the destination color. (Since 1.10)
/// @CAIRO_OPERATOR_DARKEN: replaces the destination with the source if it
/// is darker, otherwise keeps the source. (Since 1.10)
/// @CAIRO_OPERATOR_LIGHTEN: replaces the destination with the source if it
/// is lighter, otherwise keeps the source. (Since 1.10)
/// @CAIRO_OPERATOR_COLOR_DODGE: brightens the destination color to reflect
/// the source color. (Since 1.10)
/// @CAIRO_OPERATOR_COLOR_BURN: darkens the destination color to reflect
/// the source color. (Since 1.10)
/// @CAIRO_OPERATOR_HARD_LIGHT: Multiplies or screens, dependent on source
/// color. (Since 1.10)
/// @CAIRO_OPERATOR_SOFT_LIGHT: Darkens or lightens, dependent on source
/// color. (Since 1.10)
/// @CAIRO_OPERATOR_DIFFERENCE: Takes the difference of the source and
/// destination color. (Since 1.10)
/// @CAIRO_OPERATOR_EXCLUSION: Produces an effect similar to difference, but
/// with lower contrast. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_HUE: Creates a color with the hue of the source
/// and the saturation and luminosity of the target. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_SATURATION: Creates a color with the saturation
/// of the source and the hue and luminosity of the target. Painting with
/// this mode onto a gray area produces no change. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_COLOR: Creates a color with the hue and saturation
/// of the source and the luminosity of the target. This preserves the gray
/// levels of the target and is useful for coloring monochrome images or
/// tinting color images. (Since 1.10)
/// @CAIRO_OPERATOR_HSL_LUMINOSITY: Creates a color with the luminosity of
/// the source and the hue and saturation of the target. This produces an
/// inverse effect to @CAIRO_OPERATOR_HSL_COLOR. (Since 1.10)
///
/// #cairo_operator_t is used to set the compositing operator for all cairo
/// drawing operations.
///
/// The default operator is %CAIRO_OPERATOR_OVER.
///
/// The operators marked as <firstterm>unbounded</firstterm> modify their
/// destination even outside of the mask layer (that is, their effect is not
/// bound by the mask layer).  However, their effect can still be limited by
/// way of clipping.
///
/// To keep things simple, the operator descriptions here
/// document the behavior for when both source and destination are either fully
/// transparent or fully opaque.  The actual implementation works for
/// translucent layers too.
/// For a more detailed explanation of the effects of each operator, including
/// the mathematical definitions, see
/// <ulink url="https://cairographics.org/operators/">https://cairographics.org/operators/</ulink>.
///
/// Since: 1.0
enum cairo_operator {
  CAIRO_OPERATOR_CLEAR(0),
  CAIRO_OPERATOR_SOURCE(1),
  CAIRO_OPERATOR_OVER(2),
  CAIRO_OPERATOR_IN(3),
  CAIRO_OPERATOR_OUT(4),
  CAIRO_OPERATOR_ATOP(5),
  CAIRO_OPERATOR_DEST(6),
  CAIRO_OPERATOR_DEST_OVER(7),
  CAIRO_OPERATOR_DEST_IN(8),
  CAIRO_OPERATOR_DEST_OUT(9),
  CAIRO_OPERATOR_DEST_ATOP(10),
  CAIRO_OPERATOR_XOR(11),
  CAIRO_OPERATOR_ADD(12),
  CAIRO_OPERATOR_SATURATE(13),
  CAIRO_OPERATOR_MULTIPLY(14),
  CAIRO_OPERATOR_SCREEN(15),
  CAIRO_OPERATOR_OVERLAY(16),
  CAIRO_OPERATOR_DARKEN(17),
  CAIRO_OPERATOR_LIGHTEN(18),
  CAIRO_OPERATOR_COLOR_DODGE(19),
  CAIRO_OPERATOR_COLOR_BURN(20),
  CAIRO_OPERATOR_HARD_LIGHT(21),
  CAIRO_OPERATOR_SOFT_LIGHT(22),
  CAIRO_OPERATOR_DIFFERENCE(23),
  CAIRO_OPERATOR_EXCLUSION(24),
  CAIRO_OPERATOR_HSL_HUE(25),
  CAIRO_OPERATOR_HSL_SATURATION(26),
  CAIRO_OPERATOR_HSL_COLOR(27),
  CAIRO_OPERATOR_HSL_LUMINOSITY(28);

  final int value;
  const cairo_operator(this.value);

  static cairo_operator fromValue(int value) => switch (value) {
        0 => CAIRO_OPERATOR_CLEAR,
        1 => CAIRO_OPERATOR_SOURCE,
        2 => CAIRO_OPERATOR_OVER,
        3 => CAIRO_OPERATOR_IN,
        4 => CAIRO_OPERATOR_OUT,
        5 => CAIRO_OPERATOR_ATOP,
        6 => CAIRO_OPERATOR_DEST,
        7 => CAIRO_OPERATOR_DEST_OVER,
        8 => CAIRO_OPERATOR_DEST_IN,
        9 => CAIRO_OPERATOR_DEST_OUT,
        10 => CAIRO_OPERATOR_DEST_ATOP,
        11 => CAIRO_OPERATOR_XOR,
        12 => CAIRO_OPERATOR_ADD,
        13 => CAIRO_OPERATOR_SATURATE,
        14 => CAIRO_OPERATOR_MULTIPLY,
        15 => CAIRO_OPERATOR_SCREEN,
        16 => CAIRO_OPERATOR_OVERLAY,
        17 => CAIRO_OPERATOR_DARKEN,
        18 => CAIRO_OPERATOR_LIGHTEN,
        19 => CAIRO_OPERATOR_COLOR_DODGE,
        20 => CAIRO_OPERATOR_COLOR_BURN,
        21 => CAIRO_OPERATOR_HARD_LIGHT,
        22 => CAIRO_OPERATOR_SOFT_LIGHT,
        23 => CAIRO_OPERATOR_DIFFERENCE,
        24 => CAIRO_OPERATOR_EXCLUSION,
        25 => CAIRO_OPERATOR_HSL_HUE,
        26 => CAIRO_OPERATOR_HSL_SATURATION,
        27 => CAIRO_OPERATOR_HSL_COLOR,
        28 => CAIRO_OPERATOR_HSL_LUMINOSITY,
        _ => throw ArgumentError("Unknown value for cairo_operator: $value"),
      };
}

/// cairo_path_t:
/// @status: the current error status
/// @data: the elements in the path
/// @num_data: the number of elements in the data array
///
/// A data structure for holding a path. This data structure serves as
/// the return value for cairo_copy_path() and
/// cairo_copy_path_flat() as well the input value for
/// cairo_append_path().
///
/// See #cairo_path_data_t for hints on how to iterate over the
/// actual data within the path.
///
/// The num_data member gives the number of elements in the data
/// array. This number is larger than the number of independent path
/// portions (defined in #cairo_path_data_type_t), since the data
/// includes both headers and coordinates for each portion.
///
/// Since: 1.0
final class cairo_path extends ffi.Struct {
  @ffi.UnsignedInt()
  external int statusAsInt;

  cairo_status1 get status => cairo_status1.fromValue(statusAsInt);

  external ffi.Pointer<cairo_path_data_t> data;

  @ffi.Int()
  external int num_data;
}

/// cairo_path_data_t:
///
/// #cairo_path_data_t is used to represent the path data inside a
/// #cairo_path_t.
///
/// The data structure is designed to try to balance the demands of
/// efficiency and ease-of-use. A path is represented as an array of
/// #cairo_path_data_t, which is a union of headers and points.
///
/// Each portion of the path is represented by one or more elements in
/// the array, (one header followed by 0 or more points). The length
/// value of the header is the number of array elements for the current
/// portion including the header, (ie. length == 1 + # of points), and
/// where the number of points for each element type is as follows:
///
/// <programlisting>
/// %CAIRO_PATH_MOVE_TO:     1 point
/// %CAIRO_PATH_LINE_TO:     1 point
/// %CAIRO_PATH_CURVE_TO:    3 points
/// %CAIRO_PATH_CLOSE_PATH:  0 points
/// </programlisting>
///
/// The semantics and ordering of the coordinate values are consistent
/// with cairo_move_to(), cairo_line_to(), cairo_curve_to(), and
/// cairo_close_path().
///
/// Here is sample code for iterating through a #cairo_path_t:
///
/// <informalexample><programlisting>
/// int i;
/// cairo_path_t *path;
/// cairo_path_data_t *data;
/// &nbsp;
/// path = cairo_copy_path (cr);
/// &nbsp;
/// for (i=0; i < path->num_data; i += path->data[i].header.length) {
/// data = &amp;path->data[i];
/// switch (data->header.type) {
/// case CAIRO_PATH_MOVE_TO:
/// do_move_to_things (data[1].point.x, data[1].point.y);
/// break;
/// case CAIRO_PATH_LINE_TO:
/// do_line_to_things (data[1].point.x, data[1].point.y);
/// break;
/// case CAIRO_PATH_CURVE_TO:
/// do_curve_to_things (data[1].point.x, data[1].point.y,
/// data[2].point.x, data[2].point.y,
/// data[3].point.x, data[3].point.y);
/// break;
/// case CAIRO_PATH_CLOSE_PATH:
/// do_close_path_things ();
/// break;
/// }
/// }
/// cairo_path_destroy (path);
/// </programlisting></informalexample>
///
/// As of cairo 1.4, cairo does not mind if there are more elements in
/// a portion of the path than needed.  Such elements can be used by
/// users of the cairo API to hold extra values in the path data
/// structure.  For this reason, it is recommended that applications
/// always use <literal>data->header.length</literal> to
/// iterate over the path data, instead of hardcoding the number of
/// elements for each element type.
///
/// Since: 1.0
typedef cairo_path_data_t = _cairo_path_data_t;

/// cairo_path_data_type_t:
/// @CAIRO_PATH_MOVE_TO: A move-to operation, since 1.0
/// @CAIRO_PATH_LINE_TO: A line-to operation, since 1.0
/// @CAIRO_PATH_CURVE_TO: A curve-to operation, since 1.0
/// @CAIRO_PATH_CLOSE_PATH: A close-path operation, since 1.0
///
/// #cairo_path_data_t is used to describe the type of one portion
/// of a path when represented as a #cairo_path_t.
/// See #cairo_path_data_t for details.
///
/// Since: 1.0
enum cairo_path_data_type {
  CAIRO_PATH_MOVE_TO(0),
  CAIRO_PATH_LINE_TO(1),
  CAIRO_PATH_CURVE_TO(2),
  CAIRO_PATH_CLOSE_PATH(3);

  final int value;
  const cairo_path_data_type(this.value);

  static cairo_path_data_type fromValue(int value) => switch (value) {
        0 => CAIRO_PATH_MOVE_TO,
        1 => CAIRO_PATH_LINE_TO,
        2 => CAIRO_PATH_CURVE_TO,
        3 => CAIRO_PATH_CLOSE_PATH,
        _ =>
          throw ArgumentError("Unknown value for cairo_path_data_type: $value"),
      };
}

/// cairo_path_t:
/// @status: the current error status
/// @data: the elements in the path
/// @num_data: the number of elements in the data array
///
/// A data structure for holding a path. This data structure serves as
/// the return value for cairo_copy_path() and
/// cairo_copy_path_flat() as well the input value for
/// cairo_append_path().
///
/// See #cairo_path_data_t for hints on how to iterate over the
/// actual data within the path.
///
/// The num_data member gives the number of elements in the data
/// array. This number is larger than the number of independent path
/// portions (defined in #cairo_path_data_type_t), since the data
/// includes both headers and coordinates for each portion.
///
/// Since: 1.0
typedef cairo_path_t = cairo_path;

/// cairo_pattern_t:
///
/// A #cairo_pattern_t represents a source when drawing onto a
/// surface. There are different subtypes of #cairo_pattern_t,
/// for different types of sources; for example,
/// cairo_pattern_create_rgb() creates a pattern for a solid
/// opaque color.
///
/// Other than various
/// <function>cairo_pattern_create_<emphasis>type</emphasis>()</function>
/// functions, some of the pattern types can be implicitly created using various
/// <function>cairo_set_source_<emphasis>type</emphasis>()</function> functions;
/// for example cairo_set_source_rgb().
///
/// The type of a pattern can be queried with cairo_pattern_get_type().
///
/// Memory management of #cairo_pattern_t is done with
/// cairo_pattern_reference() and cairo_pattern_destroy().
///
/// Since: 1.0
typedef cairo_pattern_t = _cairo_pattern;

/// cairo_pattern_type_t:
/// @CAIRO_PATTERN_TYPE_SOLID: The pattern is a solid (uniform)
/// color. It may be opaque or translucent, since 1.2.
/// @CAIRO_PATTERN_TYPE_SURFACE: The pattern is a based on a surface (an image), since 1.2.
/// @CAIRO_PATTERN_TYPE_LINEAR: The pattern is a linear gradient, since 1.2.
/// @CAIRO_PATTERN_TYPE_RADIAL: The pattern is a radial gradient, since 1.2.
/// @CAIRO_PATTERN_TYPE_MESH: The pattern is a mesh, since 1.12.
/// @CAIRO_PATTERN_TYPE_RASTER_SOURCE: The pattern is a user pattern providing raster data, since 1.12.
///
/// #cairo_pattern_type_t is used to describe the type of a given pattern.
///
/// The type of a pattern is determined by the function used to create
/// it. The cairo_pattern_create_rgb() and cairo_pattern_create_rgba()
/// functions create SOLID patterns. The remaining
/// cairo_pattern_create<!-- --> functions map to pattern types in obvious
/// ways.
///
/// The pattern type can be queried with cairo_pattern_get_type()
///
/// Most #cairo_pattern_t functions can be called with a pattern of any
/// type, (though trying to change the extend or filter for a solid
/// pattern will have no effect). A notable exception is
/// cairo_pattern_add_color_stop_rgb() and
/// cairo_pattern_add_color_stop_rgba() which must only be called with
/// gradient patterns (either LINEAR or RADIAL). Otherwise the pattern
/// will be shutdown and put into an error state.
///
/// New entries may be added in future versions.
///
/// Since: 1.2
enum cairo_pattern_type {
  CAIRO_PATTERN_TYPE_SOLID(0),
  CAIRO_PATTERN_TYPE_SURFACE(1),
  CAIRO_PATTERN_TYPE_LINEAR(2),
  CAIRO_PATTERN_TYPE_RADIAL(3),
  CAIRO_PATTERN_TYPE_MESH(4),
  CAIRO_PATTERN_TYPE_RASTER_SOURCE(5);

  final int value;
  const cairo_pattern_type(this.value);

  static cairo_pattern_type fromValue(int value) => switch (value) {
        0 => CAIRO_PATTERN_TYPE_SOLID,
        1 => CAIRO_PATTERN_TYPE_SURFACE,
        2 => CAIRO_PATTERN_TYPE_LINEAR,
        3 => CAIRO_PATTERN_TYPE_RADIAL,
        4 => CAIRO_PATTERN_TYPE_MESH,
        5 => CAIRO_PATTERN_TYPE_RASTER_SOURCE,
        _ =>
          throw ArgumentError("Unknown value for cairo_pattern_type: $value"),
      };
}

/// cairo_raster_source_acquire_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
/// @target: the rendering target surface
/// @extents: rectangular region of interest in pixels in sample space
///
/// #cairo_raster_source_acquire_func_t is the type of function which is
/// called when a pattern is being rendered from. It should create a surface
/// that provides the pixel data for the region of interest as defined by
/// extents, though the surface itself does not have to be limited to that
/// area. For convenience the surface should probably be of image type,
/// created with cairo_surface_create_similar_image() for the target (which
/// enables the number of copies to be reduced during transfer to the
/// device). Another option, might be to return a similar surface to the
/// target for explicit handling by the application of a set of cached sources
/// on the device. The region of sample data provided should be defined using
/// cairo_surface_set_device_offset() to specify the top-left corner of the
/// sample data (along with width and height of the surface).
///
/// Returns: a #cairo_surface_t
///
/// Since: 1.12
typedef cairo_raster_source_acquire_func_t = ffi
    .Pointer<ffi.NativeFunction<cairo_raster_source_acquire_func_tFunction>>;
typedef cairo_raster_source_acquire_func_tFunction
    = ffi.Pointer<cairo_surface_t> Function(
        ffi.Pointer<cairo_pattern_t> pattern,
        ffi.Pointer<ffi.Void> callback_data,
        ffi.Pointer<cairo_surface_t> target,
        ffi.Pointer<cairo_rectangle_int_t> extents);

/// cairo_raster_source_copy_func_t:
/// @pattern: the #cairo_pattern_t that was copied to
/// @callback_data: the user data supplied during creation
/// @other: the #cairo_pattern_t being used as the source for the copy
///
/// #cairo_raster_source_copy_func_t is the type of function which is
/// called when the pattern gets copied as a normal part of rendering.
///
/// Return value: CAIRO_STATUS_SUCCESS on success, or one of the
/// #cairo_status_t error codes for failure.
///
/// Since: 1.12
typedef cairo_raster_source_copy_func_t
    = ffi.Pointer<ffi.NativeFunction<cairo_raster_source_copy_func_tFunction>>;
typedef cairo_raster_source_copy_func_tFunction = ffi.UnsignedInt Function(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Void> callback_data,
    ffi.Pointer<cairo_pattern_t> other);
typedef Dartcairo_raster_source_copy_func_tFunction = cairo_status1 Function(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Void> callback_data,
    ffi.Pointer<cairo_pattern_t> other);

/// cairo_raster_source_finish_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
///
/// #cairo_raster_source_finish_func_t is the type of function which is
/// called when the pattern (or a copy thereof) is no longer required.
///
/// Since: 1.12
typedef cairo_raster_source_finish_func_t = ffi
    .Pointer<ffi.NativeFunction<cairo_raster_source_finish_func_tFunction>>;
typedef cairo_raster_source_finish_func_tFunction = ffi.Void Function(
    ffi.Pointer<cairo_pattern_t> pattern, ffi.Pointer<ffi.Void> callback_data);
typedef Dartcairo_raster_source_finish_func_tFunction = void Function(
    ffi.Pointer<cairo_pattern_t> pattern, ffi.Pointer<ffi.Void> callback_data);

/// cairo_raster_source_release_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
/// @surface: the surface created during acquire
///
/// #cairo_raster_source_release_func_t is the type of function which is
/// called when the pixel data is no longer being access by the pattern
/// for the rendering operation. Typically this function will simply
/// destroy the surface created during acquire.
///
/// Since: 1.12
typedef cairo_raster_source_release_func_t = ffi
    .Pointer<ffi.NativeFunction<cairo_raster_source_release_func_tFunction>>;
typedef cairo_raster_source_release_func_tFunction = ffi.Void Function(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Void> callback_data,
    ffi.Pointer<cairo_surface_t> surface);
typedef Dartcairo_raster_source_release_func_tFunction = void Function(
    ffi.Pointer<cairo_pattern_t> pattern,
    ffi.Pointer<ffi.Void> callback_data,
    ffi.Pointer<cairo_surface_t> surface);

/// cairo_raster_source_snapshot_func_t:
/// @pattern: the pattern being rendered from
/// @callback_data: the user data supplied during creation
///
/// #cairo_raster_source_snapshot_func_t is the type of function which is
/// called when the pixel data needs to be preserved for later use
/// during printing. This pattern will be accessed again later, and it
/// is expected to provide the pixel data that was current at the time
/// of snapshotting.
///
/// Return value: CAIRO_STATUS_SUCCESS on success, or one of the
/// #cairo_status_t error codes for failure.
///
/// Since: 1.12
typedef cairo_raster_source_snapshot_func_t = ffi
    .Pointer<ffi.NativeFunction<cairo_raster_source_snapshot_func_tFunction>>;
typedef cairo_raster_source_snapshot_func_tFunction = ffi.UnsignedInt Function(
    ffi.Pointer<cairo_pattern_t> pattern, ffi.Pointer<ffi.Void> callback_data);
typedef Dartcairo_raster_source_snapshot_func_tFunction
    = cairo_status1 Function(ffi.Pointer<cairo_pattern_t> pattern,
        ffi.Pointer<ffi.Void> callback_data);

/// cairo_read_func_t:
/// @closure: the input closure
/// @data: the buffer into which to read the data
/// @length: the amount of data to read
///
/// #cairo_read_func_t is the type of function which is called when a
/// backend needs to read data from an input stream.  It is passed the
/// closure which was specified by the user at the time the read
/// function was registered, the buffer to read the data into and the
/// length of the data in bytes.  The read function should return
/// %CAIRO_STATUS_SUCCESS if all the data was successfully read,
/// %CAIRO_STATUS_READ_ERROR otherwise.
///
/// Returns: the status code of the read operation
///
/// Since: 1.0
typedef cairo_read_func_t
    = ffi.Pointer<ffi.NativeFunction<cairo_read_func_tFunction>>;
typedef cairo_read_func_tFunction = ffi.UnsignedInt Function(
    ffi.Pointer<ffi.Void> closure,
    ffi.Pointer<ffi.UnsignedChar> data,
    ffi.UnsignedInt length);
typedef Dartcairo_read_func_tFunction = cairo_status1 Function(
    ffi.Pointer<ffi.Void> closure,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length);

/// cairo_rectangle_int_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle with integer coordinates.
///
/// Since: 1.10
typedef cairo_rectangle_int_t = _cairo_rectangle_int;

/// cairo_rectangle_list_t:
/// @status: Error status of the rectangle list
/// @rectangles: Array containing the rectangles
/// @num_rectangles: Number of rectangles in this list
///
/// A data structure for holding a dynamically allocated
/// array of rectangles.
///
/// Since: 1.4
typedef cairo_rectangle_list_t = _cairo_rectangle_list;

/// cairo_rectangle_t:
/// @x: X coordinate of the left side of the rectangle
/// @y: Y coordinate of the top side of the rectangle
/// @width: width of the rectangle
/// @height: height of the rectangle
///
/// A data structure for holding a rectangle.
///
/// Since: 1.4
typedef cairo_rectangle_t = _cairo_rectangle;

/// cairo_region_overlap_t:
/// @CAIRO_REGION_OVERLAP_IN: The contents are entirely inside the region. (Since 1.10)
/// @CAIRO_REGION_OVERLAP_OUT: The contents are entirely outside the region. (Since 1.10)
/// @CAIRO_REGION_OVERLAP_PART: The contents are partially inside and
/// partially outside the region. (Since 1.10)
///
/// Used as the return value for cairo_region_contains_rectangle().
///
/// Since: 1.10
enum cairo_region_overlap {
  /// completely inside region
  CAIRO_REGION_OVERLAP_IN(0),

  /// completely outside region
  CAIRO_REGION_OVERLAP_OUT(1),

  /// partly inside region
  CAIRO_REGION_OVERLAP_PART(2);

  final int value;
  const cairo_region_overlap(this.value);

  static cairo_region_overlap fromValue(int value) => switch (value) {
        0 => CAIRO_REGION_OVERLAP_IN,
        1 => CAIRO_REGION_OVERLAP_OUT,
        2 => CAIRO_REGION_OVERLAP_PART,
        _ =>
          throw ArgumentError("Unknown value for cairo_region_overlap: $value"),
      };
}

/// cairo_region_t:
///
/// A #cairo_region_t represents a set of integer-aligned rectangles.
///
/// It allows set-theoretical operations like cairo_region_union() and
/// cairo_region_intersect() to be performed on them.
///
/// Memory management of #cairo_region_t is done with
/// cairo_region_reference() and cairo_region_destroy().
///
/// Since: 1.10
typedef cairo_region_t = _cairo_region;

/// cairo_scaled_font_t:
///
/// A #cairo_scaled_font_t is a font scaled to a particular size and device
/// resolution. A #cairo_scaled_font_t is most useful for low-level font
/// usage where a library or application wants to cache a reference
/// to a scaled font to speed up the computation of metrics.
///
/// There are various types of scaled fonts, depending on the
/// <firstterm>font backend</firstterm> they use. The type of a
/// scaled font can be queried using cairo_scaled_font_get_type().
///
/// Memory management of #cairo_scaled_font_t is done with
/// cairo_scaled_font_reference() and cairo_scaled_font_destroy().
///
/// Since: 1.0
typedef cairo_scaled_font_t = _cairo_scaled_font;

/// cairo_status_t:
/// @CAIRO_STATUS_SUCCESS: no error has occurred (Since 1.0)
/// @CAIRO_STATUS_NO_MEMORY: out of memory (Since 1.0)
/// @CAIRO_STATUS_INVALID_RESTORE: cairo_restore() called without matching cairo_save() (Since 1.0)
/// @CAIRO_STATUS_INVALID_POP_GROUP: no saved group to pop, i.e. cairo_pop_group() without matching cairo_push_group() (Since 1.0)
/// @CAIRO_STATUS_NO_CURRENT_POINT: no current point defined (Since 1.0)
/// @CAIRO_STATUS_INVALID_MATRIX: invalid matrix (not invertible) (Since 1.0)
/// @CAIRO_STATUS_INVALID_STATUS: invalid value for an input #cairo_status_t (Since 1.0)
/// @CAIRO_STATUS_NULL_POINTER: %NULL pointer (Since 1.0)
/// @CAIRO_STATUS_INVALID_STRING: input string not valid UTF-8 (Since 1.0)
/// @CAIRO_STATUS_INVALID_PATH_DATA: input path data not valid (Since 1.0)
/// @CAIRO_STATUS_READ_ERROR: error while reading from input stream (Since 1.0)
/// @CAIRO_STATUS_WRITE_ERROR: error while writing to output stream (Since 1.0)
/// @CAIRO_STATUS_SURFACE_FINISHED: target surface has been finished (Since 1.0)
/// @CAIRO_STATUS_SURFACE_TYPE_MISMATCH: the surface type is not appropriate for the operation (Since 1.0)
/// @CAIRO_STATUS_PATTERN_TYPE_MISMATCH: the pattern type is not appropriate for the operation (Since 1.0)
/// @CAIRO_STATUS_INVALID_CONTENT: invalid value for an input #cairo_content_t (Since 1.0)
/// @CAIRO_STATUS_INVALID_FORMAT: invalid value for an input #cairo_format_t (Since 1.0)
/// @CAIRO_STATUS_INVALID_VISUAL: invalid value for an input Visual* (Since 1.0)
/// @CAIRO_STATUS_FILE_NOT_FOUND: file not found (Since 1.0)
/// @CAIRO_STATUS_INVALID_DASH: invalid value for a dash setting (Since 1.0)
/// @CAIRO_STATUS_INVALID_DSC_COMMENT: invalid value for a DSC comment (Since 1.2)
/// @CAIRO_STATUS_INVALID_INDEX: invalid index passed to getter (Since 1.4)
/// @CAIRO_STATUS_CLIP_NOT_REPRESENTABLE: clip region not representable in desired format (Since 1.4)
/// @CAIRO_STATUS_TEMP_FILE_ERROR: error creating or writing to a temporary file (Since 1.6)
/// @CAIRO_STATUS_INVALID_STRIDE: invalid value for stride (Since 1.6)
/// @CAIRO_STATUS_FONT_TYPE_MISMATCH: the font type is not appropriate for the operation (Since 1.8)
/// @CAIRO_STATUS_USER_FONT_IMMUTABLE: the user-font is immutable (Since 1.8)
/// @CAIRO_STATUS_USER_FONT_ERROR: error occurred in a user-font callback function (Since 1.8)
/// @CAIRO_STATUS_NEGATIVE_COUNT: negative number used where it is not allowed (Since 1.8)
/// @CAIRO_STATUS_INVALID_CLUSTERS: input clusters do not represent the accompanying text and glyph array (Since 1.8)
/// @CAIRO_STATUS_INVALID_SLANT: invalid value for an input #cairo_font_slant_t (Since 1.8)
/// @CAIRO_STATUS_INVALID_WEIGHT: invalid value for an input #cairo_font_weight_t (Since 1.8)
/// @CAIRO_STATUS_INVALID_SIZE: invalid value (typically too big) for the size of the input (surface, pattern, etc.) (Since 1.10)
/// @CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED: user-font method not implemented (Since 1.10)
/// @CAIRO_STATUS_DEVICE_TYPE_MISMATCH: the device type is not appropriate for the operation (Since 1.10)
/// @CAIRO_STATUS_DEVICE_ERROR: an operation to the device caused an unspecified error (Since 1.10)
/// @CAIRO_STATUS_INVALID_MESH_CONSTRUCTION: a mesh pattern
/// construction operation was used outside of a
/// cairo_mesh_pattern_begin_patch()/cairo_mesh_pattern_end_patch()
/// pair (Since 1.12)
/// @CAIRO_STATUS_DEVICE_FINISHED: target device has been finished (Since 1.12)
/// @CAIRO_STATUS_JBIG2_GLOBAL_MISSING: %CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID has been used on at least one image
/// but no image provided %CAIRO_MIME_TYPE_JBIG2_GLOBAL (Since 1.14)
/// @CAIRO_STATUS_PNG_ERROR: error occurred in libpng while reading from or writing to a PNG file (Since 1.16)
/// @CAIRO_STATUS_FREETYPE_ERROR: error occurred in libfreetype (Since 1.16)
/// @CAIRO_STATUS_WIN32_GDI_ERROR: error occurred in the Windows Graphics Device Interface (Since 1.16)
/// @CAIRO_STATUS_TAG_ERROR: invalid tag name, attributes, or nesting (Since 1.16)
/// @CAIRO_STATUS_DWRITE_ERROR: error occurred in the Windows Direct Write API (Since 1.18)
/// @CAIRO_STATUS_SVG_FONT_ERROR: error occurred in OpenType-SVG font rendering (Since 1.18)
/// @CAIRO_STATUS_LAST_STATUS: this is a special value indicating the number of
/// status values defined in this enumeration.  When using this value, note
/// that the version of cairo at run-time may have additional status values
/// defined than the value of this symbol at compile-time. (Since 1.10)
///
/// #cairo_status_t is used to indicate errors that can occur when
/// using Cairo. In some cases it is returned directly by functions.
/// but when using #cairo_t, the last error, if any, is stored in
/// the context and can be retrieved with cairo_status().
///
/// New entries may be added in future versions.  Use cairo_status_to_string()
/// to get a human-readable representation of an error message.
///
/// Since: 1.0
enum cairo_status1 {
  CAIRO_STATUS_SUCCESS(0),
  CAIRO_STATUS_NO_MEMORY(1),
  CAIRO_STATUS_INVALID_RESTORE(2),
  CAIRO_STATUS_INVALID_POP_GROUP(3),
  CAIRO_STATUS_NO_CURRENT_POINT(4),
  CAIRO_STATUS_INVALID_MATRIX(5),
  CAIRO_STATUS_INVALID_STATUS(6),
  CAIRO_STATUS_NULL_POINTER(7),
  CAIRO_STATUS_INVALID_STRING(8),
  CAIRO_STATUS_INVALID_PATH_DATA(9),
  CAIRO_STATUS_READ_ERROR(10),
  CAIRO_STATUS_WRITE_ERROR(11),
  CAIRO_STATUS_SURFACE_FINISHED(12),
  CAIRO_STATUS_SURFACE_TYPE_MISMATCH(13),
  CAIRO_STATUS_PATTERN_TYPE_MISMATCH(14),
  CAIRO_STATUS_INVALID_CONTENT(15),
  CAIRO_STATUS_INVALID_FORMAT(16),
  CAIRO_STATUS_INVALID_VISUAL(17),
  CAIRO_STATUS_FILE_NOT_FOUND(18),
  CAIRO_STATUS_INVALID_DASH(19),
  CAIRO_STATUS_INVALID_DSC_COMMENT(20),
  CAIRO_STATUS_INVALID_INDEX(21),
  CAIRO_STATUS_CLIP_NOT_REPRESENTABLE(22),
  CAIRO_STATUS_TEMP_FILE_ERROR(23),
  CAIRO_STATUS_INVALID_STRIDE(24),
  CAIRO_STATUS_FONT_TYPE_MISMATCH(25),
  CAIRO_STATUS_USER_FONT_IMMUTABLE(26),
  CAIRO_STATUS_USER_FONT_ERROR(27),
  CAIRO_STATUS_NEGATIVE_COUNT(28),
  CAIRO_STATUS_INVALID_CLUSTERS(29),
  CAIRO_STATUS_INVALID_SLANT(30),
  CAIRO_STATUS_INVALID_WEIGHT(31),
  CAIRO_STATUS_INVALID_SIZE(32),
  CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED(33),
  CAIRO_STATUS_DEVICE_TYPE_MISMATCH(34),
  CAIRO_STATUS_DEVICE_ERROR(35),
  CAIRO_STATUS_INVALID_MESH_CONSTRUCTION(36),
  CAIRO_STATUS_DEVICE_FINISHED(37),
  CAIRO_STATUS_JBIG2_GLOBAL_MISSING(38),
  CAIRO_STATUS_PNG_ERROR(39),
  CAIRO_STATUS_FREETYPE_ERROR(40),
  CAIRO_STATUS_WIN32_GDI_ERROR(41),
  CAIRO_STATUS_TAG_ERROR(42),
  CAIRO_STATUS_DWRITE_ERROR(43),
  CAIRO_STATUS_SVG_FONT_ERROR(44),
  CAIRO_STATUS_LAST_STATUS(45);

  final int value;
  const cairo_status1(this.value);

  static cairo_status1 fromValue(int value) => switch (value) {
        0 => CAIRO_STATUS_SUCCESS,
        1 => CAIRO_STATUS_NO_MEMORY,
        2 => CAIRO_STATUS_INVALID_RESTORE,
        3 => CAIRO_STATUS_INVALID_POP_GROUP,
        4 => CAIRO_STATUS_NO_CURRENT_POINT,
        5 => CAIRO_STATUS_INVALID_MATRIX,
        6 => CAIRO_STATUS_INVALID_STATUS,
        7 => CAIRO_STATUS_NULL_POINTER,
        8 => CAIRO_STATUS_INVALID_STRING,
        9 => CAIRO_STATUS_INVALID_PATH_DATA,
        10 => CAIRO_STATUS_READ_ERROR,
        11 => CAIRO_STATUS_WRITE_ERROR,
        12 => CAIRO_STATUS_SURFACE_FINISHED,
        13 => CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
        14 => CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
        15 => CAIRO_STATUS_INVALID_CONTENT,
        16 => CAIRO_STATUS_INVALID_FORMAT,
        17 => CAIRO_STATUS_INVALID_VISUAL,
        18 => CAIRO_STATUS_FILE_NOT_FOUND,
        19 => CAIRO_STATUS_INVALID_DASH,
        20 => CAIRO_STATUS_INVALID_DSC_COMMENT,
        21 => CAIRO_STATUS_INVALID_INDEX,
        22 => CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
        23 => CAIRO_STATUS_TEMP_FILE_ERROR,
        24 => CAIRO_STATUS_INVALID_STRIDE,
        25 => CAIRO_STATUS_FONT_TYPE_MISMATCH,
        26 => CAIRO_STATUS_USER_FONT_IMMUTABLE,
        27 => CAIRO_STATUS_USER_FONT_ERROR,
        28 => CAIRO_STATUS_NEGATIVE_COUNT,
        29 => CAIRO_STATUS_INVALID_CLUSTERS,
        30 => CAIRO_STATUS_INVALID_SLANT,
        31 => CAIRO_STATUS_INVALID_WEIGHT,
        32 => CAIRO_STATUS_INVALID_SIZE,
        33 => CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
        34 => CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
        35 => CAIRO_STATUS_DEVICE_ERROR,
        36 => CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
        37 => CAIRO_STATUS_DEVICE_FINISHED,
        38 => CAIRO_STATUS_JBIG2_GLOBAL_MISSING,
        39 => CAIRO_STATUS_PNG_ERROR,
        40 => CAIRO_STATUS_FREETYPE_ERROR,
        41 => CAIRO_STATUS_WIN32_GDI_ERROR,
        42 => CAIRO_STATUS_TAG_ERROR,
        43 => CAIRO_STATUS_DWRITE_ERROR,
        44 => CAIRO_STATUS_SVG_FONT_ERROR,
        45 => CAIRO_STATUS_LAST_STATUS,
        _ => throw ArgumentError("Unknown value for cairo_status1: $value"),
      };
}

/// cairo_subpixel_order_t:
/// @CAIRO_SUBPIXEL_ORDER_DEFAULT: Use the default subpixel order for
/// for the target device, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_RGB: Subpixel elements are arranged horizontally
/// with red at the left, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_BGR:  Subpixel elements are arranged horizontally
/// with blue at the left, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_VRGB: Subpixel elements are arranged vertically
/// with red at the top, since 1.0
/// @CAIRO_SUBPIXEL_ORDER_VBGR: Subpixel elements are arranged vertically
/// with blue at the top, since 1.0
///
/// The subpixel order specifies the order of color elements within
/// each pixel on the display device when rendering with an
/// antialiasing mode of %CAIRO_ANTIALIAS_SUBPIXEL.
///
/// Since: 1.0
enum cairo_subpixel_order {
  CAIRO_SUBPIXEL_ORDER_DEFAULT(0),
  CAIRO_SUBPIXEL_ORDER_RGB(1),
  CAIRO_SUBPIXEL_ORDER_BGR(2),
  CAIRO_SUBPIXEL_ORDER_VRGB(3),
  CAIRO_SUBPIXEL_ORDER_VBGR(4);

  final int value;
  const cairo_subpixel_order(this.value);

  static cairo_subpixel_order fromValue(int value) => switch (value) {
        0 => CAIRO_SUBPIXEL_ORDER_DEFAULT,
        1 => CAIRO_SUBPIXEL_ORDER_RGB,
        2 => CAIRO_SUBPIXEL_ORDER_BGR,
        3 => CAIRO_SUBPIXEL_ORDER_VRGB,
        4 => CAIRO_SUBPIXEL_ORDER_VBGR,
        _ =>
          throw ArgumentError("Unknown value for cairo_subpixel_order: $value"),
      };
}

/// cairo_surface_observer_callback_t:
/// @observer: the #cairo_surface_observer_t
/// @target: the observed surface
/// @data: closure used when adding the callback
///
/// A generic callback function for surface operations.
///
/// Since: 1.12
typedef cairo_surface_observer_callback_t = ffi
    .Pointer<ffi.NativeFunction<cairo_surface_observer_callback_tFunction>>;
typedef cairo_surface_observer_callback_tFunction = ffi.Void Function(
    ffi.Pointer<cairo_surface_t> observer,
    ffi.Pointer<cairo_surface_t> target,
    ffi.Pointer<ffi.Void> data);
typedef Dartcairo_surface_observer_callback_tFunction = void Function(
    ffi.Pointer<cairo_surface_t> observer,
    ffi.Pointer<cairo_surface_t> target,
    ffi.Pointer<ffi.Void> data);

/// cairo_surface_observer_mode_t:
/// @CAIRO_SURFACE_OBSERVER_NORMAL: no recording is done
/// @CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS: operations are recorded
///
/// Whether operations should be recorded.
///
/// Since: 1.12
enum cairo_surface_observer_mode_t {
  CAIRO_SURFACE_OBSERVER_NORMAL(0),
  CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS(1);

  final int value;
  const cairo_surface_observer_mode_t(this.value);

  static cairo_surface_observer_mode_t fromValue(int value) => switch (value) {
        0 => CAIRO_SURFACE_OBSERVER_NORMAL,
        1 => CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS,
        _ => throw ArgumentError(
            "Unknown value for cairo_surface_observer_mode_t: $value"),
      };
}

/// cairo_surface_t:
///
/// A #cairo_surface_t represents an image, either as the destination
/// of a drawing operation or as source when drawing onto another
/// surface.  To draw to a #cairo_surface_t, create a cairo context
/// with the surface as the target, using cairo_create().
///
/// There are different subtypes of #cairo_surface_t for
/// different drawing backends; for example, cairo_image_surface_create()
/// creates a bitmap image in memory.
/// The type of a surface can be queried with cairo_surface_get_type().
///
/// The initial contents of a surface after creation depend upon the manner
/// of its creation. If cairo creates the surface and backing storage for
/// the user, it will be initially cleared; for example,
/// cairo_image_surface_create() and cairo_surface_create_similar().
/// Alternatively, if the user passes in a reference to some backing storage
/// and asks cairo to wrap that in a #cairo_surface_t, then the contents are
/// not modified; for example, cairo_image_surface_create_for_data() and
/// cairo_xlib_surface_create().
///
/// Memory management of #cairo_surface_t is done with
/// cairo_surface_reference() and cairo_surface_destroy().
///
/// Since: 1.0
typedef cairo_surface_t = _cairo_surface;

/// cairo_surface_type_t:
/// @CAIRO_SURFACE_TYPE_IMAGE: The surface is of type image, since 1.2
/// @CAIRO_SURFACE_TYPE_PDF: The surface is of type pdf, since 1.2
/// @CAIRO_SURFACE_TYPE_PS: The surface is of type ps, since 1.2
/// @CAIRO_SURFACE_TYPE_XLIB: The surface is of type xlib, since 1.2
/// @CAIRO_SURFACE_TYPE_XCB: The surface is of type xcb, since 1.2
/// @CAIRO_SURFACE_TYPE_GLITZ: The surface is of type glitz, since 1.2, deprecated 1.18
/// (glitz support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_QUARTZ: The surface is of type quartz, since 1.2
/// @CAIRO_SURFACE_TYPE_WIN32: The surface is of type win32, since 1.2
/// @CAIRO_SURFACE_TYPE_BEOS: The surface is of type beos, since 1.2, deprecated 1.18
/// (beos support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_DIRECTFB: The surface is of type directfb, since 1.2, deprecated 1.18
/// (directfb support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_SVG: The surface is of type svg, since 1.2
/// @CAIRO_SURFACE_TYPE_OS2: The surface is of type os2, since 1.4, deprecated 1.18
/// (os2 support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_WIN32_PRINTING: The surface is a win32 printing surface, since 1.6
/// @CAIRO_SURFACE_TYPE_QUARTZ_IMAGE: The surface is of type quartz_image, since 1.6
/// @CAIRO_SURFACE_TYPE_SCRIPT: The surface is of type script, since 1.10
/// @CAIRO_SURFACE_TYPE_QT: The surface is of type Qt, since 1.10, deprecated 1.18
/// (Ot support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_RECORDING: The surface is of type recording, since 1.10
/// @CAIRO_SURFACE_TYPE_VG: The surface is a OpenVG surface, since 1.10, deprecated 1.18
/// (OpenVG support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_GL: The surface is of type OpenGL, since 1.10, deprecated 1.18
/// (OpenGL support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_DRM: The surface is of type Direct Render Manager, since 1.10, deprecated 1.18
/// (DRM support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_TEE: The surface is of type 'tee' (a multiplexing surface), since 1.10
/// @CAIRO_SURFACE_TYPE_XML: The surface is of type XML (for debugging), since 1.10
/// @CAIRO_SURFACE_TYPE_SKIA: The surface is of type Skia, since 1.10, deprecated 1.18
/// (Skia support have been removed, this surface type will never be set by cairo)
/// @CAIRO_SURFACE_TYPE_SUBSURFACE: The surface is a subsurface created with
/// cairo_surface_create_for_rectangle(), since 1.10
/// @CAIRO_SURFACE_TYPE_COGL: This surface is of type Cogl, since 1.12, deprecated 1.18
/// (Cogl support have been removed, this surface type will never be set by cairo)
///
/// #cairo_surface_type_t is used to describe the type of a given
/// surface. The surface types are also known as "backends" or "surface
/// backends" within cairo.
///
/// The type of a surface is determined by the function used to create
/// it, which will generally be of the form
/// <function>cairo_<emphasis>type</emphasis>_surface_create(<!-- -->)</function>,
/// (though see cairo_surface_create_similar() as well).
///
/// The surface type can be queried with cairo_surface_get_type()
///
/// The various #cairo_surface_t functions can be used with surfaces of
/// any type, but some backends also provide type-specific functions
/// that must only be called with a surface of the appropriate
/// type. These functions have names that begin with
/// <literal>cairo_<emphasis>type</emphasis>_surface</literal> such as cairo_image_surface_get_width().
///
/// The behavior of calling a type-specific function with a surface of
/// the wrong type is undefined.
///
/// New entries may be added in future versions.
///
/// Since: 1.2
enum cairo_surface_type {
  CAIRO_SURFACE_TYPE_IMAGE(0),
  CAIRO_SURFACE_TYPE_PDF(1),
  CAIRO_SURFACE_TYPE_PS(2),
  CAIRO_SURFACE_TYPE_XLIB(3),
  CAIRO_SURFACE_TYPE_XCB(4),
  CAIRO_SURFACE_TYPE_GLITZ(5),
  CAIRO_SURFACE_TYPE_QUARTZ(6),
  CAIRO_SURFACE_TYPE_WIN32(7),
  CAIRO_SURFACE_TYPE_BEOS(8),
  CAIRO_SURFACE_TYPE_DIRECTFB(9),
  CAIRO_SURFACE_TYPE_SVG(10),
  CAIRO_SURFACE_TYPE_OS2(11),
  CAIRO_SURFACE_TYPE_WIN32_PRINTING(12),
  CAIRO_SURFACE_TYPE_QUARTZ_IMAGE(13),
  CAIRO_SURFACE_TYPE_SCRIPT(14),
  CAIRO_SURFACE_TYPE_QT(15),
  CAIRO_SURFACE_TYPE_RECORDING(16),
  CAIRO_SURFACE_TYPE_VG(17),
  CAIRO_SURFACE_TYPE_GL(18),
  CAIRO_SURFACE_TYPE_DRM(19),
  CAIRO_SURFACE_TYPE_TEE(20),
  CAIRO_SURFACE_TYPE_XML(21),
  CAIRO_SURFACE_TYPE_SKIA(22),
  CAIRO_SURFACE_TYPE_SUBSURFACE(23),
  CAIRO_SURFACE_TYPE_COGL(24);

  final int value;
  const cairo_surface_type(this.value);

  static cairo_surface_type fromValue(int value) => switch (value) {
        0 => CAIRO_SURFACE_TYPE_IMAGE,
        1 => CAIRO_SURFACE_TYPE_PDF,
        2 => CAIRO_SURFACE_TYPE_PS,
        3 => CAIRO_SURFACE_TYPE_XLIB,
        4 => CAIRO_SURFACE_TYPE_XCB,
        5 => CAIRO_SURFACE_TYPE_GLITZ,
        6 => CAIRO_SURFACE_TYPE_QUARTZ,
        7 => CAIRO_SURFACE_TYPE_WIN32,
        8 => CAIRO_SURFACE_TYPE_BEOS,
        9 => CAIRO_SURFACE_TYPE_DIRECTFB,
        10 => CAIRO_SURFACE_TYPE_SVG,
        11 => CAIRO_SURFACE_TYPE_OS2,
        12 => CAIRO_SURFACE_TYPE_WIN32_PRINTING,
        13 => CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
        14 => CAIRO_SURFACE_TYPE_SCRIPT,
        15 => CAIRO_SURFACE_TYPE_QT,
        16 => CAIRO_SURFACE_TYPE_RECORDING,
        17 => CAIRO_SURFACE_TYPE_VG,
        18 => CAIRO_SURFACE_TYPE_GL,
        19 => CAIRO_SURFACE_TYPE_DRM,
        20 => CAIRO_SURFACE_TYPE_TEE,
        21 => CAIRO_SURFACE_TYPE_XML,
        22 => CAIRO_SURFACE_TYPE_SKIA,
        23 => CAIRO_SURFACE_TYPE_SUBSURFACE,
        24 => CAIRO_SURFACE_TYPE_COGL,
        _ =>
          throw ArgumentError("Unknown value for cairo_surface_type: $value"),
      };
}

/// cairo_t:
///
/// A #cairo_t contains the current state of the rendering device,
/// including coordinates of yet to be drawn shapes.
///
/// Cairo contexts, as #cairo_t objects are named, are central to
/// cairo and all drawing with cairo is always done to a #cairo_t
/// object.
///
/// Memory management of #cairo_t is done with
/// cairo_reference() and cairo_destroy().
///
/// Since: 1.0
typedef cairo_t = _cairo;

/// cairo_text_cluster_flags_t:
/// @CAIRO_TEXT_CLUSTER_FLAG_BACKWARD: The clusters in the cluster array
/// map to glyphs in the glyph array from end to start. (Since 1.8)
///
/// Specifies properties of a text cluster mapping.
///
/// Since: 1.8
enum cairo_text_cluster_flags {
  CAIRO_TEXT_CLUSTER_FLAG_BACKWARD(1);

  final int value;
  const cairo_text_cluster_flags(this.value);

  static cairo_text_cluster_flags fromValue(int value) => switch (value) {
        1 => CAIRO_TEXT_CLUSTER_FLAG_BACKWARD,
        _ => throw ArgumentError(
            "Unknown value for cairo_text_cluster_flags: $value"),
      };
}

/// cairo_text_cluster_t:
/// @num_bytes: the number of bytes of UTF-8 text covered by cluster
/// @num_glyphs: the number of glyphs covered by cluster
///
/// The #cairo_text_cluster_t structure holds information about a single
/// <firstterm>text cluster</firstterm>.  A text cluster is a minimal
/// mapping of some glyphs corresponding to some UTF-8 text.
///
/// For a cluster to be valid, both @num_bytes and @num_glyphs should
/// be non-negative, and at least one should be non-zero.
/// Note that clusters with zero glyphs are not as well supported as
/// normal clusters.  For example, PDF rendering applications typically
/// ignore those clusters when PDF text is being selected.
///
/// See cairo_show_text_glyphs() for how clusters are used in advanced
/// text operations.
///
/// Since: 1.8
final class cairo_text_cluster_t extends ffi.Struct {
  @ffi.Int()
  external int num_bytes;

  @ffi.Int()
  external int num_glyphs;
}

/// cairo_text_extents_t:
/// @x_bearing: the horizontal distance from the origin to the
/// leftmost part of the glyphs as drawn. Positive if the
/// glyphs lie entirely to the right of the origin.
/// @y_bearing: the vertical distance from the origin to the
/// topmost part of the glyphs as drawn. Positive only if the
/// glyphs lie completely below the origin; will usually be
/// negative.
/// @width: width of the glyphs as drawn
/// @height: height of the glyphs as drawn
/// @x_advance:distance to advance in the X direction
/// after drawing these glyphs
/// @y_advance: distance to advance in the Y direction
/// after drawing these glyphs. Will typically be zero except
/// for vertical text layout as found in East-Asian languages.
///
/// The #cairo_text_extents_t structure stores the extents of a single
/// glyph or a string of glyphs in user-space coordinates. Because text
/// extents are in user-space coordinates, they are mostly, but not
/// entirely, independent of the current transformation matrix. If you call
/// <literal>cairo_scale(cr, 2.0, 2.0)</literal>, text will
/// be drawn twice as big, but the reported text extents will not be
/// doubled. They will change slightly due to hinting (so you can't
/// assume that metrics are independent of the transformation matrix),
/// but otherwise will remain unchanged.
///
/// Since: 1.0
final class cairo_text_extents_t extends ffi.Struct {
  @ffi.Double()
  external double x_bearing;

  @ffi.Double()
  external double y_bearing;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double x_advance;

  @ffi.Double()
  external double y_advance;
}

/// cairo_user_data_key_t:
/// @unused: not used; ignore.
///
/// #cairo_user_data_key_t is used for attaching user data to cairo
/// data structures.  The actual contents of the struct is never used,
/// and there is no need to initialize the object; only the unique
/// address of a #cairo_data_key_t object is used.  Typically, you
/// would just use the address of a static #cairo_data_key_t object.
///
/// Since: 1.0
typedef cairo_user_data_key_t = _cairo_user_data_key;

/// cairo_user_scaled_font_init_func_t:
/// @scaled_font: the scaled-font being created
/// @cr: a cairo context, in font space
/// @extents: font extents to fill in, in font space
///
/// #cairo_user_scaled_font_init_func_t is the type of function which is
/// called when a scaled-font needs to be created for a user font-face.
///
/// The cairo context @cr is not used by the caller, but is prepared in font
/// space, similar to what the cairo contexts passed to the render_glyph
/// method will look like.  The callback can use this context for extents
/// computation for example.  After the callback is called, @cr is checked
/// for any error status.
///
/// The @extents argument is where the user font sets the font extents for
/// @scaled_font.  It is in font space, which means that for most cases its
/// ascent and descent members should add to 1.0.  @extents is preset to
/// hold a value of 1.0 for ascent, height, and max_x_advance, and 0.0 for
/// descent and max_y_advance members.
///
/// The callback is optional.  If not set, default font extents as described
/// in the previous paragraph will be used.
///
/// Note that @scaled_font is not fully initialized at this
/// point and trying to use it for text operations in the callback will result
/// in deadlock.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success, or an error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_init_func_t = ffi
    .Pointer<ffi.NativeFunction<cairo_user_scaled_font_init_func_tFunction>>;
typedef cairo_user_scaled_font_init_func_tFunction = ffi.UnsignedInt Function(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_extents_t> extents);
typedef Dartcairo_user_scaled_font_init_func_tFunction = cairo_status1 Function(
    ffi.Pointer<cairo_scaled_font_t> scaled_font,
    ffi.Pointer<cairo_t> cr,
    ffi.Pointer<cairo_font_extents_t> extents);

/// cairo_user_scaled_font_render_glyph_func_t:
/// @scaled_font: user scaled-font
/// @glyph: glyph code to render
/// @cr: cairo context to draw to, in font space
/// @extents: glyph extents to fill in, in font space
///
/// #cairo_user_scaled_font_render_glyph_func_t is the type of function which
/// is called when a user scaled-font needs to render a glyph.
///
/// The callback is mandatory, and expected to draw the glyph with code @glyph to
/// the cairo context @cr.  @cr is prepared such that the glyph drawing is done in
/// font space.  That is, the matrix set on @cr is the scale matrix of @scaled_font.
/// The @extents argument is where the user font sets the font extents for
/// @scaled_font.  However, if user prefers to draw in user space, they can
/// achieve that by changing the matrix on @cr.
///
/// All cairo rendering operations to @cr are permitted. However, when
/// this callback is set with
/// cairo_user_font_face_set_render_glyph_func(), the result is
/// undefined if any source other than the default source on @cr is
/// used.  That means, glyph bitmaps should be rendered using
/// cairo_mask() instead of cairo_paint().
///
/// When this callback is set with
/// cairo_user_font_face_set_render_color_glyph_func(), the default
/// source is black. Setting the source is a valid
/// operation. cairo_user_scaled_font_get_foreground_marker() or
/// cairo_user_scaled_font_get_foreground_source() may be called to
/// obtain the current source at the time the glyph is rendered.
///
/// Other non-default settings on @cr include a font size of 1.0 (given that
/// it is set up to be in font space), and font options corresponding to
/// @scaled_font.
///
/// The @extents argument is preset to have <literal>x_bearing</literal>,
/// <literal>width</literal>, and <literal>y_advance</literal> of zero,
/// <literal>y_bearing</literal> set to <literal>-font_extents.ascent</literal>,
/// <literal>height</literal> to <literal>font_extents.ascent+font_extents.descent</literal>,
/// and <literal>x_advance</literal> to <literal>font_extents.max_x_advance</literal>.
/// The only field user needs to set in majority of cases is
/// <literal>x_advance</literal>.
/// If the <literal>width</literal> field is zero upon the callback returning
/// (which is its preset value), the glyph extents are automatically computed
/// based on the drawings done to @cr.  This is in most cases exactly what the
/// desired behavior is.  However, if for any reason the callback sets the
/// extents, it must be ink extents, and include the extents of all drawing
/// done to @cr in the callback.
///
/// Where both color and non-color callbacks has been set using
/// cairo_user_font_face_set_render_color_glyph_func(), and
/// cairo_user_font_face_set_render_glyph_func(), the color glyph
/// callback will be called first. If the color glyph callback returns
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, any drawing operations are
/// discarded and the non-color callback will be called. This is the
/// only case in which the %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED may
/// be returned from a render callback. This fallback sequence allows a
/// user font face to contain a combination of both color and non-color
/// glyphs.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success,
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
/// or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_render_glyph_func_t = ffi.Pointer<
    ffi.NativeFunction<cairo_user_scaled_font_render_glyph_func_tFunction>>;
typedef cairo_user_scaled_font_render_glyph_func_tFunction
    = ffi.UnsignedInt Function(
        ffi.Pointer<cairo_scaled_font_t> scaled_font,
        ffi.UnsignedLong glyph,
        ffi.Pointer<cairo_t> cr,
        ffi.Pointer<cairo_text_extents_t> extents);
typedef Dartcairo_user_scaled_font_render_glyph_func_tFunction
    = cairo_status1 Function(
        ffi.Pointer<cairo_scaled_font_t> scaled_font,
        int glyph,
        ffi.Pointer<cairo_t> cr,
        ffi.Pointer<cairo_text_extents_t> extents);

/// cairo_user_scaled_font_text_to_glyphs_func_t:
/// @scaled_font: the scaled-font being created
/// @utf8: a string of text encoded in UTF-8
/// @utf8_len: length of @utf8 in bytes
/// @glyphs: pointer to array of glyphs to fill, in font space
/// @num_glyphs: pointer to number of glyphs
/// @clusters: pointer to array of cluster mapping information to fill, or %NULL
/// @num_clusters: pointer to number of clusters
/// @cluster_flags: pointer to location to store cluster flags corresponding to the
/// output @clusters
///
/// #cairo_user_scaled_font_text_to_glyphs_func_t is the type of function which
/// is called to convert input text to an array of glyphs.  This is used by the
/// cairo_show_text() operation.
///
/// Using this callback the user-font has full control on glyphs and their
/// positions.  That means, it allows for features like ligatures and kerning,
/// as well as complex <firstterm>shaping</firstterm> required for scripts like
/// Arabic and Indic.
///
/// The @num_glyphs argument is preset to the number of glyph entries available
/// in the @glyphs buffer. If the @glyphs buffer is %NULL, the value of
/// @num_glyphs will be zero.  If the provided glyph array is too short for
/// the conversion (or for convenience), a new glyph array may be allocated
/// using cairo_glyph_allocate() and placed in @glyphs.  Upon return,
/// @num_glyphs should contain the number of generated glyphs.  If the value
/// @glyphs points at has changed after the call, the caller will free the
/// allocated glyph array using cairo_glyph_free().  The caller will also free
/// the original value of @glyphs, so the callback shouldn't do so.
/// The callback should populate the glyph indices and positions (in font space)
/// assuming that the text is to be shown at the origin.
///
/// If @clusters is not %NULL, @num_clusters and @cluster_flags are also
/// non-%NULL, and cluster mapping should be computed. The semantics of how
/// cluster array allocation works is similar to the glyph array.  That is,
/// if @clusters initially points to a non-%NULL value, that array may be used
/// as a cluster buffer, and @num_clusters points to the number of cluster
/// entries available there.  If the provided cluster array is too short for
/// the conversion (or for convenience), a new cluster array may be allocated
/// using cairo_text_cluster_allocate() and placed in @clusters.  In this case,
/// the original value of @clusters will still be freed by the caller.  Upon
/// return, @num_clusters should contain the number of generated clusters.
/// If the value @clusters points at has changed after the call, the caller
/// will free the allocated cluster array using cairo_text_cluster_free().
///
/// The callback is optional.  If @num_glyphs is negative upon
/// the callback returning or if the return value
/// is %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, the unicode_to_glyph callback
/// is tried.  See #cairo_user_scaled_font_unicode_to_glyph_func_t.
///
/// Note: While cairo does not impose any limitation on glyph indices,
/// some applications may assume that a glyph index fits in a 16-bit
/// unsigned integer.  As such, it is advised that user-fonts keep their
/// glyphs in the 0 to 65535 range.  Furthermore, some applications may
/// assume that glyph 0 is a special glyph-not-found glyph.  User-fonts
/// are advised to use glyph 0 for such purposes and do not use that
/// glyph value for other purposes.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success,
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
/// or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_text_to_glyphs_func_t = ffi.Pointer<
    ffi.NativeFunction<cairo_user_scaled_font_text_to_glyphs_func_tFunction>>;
typedef cairo_user_scaled_font_text_to_glyphs_func_tFunction
    = ffi.UnsignedInt Function(
        ffi.Pointer<cairo_scaled_font_t> scaled_font,
        ffi.Pointer<ffi.Char> utf8,
        ffi.Int utf8_len,
        ffi.Pointer<ffi.Pointer<cairo_glyph_t>> glyphs,
        ffi.Pointer<ffi.Int> num_glyphs,
        ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>> clusters,
        ffi.Pointer<ffi.Int> num_clusters,
        ffi.Pointer<ffi.UnsignedInt> cluster_flags);
typedef Dartcairo_user_scaled_font_text_to_glyphs_func_tFunction
    = cairo_status1 Function(
        ffi.Pointer<cairo_scaled_font_t> scaled_font,
        ffi.Pointer<ffi.Char> utf8,
        int utf8_len,
        ffi.Pointer<ffi.Pointer<cairo_glyph_t>> glyphs,
        ffi.Pointer<ffi.Int> num_glyphs,
        ffi.Pointer<ffi.Pointer<cairo_text_cluster_t>> clusters,
        ffi.Pointer<ffi.Int> num_clusters,
        ffi.Pointer<ffi.UnsignedInt> cluster_flags);

/// cairo_user_scaled_font_unicode_to_glyph_func_t:
/// @scaled_font: the scaled-font being created
/// @unicode: input unicode character code-point
/// @glyph_index: output glyph index
///
/// #cairo_user_scaled_font_unicode_to_glyph_func_t is the type of function which
/// is called to convert an input Unicode character to a single glyph.
/// This is used by the cairo_show_text() operation.
///
/// This callback is used to provide the same functionality as the
/// text_to_glyphs callback does (see #cairo_user_scaled_font_text_to_glyphs_func_t)
/// but has much less control on the output,
/// in exchange for increased ease of use.  The inherent assumption to using
/// this callback is that each character maps to one glyph, and that the
/// mapping is context independent.  It also assumes that glyphs are positioned
/// according to their advance width.  These mean no ligatures, kerning, or
/// complex scripts can be implemented using this callback.
///
/// The callback is optional, and only used if text_to_glyphs callback is not
/// set or fails to return glyphs.  If this callback is not set or if it returns
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, an identity mapping from Unicode
/// code-points to glyph indices is assumed.
///
/// Note: While cairo does not impose any limitation on glyph indices,
/// some applications may assume that a glyph index fits in a 16-bit
/// unsigned integer.  As such, it is advised that user-fonts keep their
/// glyphs in the 0 to 65535 range.  Furthermore, some applications may
/// assume that glyph 0 is a special glyph-not-found glyph.  User-fonts
/// are advised to use glyph 0 for such purposes and do not use that
/// glyph value for other purposes.
///
/// Returns: %CAIRO_STATUS_SUCCESS upon success,
/// %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
/// or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
///
/// Since: 1.8
typedef cairo_user_scaled_font_unicode_to_glyph_func_t = ffi.Pointer<
    ffi.NativeFunction<cairo_user_scaled_font_unicode_to_glyph_func_tFunction>>;
typedef cairo_user_scaled_font_unicode_to_glyph_func_tFunction
    = ffi.UnsignedInt Function(ffi.Pointer<cairo_scaled_font_t> scaled_font,
        ffi.UnsignedLong unicode, ffi.Pointer<ffi.UnsignedLong> glyph_index);
typedef Dartcairo_user_scaled_font_unicode_to_glyph_func_tFunction
    = cairo_status1 Function(ffi.Pointer<cairo_scaled_font_t> scaled_font,
        int unicode, ffi.Pointer<ffi.UnsignedLong> glyph_index);

/// cairo_write_func_t:
/// @closure: the output closure
/// @data: the buffer containing the data to write
/// @length: the amount of data to write
///
/// #cairo_write_func_t is the type of function which is called when a
/// backend needs to write data to an output stream.  It is passed the
/// closure which was specified by the user at the time the write
/// function was registered, the data to write and the length of the
/// data in bytes.  The write function should return
/// %CAIRO_STATUS_SUCCESS if all the data was successfully written,
/// %CAIRO_STATUS_WRITE_ERROR otherwise.
///
/// Returns: the status code of the write operation
///
/// Since: 1.0
typedef cairo_write_func_t
    = ffi.Pointer<ffi.NativeFunction<cairo_write_func_tFunction>>;
typedef cairo_write_func_tFunction = ffi.UnsignedInt Function(
    ffi.Pointer<ffi.Void> closure,
    ffi.Pointer<ffi.UnsignedChar> data,
    ffi.UnsignedInt length);
typedef Dartcairo_write_func_tFunction = cairo_status1 Function(
    ffi.Pointer<ffi.Void> closure,
    ffi.Pointer<ffi.UnsignedChar> data,
    int length);
